; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	J:\bgb.proj.bsvm2\xt128tst0.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
?objty_arrhead@?1??dtvIsArrayP@@9@9 DD 0ffffffffH	; `dtvIsArrayP'::`2'::objty_arrhead
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_main
PUBLIC	??_C@_0BM@DIHLDJEL@a?$DN?$CFf?0?5b?$DN?$CFf?0?5a?$CLb?$DN?$CFf?0?5b?$CLa?$DN?$CFf?6?$AA@ ; `string'
PUBLIC	??_C@_0BM@HJFBNIID@a?$DN?$CFf?0?5b?$DN?$CFf?0?5a?9b?$DN?$CFf?0?5b?9a?$DN?$CFf?6?$AA@ ; `string'
PUBLIC	??_C@_0BM@CHPHOJBH@a?$DN?$CFf?0?5b?$DN?$CFf?0?5a?$CKb?$DN?$CFf?0?5b?$CKa?$DN?$CFf?6?$AA@ ; `string'
PUBLIC	??_C@_0BM@EGEIHIDL@a?$DN?$CFf?0?5b?$DN?$CFf?0?5a?1b?$DN?$CFf?0?5b?1a?$DN?$CFf?6?$AA@ ; `string'
PUBLIC	??_C@_0L@PBNPLDFL@a?$DN?$CFs?6b?$DN?$CFs?6?$AA@	; `string'
PUBLIC	??_C@_0CC@OGDKMCMI@3?4141592653589793238462643383279@ ; `string'
PUBLIC	??_C@_0L@HPOKOJIH@c?$DN?$CFs?6d?$DN?$CFs?6?$AA@	; `string'
PUBLIC	??_C@_0L@OIPPPJKD@I128?5Add?3?6?$AA@		; `string'
PUBLIC	??_C@_0BC@DOMNLMGA@?$CFf?5?$CFd?5?$CF?43f?5M?1s?5?5?$AN?$AA@ ; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_0L@HAJKPAF@I128?5Mul?3?6?$AA@		; `string'
PUBLIC	??_C@_0L@LKLCDDLF@I128?5Div?3?6?$AA@		; `string'
PUBLIC	??_C@_0N@OKLOFGPI@I128?5Div?52?3?6?$AA@		; `string'
PUBLIC	??_C@_08NHDNPLG@LL?5Div?3?6?$AA@		; `string'
PUBLIC	??_C@_0BB@PLDMBBIH@a?$CLb?3?5?$CFs?6b?$CLa?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0BB@GOMCHBOE@a?9b?3?5?$CFs?6b?9a?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0BB@JJPOIAII@a?$CKb?3?5?$CFs?6b?$CKa?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0BB@KLEHFDPK@a?1b?3?5?$CFs?6b?1a?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0BD@ODJIIGEK@a?$CF?$CFb?3?5?$CFs?6b?$CF?$CFa?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@408f400000000000
PUBLIC	__real@412e848000000000
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	_rand:PROC
EXTRN	__imp__BGBDT_XI128_FromLong:PROC
EXTRN	__imp__BGBDT_XI128_ToString:PROC
EXTRN	__imp__BGBDT_XI128_AddX:PROC
EXTRN	__imp__BGBDT_XI128_SubX:PROC
EXTRN	__imp__BGBDT_XI128_MulX:PROC
EXTRN	__imp__BGBDT_XI128_DivX:PROC
EXTRN	__imp__BGBDT_XI128_ModX:PROC
EXTRN	__imp__BGBDT_XF128_FromDouble:PROC
EXTRN	__imp__BGBDT_XF128_ToDouble:PROC
EXTRN	__imp__BGBDT_XF128_ToStringWd:PROC
EXTRN	__imp__BGBDT_XF128_FromString:PROC
EXTRN	__imp__BGBDT_XF128_AddX:PROC
EXTRN	__imp__BGBDT_XF128_SubX:PROC
EXTRN	__imp__BGBDT_XF128_MulX:PROC
EXTRN	__imp__BGBDT_XF128_DivX:PROC
EXTRN	__imp__BGBDT_XD128_AddX:PROC
EXTRN	__imp__BGBDT_XD128_MulX:PROC
EXTRN	_clock:PROC
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT __real@412e848000000000
CONST	SEGMENT
__real@412e848000000000 DQ 0412e848000000000r	; 1e+06
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
CONST	ENDS
;	COMDAT ??_C@_0BD@ODJIIGEK@a?$CF?$CFb?3?5?$CFs?6b?$CF?$CFa?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BD@ODJIIGEK@a?$CF?$CFb?3?5?$CFs?6b?$CF?$CFa?3?5?$CFs?6?$AA@ DB 'a%'
	DB	'%b: %s', 0aH, 'b%%a: %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KLEHFDPK@a?1b?3?5?$CFs?6b?1a?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BB@KLEHFDPK@a?1b?3?5?$CFs?6b?1a?3?5?$CFs?6?$AA@ DB 'a/b: %s', 0aH, 'b'
	DB	'/a: %s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JJPOIAII@a?$CKb?3?5?$CFs?6b?$CKa?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BB@JJPOIAII@a?$CKb?3?5?$CFs?6b?$CKa?3?5?$CFs?6?$AA@ DB 'a*b: %s', 0aH
	DB	'b*a: %s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GOMCHBOE@a?9b?3?5?$CFs?6b?9a?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BB@GOMCHBOE@a?9b?3?5?$CFs?6b?9a?3?5?$CFs?6?$AA@ DB 'a-b: %s', 0aH, 'b'
	DB	'-a: %s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PLDMBBIH@a?$CLb?3?5?$CFs?6b?$CLa?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BB@PLDMBBIH@a?$CLb?3?5?$CFs?6b?$CLa?3?5?$CFs?6?$AA@ DB 'a+b: %s', 0aH
	DB	'b+a: %s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08NHDNPLG@LL?5Div?3?6?$AA@
CONST	SEGMENT
??_C@_08NHDNPLG@LL?5Div?3?6?$AA@ DB 'LL Div:', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OKLOFGPI@I128?5Div?52?3?6?$AA@
CONST	SEGMENT
??_C@_0N@OKLOFGPI@I128?5Div?52?3?6?$AA@ DB 'I128 Div 2:', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LKLCDDLF@I128?5Div?3?6?$AA@
CONST	SEGMENT
??_C@_0L@LKLCDDLF@I128?5Div?3?6?$AA@ DB 'I128 Div:', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HAJKPAF@I128?5Mul?3?6?$AA@
CONST	SEGMENT
??_C@_0L@HAJKPAF@I128?5Mul?3?6?$AA@ DB 'I128 Mul:', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DOMNLMGA@?$CFf?5?$CFd?5?$CF?43f?5M?1s?5?5?$AN?$AA@
CONST	SEGMENT
??_C@_0BC@DOMNLMGA@?$CFf?5?$CFd?5?$CF?43f?5M?1s?5?5?$AN?$AA@ DB '%f %d %.'
	DB	'3f M/s  ', 0dH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OIPPPJKD@I128?5Add?3?6?$AA@
CONST	SEGMENT
??_C@_0L@OIPPPJKD@I128?5Add?3?6?$AA@ DB 'I128 Add:', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HPOKOJIH@c?$DN?$CFs?6d?$DN?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0L@HPOKOJIH@c?$DN?$CFs?6d?$DN?$CFs?6?$AA@ DB 'c=%s', 0aH, 'd=%s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@OGDKMCMI@3?4141592653589793238462643383279@
CONST	SEGMENT
??_C@_0CC@OGDKMCMI@3?4141592653589793238462643383279@ DB '3.1415926535897'
	DB	'932384626433832795', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PBNPLDFL@a?$DN?$CFs?6b?$DN?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0L@PBNPLDFL@a?$DN?$CFs?6b?$DN?$CFs?6?$AA@ DB 'a=%s', 0aH, 'b=%s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EGEIHIDL@a?$DN?$CFf?0?5b?$DN?$CFf?0?5a?1b?$DN?$CFf?0?5b?1a?$DN?$CFf?6?$AA@
CONST	SEGMENT
??_C@_0BM@EGEIHIDL@a?$DN?$CFf?0?5b?$DN?$CFf?0?5a?1b?$DN?$CFf?0?5b?1a?$DN?$CFf?6?$AA@ DB 'a'
	DB	'=%f, b=%f, a/b=%f, b/a=%f', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CHPHOJBH@a?$DN?$CFf?0?5b?$DN?$CFf?0?5a?$CKb?$DN?$CFf?0?5b?$CKa?$DN?$CFf?6?$AA@
CONST	SEGMENT
??_C@_0BM@CHPHOJBH@a?$DN?$CFf?0?5b?$DN?$CFf?0?5a?$CKb?$DN?$CFf?0?5b?$CKa?$DN?$CFf?6?$AA@ DB 'a'
	DB	'=%f, b=%f, a*b=%f, b*a=%f', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HJFBNIID@a?$DN?$CFf?0?5b?$DN?$CFf?0?5a?9b?$DN?$CFf?0?5b?9a?$DN?$CFf?6?$AA@
CONST	SEGMENT
??_C@_0BM@HJFBNIID@a?$DN?$CFf?0?5b?$DN?$CFf?0?5a?9b?$DN?$CFf?0?5b?9a?$DN?$CFf?6?$AA@ DB 'a'
	DB	'=%f, b=%f, a-b=%f, b-a=%f', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DIHLDJEL@a?$DN?$CFf?0?5b?$DN?$CFf?0?5a?$CLb?$DN?$CFf?0?5b?$CLa?$DN?$CFf?6?$AA@
CONST	SEGMENT
??_C@_0BM@DIHLDJEL@a?$DN?$CFf?0?5b?$DN?$CFf?0?5a?$CLb?$DN?$CFf?0?5b?$CLa?$DN?$CFf?6?$AA@ DB 'a'
	DB	'=%f, b=%f, a+b=%f, b+a=%f', 0aH, 00H	; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _main
_TEXT	SEGMENT
_t2$4$ = -72						; size = 4
_t2$3$ = -72						; size = 4
_t0$1$ = -72						; size = 4
_t2$1$ = -68						; size = 4
_t0$5$ = -68						; size = 4
_t0$4$ = -68						; size = 4
_t0$3$ = -68						; size = 4
_vb$3$ = -64						; size = 16
_vb$1$ = -64						; size = 16
_va$2$ = -64						; size = 16
_vb$2$ = -48						; size = 16
_va$3$ = -48						; size = 16
_va$1$ = -48						; size = 16
_vd$1$ = -32						; size = 16
_vc$10$ = -32						; size = 16
_vc$9$ = -32						; size = 16
_vc$8$ = -32						; size = 16
_vc$7$ = -32						; size = 16
_vc$6$ = -32						; size = 16
_vc$5$ = -32						; size = 16
_vc$4$ = -32						; size = 16
_vc$3$ = -32						; size = 16
_vc$2$ = -32						; size = 16
_vc$1$ = -32						; size = 16
$T1 = -32						; size = 16
$T2 = -32						; size = 16
$T3 = -32						; size = 16
$T4 = -16						; size = 16
$T5 = -16						; size = 16
$T6 = -16						; size = 16
$T7 = -16						; size = 16
$T8 = -16						; size = 16
$T9 = -16						; size = 16
$T10 = -16						; size = 16
$T11 = -16						; size = 16
$T12 = -16						; size = 16
$T13 = -16						; size = 16
$T14 = -16						; size = 16
$T15 = -16						; size = 16
$T16 = -16						; size = 16
$T17 = -16						; size = 16
$T18 = -16						; size = 16
$T19 = -16						; size = 16
$T20 = -16						; size = 16
$T21 = -16						; size = 16
$T22 = -16						; size = 16
$T23 = -16						; size = 16
$T24 = -16						; size = 16
$T25 = -16						; size = 16
$T26 = -16						; size = 16
$T27 = -16						; size = 16
$T28 = -16						; size = 16
$T29 = -16						; size = 16
$T30 = -16						; size = 16
$T31 = -16						; size = 16
$T32 = -16						; size = 16
_main	PROC						; COMDAT
; File j:\bgb.proj.bsvm2\xt128tst0.c
; Line 6
	push	ebp
	mov	ebp, esp
	and	esp, -16				; fffffff0H
	sub	esp, 84					; 00000054H
; Line 18
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	lea	eax, DWORD PTR $T3[esp+84]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR __imp__BGBDT_XF128_FromDouble
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	eax
	call	edi
; Line 19
	add	esp, 4
	movups	xmm0, XMMWORD PTR [eax]
	lea	eax, DWORD PTR $T2[esp+104]
	movaps	XMMWORD PTR _va$1$[esp+104], xmm0
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	push	eax
	call	edi
; Line 21
	mov	esi, DWORD PTR __imp__BGBDT_XF128_AddX
	push	ecx
	mov	ecx, esp
	sub	esp, 16					; 00000010H
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _vb$1$[esp+128], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	mov	eax, esp
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR _va$1$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR $T1[esp+128]
	push	eax
	call	esi
; Line 22
	add	esp, 20					; 00000014H
	movups	xmm0, XMMWORD PTR [eax]
	mov	eax, esp
	sub	esp, 16					; 00000010H
	movaps	XMMWORD PTR _vc$1$[esp+128], xmm0
	movaps	xmm0, XMMWORD PTR _va$1$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, esp
	movaps	xmm0, XMMWORD PTR _vb$1$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR $T32[esp+128]
	push	eax
	call	esi
; Line 24
	add	esp, 20					; 00000014H
	mov	ecx, esp
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	call	DWORD PTR __imp__BGBDT_XF128_ToDouble
	movaps	xmm0, XMMWORD PTR _vc$1$[esp+112]
	sub	esp, 8
	mov	eax, esp
	fstp	QWORD PTR [esp+16]
	movups	XMMWORD PTR [eax], xmm0
	call	DWORD PTR __imp__BGBDT_XF128_ToDouble
	movaps	xmm0, XMMWORD PTR _vb$1$[esp+120]
	sub	esp, 8
	mov	eax, esp
	fstp	QWORD PTR [esp+16]
	movups	XMMWORD PTR [eax], xmm0
	call	DWORD PTR __imp__BGBDT_XF128_ToDouble
	movaps	xmm0, XMMWORD PTR _va$1$[esp+128]
	sub	esp, 8
	mov	eax, esp
	fstp	QWORD PTR [esp+16]
	movups	XMMWORD PTR [eax], xmm0
	call	DWORD PTR __imp__BGBDT_XF128_ToDouble
	add	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BM@DIHLDJEL@a?$DN?$CFf?0?5b?$DN?$CFf?0?5a?$CLb?$DN?$CFf?0?5b?$CLa?$DN?$CFf?6?$AA@
	call	_printf
; Line 28
	movaps	xmm0, XMMWORD PTR _vb$1$[esp+132]
	add	esp, 20					; 00000014H
	mov	eax, esp
	sub	esp, 16					; 00000010H
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, esp
	movaps	xmm0, XMMWORD PTR _va$1$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR $T31[esp+128]
	mov	esi, DWORD PTR __imp__BGBDT_XF128_SubX
	push	eax
	call	esi
; Line 29
	add	esp, 20					; 00000014H
	movups	xmm0, XMMWORD PTR [eax]
	mov	eax, esp
	sub	esp, 16					; 00000010H
	movaps	XMMWORD PTR _vc$2$[esp+128], xmm0
	movaps	xmm0, XMMWORD PTR _va$1$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, esp
	movaps	xmm0, XMMWORD PTR _vb$1$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR $T30[esp+128]
	push	eax
	call	esi
; Line 30
	add	esp, 20					; 00000014H
	mov	ecx, esp
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	call	DWORD PTR __imp__BGBDT_XF128_ToDouble
	movaps	xmm0, XMMWORD PTR _vc$2$[esp+112]
	sub	esp, 8
	mov	eax, esp
	fstp	QWORD PTR [esp+16]
	movups	XMMWORD PTR [eax], xmm0
	call	DWORD PTR __imp__BGBDT_XF128_ToDouble
	movaps	xmm0, XMMWORD PTR _vb$1$[esp+120]
	sub	esp, 8
	mov	eax, esp
	fstp	QWORD PTR [esp+16]
	movups	XMMWORD PTR [eax], xmm0
	call	DWORD PTR __imp__BGBDT_XF128_ToDouble
	movaps	xmm0, XMMWORD PTR _va$1$[esp+128]
	sub	esp, 8
	mov	eax, esp
	fstp	QWORD PTR [esp+16]
	movups	XMMWORD PTR [eax], xmm0
	call	DWORD PTR __imp__BGBDT_XF128_ToDouble
	add	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BM@HJFBNIID@a?$DN?$CFf?0?5b?$DN?$CFf?0?5a?9b?$DN?$CFf?0?5b?9a?$DN?$CFf?6?$AA@
	call	_printf
; Line 34
	movsd	xmm0, QWORD PTR __real@400921fb54442d18
	lea	eax, DWORD PTR $T29[esp+132]
	add	esp, 28					; 0000001cH
	movsd	QWORD PTR [esp], xmm0
	push	eax
	call	edi
; Line 35
	add	esp, 4
	movups	xmm0, XMMWORD PTR [eax]
	lea	eax, DWORD PTR $T28[esp+104]
	movaps	XMMWORD PTR _va$2$[esp+104], xmm0
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	push	eax
	call	edi
; Line 37
	mov	esi, DWORD PTR __imp__BGBDT_XF128_MulX
	push	ecx
	mov	ecx, esp
	sub	esp, 16					; 00000010H
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _vb$2$[esp+128], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	mov	eax, esp
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR _va$2$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR $T27[esp+128]
	push	eax
	call	esi
; Line 38
	add	esp, 20					; 00000014H
	movups	xmm0, XMMWORD PTR [eax]
	mov	eax, esp
	sub	esp, 16					; 00000010H
	movaps	XMMWORD PTR _vc$3$[esp+128], xmm0
	movaps	xmm0, XMMWORD PTR _va$2$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, esp
	movaps	xmm0, XMMWORD PTR _vb$2$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR $T26[esp+128]
	push	eax
	call	esi
; Line 39
	add	esp, 20					; 00000014H
	mov	ecx, esp
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	call	DWORD PTR __imp__BGBDT_XF128_ToDouble
	movaps	xmm0, XMMWORD PTR _vc$3$[esp+112]
	sub	esp, 8
	mov	eax, esp
	fstp	QWORD PTR [esp+16]
	movups	XMMWORD PTR [eax], xmm0
	call	DWORD PTR __imp__BGBDT_XF128_ToDouble
	movaps	xmm0, XMMWORD PTR _vb$2$[esp+120]
	sub	esp, 8
	mov	eax, esp
	fstp	QWORD PTR [esp+16]
	movups	XMMWORD PTR [eax], xmm0
	call	DWORD PTR __imp__BGBDT_XF128_ToDouble
	movaps	xmm0, XMMWORD PTR _va$2$[esp+128]
	sub	esp, 8
	mov	eax, esp
	fstp	QWORD PTR [esp+16]
	movups	XMMWORD PTR [eax], xmm0
	call	DWORD PTR __imp__BGBDT_XF128_ToDouble
	add	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BM@CHPHOJBH@a?$DN?$CFf?0?5b?$DN?$CFf?0?5a?$CKb?$DN?$CFf?0?5b?$CKa?$DN?$CFf?6?$AA@
	call	_printf
; Line 43
	movaps	xmm0, XMMWORD PTR _vb$2$[esp+132]
	add	esp, 20					; 00000014H
	mov	esi, DWORD PTR __imp__BGBDT_XF128_DivX
	mov	eax, esp
	sub	esp, 16					; 00000010H
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, esp
	movaps	xmm0, XMMWORD PTR _va$2$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR $T25[esp+128]
	push	eax
	call	esi
; Line 44
	add	esp, 20					; 00000014H
	movups	xmm0, XMMWORD PTR [eax]
	mov	eax, esp
	sub	esp, 16					; 00000010H
	movaps	XMMWORD PTR _vc$4$[esp+128], xmm0
	movaps	xmm0, XMMWORD PTR _va$2$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, esp
	movaps	xmm0, XMMWORD PTR _vb$2$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR $T24[esp+128]
	push	eax
	call	esi
; Line 45
	add	esp, 20					; 00000014H
	mov	ecx, esp
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	call	DWORD PTR __imp__BGBDT_XF128_ToDouble
	movaps	xmm0, XMMWORD PTR _vc$4$[esp+112]
	sub	esp, 8
	mov	eax, esp
	fstp	QWORD PTR [esp+16]
	movups	XMMWORD PTR [eax], xmm0
	call	DWORD PTR __imp__BGBDT_XF128_ToDouble
	movaps	xmm0, XMMWORD PTR _vb$2$[esp+120]
	sub	esp, 8
	mov	eax, esp
	fstp	QWORD PTR [esp+16]
	movups	XMMWORD PTR [eax], xmm0
	call	DWORD PTR __imp__BGBDT_XF128_ToDouble
	movaps	xmm0, XMMWORD PTR _va$2$[esp+128]
	sub	esp, 8
	mov	eax, esp
	fstp	QWORD PTR [esp+16]
	movups	XMMWORD PTR [eax], xmm0
	call	DWORD PTR __imp__BGBDT_XF128_ToDouble
	add	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BM@EGEIHIDL@a?$DN?$CFf?0?5b?$DN?$CFf?0?5a?1b?$DN?$CFf?0?5b?1a?$DN?$CFf?6?$AA@
	call	_printf
; Line 49
	movaps	xmm0, XMMWORD PTR _vb$2$[esp+132]
	add	esp, 36					; 00000024H
	mov	esi, DWORD PTR __imp__BGBDT_XF128_ToStringWd
	push	36					; 00000024H
	sub	esp, 16					; 00000010H
	mov	eax, esp
	movups	XMMWORD PTR [eax], xmm0
	call	esi
	movaps	xmm0, XMMWORD PTR _va$2$[esp+116]
	add	esp, 20					; 00000014H
	push	eax
	push	36					; 00000024H
	sub	esp, 16					; 00000010H
	mov	eax, esp
	movups	XMMWORD PTR [eax], xmm0
	call	esi
	add	esp, 20					; 00000014H
	push	eax
	push	OFFSET ??_C@_0L@PBNPLDFL@a?$DN?$CFs?6b?$DN?$CFs?6?$AA@
	call	_printf
; Line 53
	lea	eax, DWORD PTR $T23[esp+108]
	push	OFFSET ??_C@_0CC@OGDKMCMI@3?4141592653589793238462643383279@
	push	eax
	call	DWORD PTR __imp__BGBDT_XF128_FromString
	add	esp, 20					; 00000014H
	movups	xmm0, XMMWORD PTR [eax]
; Line 55
	push	36					; 00000024H
	sub	esp, 16					; 00000010H
	movaps	XMMWORD PTR _vc$5$[esp+116], xmm0
	mov	ecx, esp
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	call	esi
	movaps	xmm0, XMMWORD PTR _vc$5$[esp+116]
	add	esp, 20					; 00000014H
	push	eax
	push	36					; 00000024H
	sub	esp, 16					; 00000010H
	mov	eax, esp
	movups	XMMWORD PTR [eax], xmm0
	call	esi
	add	esp, 20					; 00000014H
	push	eax
	push	OFFSET ??_C@_0L@HPOKOJIH@c?$DN?$CFs?6d?$DN?$CFs?6?$AA@
	call	_printf
; Line 59
	movaps	xmm0, XMMWORD PTR _vb$2$[esp+108]
	push	ecx
	mov	eax, esp
	sub	esp, 16					; 00000010H
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, esp
	movaps	xmm0, XMMWORD PTR _va$2$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR $T22[esp+128]
	push	eax
	call	DWORD PTR __imp__BGBDT_XD128_AddX
; Line 60
	movaps	xmm0, XMMWORD PTR _vb$2$[esp+132]
	add	esp, 20					; 00000014H
	mov	eax, esp
	sub	esp, 16					; 00000010H
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, esp
	movaps	xmm0, XMMWORD PTR _va$2$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR $T21[esp+128]
	push	eax
	call	DWORD PTR __imp__BGBDT_XD128_MulX
; Line 130
	push	OFFSET ??_C@_0L@OIPPPJKD@I128?5Add?3?6?$AA@
	call	_printf
	add	esp, 40					; 00000028H
; Line 131
	call	_clock
	xor	ebx, ebx
	mov	DWORD PTR _t0$1$[esp+96], eax
	lea	ecx, DWORD PTR [eax+1000]
	mov	DWORD PTR _t2$1$[esp+96], ecx
; Line 132
	cmp	eax, ecx
	jge	$LN3@main
	npad	6
$LL2@main:
; Line 134
	mov	edi, 100000				; 000186a0H
	add	ebx, edi
$LL6@main:
; Line 138
	npad	1
; Line 139
	mov	esi, eax
; Line 140
	mul	ecx
; Line 141
	adc	eax, edx
; Line 142
	npad	1
; Line 145
	movaps	xmm0, XMMWORD PTR _vb$2$[esp+96]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	sub	esp, 16					; 00000010H
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, esp
	movaps	xmm0, XMMWORD PTR _va$2$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR $T20[esp+128]
	push	eax
	call	DWORD PTR __imp__BGBDT_XI128_AddX
	add	esp, 36					; 00000024H
	sub	edi, 1
	jne	SHORT $LL6@main
; Line 147
	call	_clock
	mov	esi, eax
	movd	xmm1, ebx
; Line 148
	mov	ecx, esi
; Line 149
	sub	esp, 8
	sub	ecx, DWORD PTR _t0$1$[esp+104]
	cvtdq2pd xmm1, xmm1
	movd	xmm2, ecx
	divsd	xmm1, QWORD PTR __real@412e848000000000
	cvtdq2pd xmm2, xmm2
	divsd	xmm2, QWORD PTR __real@408f400000000000
	movaps	xmm0, xmm2
	addsd	xmm0, QWORD PTR __real@3f1a36e2eb1c432d
	divsd	xmm1, xmm0
	movsd	QWORD PTR [esp], xmm1
	push	ebx
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm2
	push	OFFSET ??_C@_0BC@DOMNLMGA@?$CFf?5?$CFd?5?$CF?43f?5M?1s?5?5?$AN?$AA@
	call	_printf
	add	esp, 24					; 00000018H
	cmp	esi, DWORD PTR _t2$1$[esp+96]
	jl	$LL2@main
$LN3@main:
; Line 151
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
; Line 153
	push	OFFSET ??_C@_0L@HAJKPAF@I128?5Mul?3?6?$AA@
	call	_printf
	add	esp, 8
; Line 154
	call	_clock
	mov	ebx, eax
	xor	edi, edi
	lea	eax, DWORD PTR [ebx+1000]
; Line 155
	cmp	ebx, eax
	jge	$LN8@main
	npad	2
$LL7@main:
; Line 157
	mov	esi, 100000				; 000186a0H
	add	edi, esi
	npad	9
$LL11@main:
; Line 158
	movaps	xmm0, XMMWORD PTR _vb$2$[esp+96]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	sub	esp, 16					; 00000010H
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, esp
	movaps	xmm0, XMMWORD PTR _va$2$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR $T19[esp+128]
	push	eax
	call	DWORD PTR __imp__BGBDT_XI128_MulX
	add	esp, 36					; 00000024H
	sub	esi, 1
	jne	SHORT $LL11@main
; Line 159
	call	_clock
	mov	esi, eax
	movd	xmm1, edi
; Line 160
	mov	ecx, esi
; Line 161
	sub	esp, 8
	sub	ecx, ebx
	cvtdq2pd xmm1, xmm1
	movd	xmm2, ecx
	divsd	xmm1, QWORD PTR __real@412e848000000000
	cvtdq2pd xmm2, xmm2
	divsd	xmm2, QWORD PTR __real@408f400000000000
	movaps	xmm0, xmm2
	addsd	xmm0, QWORD PTR __real@3f1a36e2eb1c432d
	divsd	xmm1, xmm0
	movsd	QWORD PTR [esp], xmm1
	push	edi
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm2
	push	OFFSET ??_C@_0BC@DOMNLMGA@?$CFf?5?$CFd?5?$CF?43f?5M?1s?5?5?$AN?$AA@
	call	_printf
	lea	eax, DWORD PTR [ebx+1000]
	add	esp, 24					; 00000018H
	cmp	esi, eax
	jl	$LL7@main
$LN8@main:
; Line 163
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
; Line 165
	push	OFFSET ??_C@_0L@LKLCDDLF@I128?5Div?3?6?$AA@
	call	_printf
	add	esp, 8
; Line 166
	call	_clock
; Line 167
	mov	ebx, DWORD PTR __imp__BGBDT_XI128_DivX
	xor	edi, edi
	mov	DWORD PTR _t0$3$[esp+96], eax
	lea	ecx, DWORD PTR [eax+1000]
	mov	DWORD PTR _t2$3$[esp+96], ecx
	cmp	eax, ecx
	jge	$LN13@main
	npad	3
$LL12@main:
; Line 169
	mov	esi, 100000				; 000186a0H
	add	edi, esi
	npad	9
$LL16@main:
; Line 170
	movaps	xmm0, XMMWORD PTR _vb$2$[esp+96]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	sub	esp, 16					; 00000010H
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, esp
	movaps	xmm0, XMMWORD PTR _va$2$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR $T18[esp+128]
	push	eax
	call	ebx
	add	esp, 36					; 00000024H
	sub	esi, 1
	jne	SHORT $LL16@main
; Line 171
	call	_clock
	mov	esi, eax
	movd	xmm1, edi
; Line 172
	mov	ecx, esi
; Line 173
	sub	esp, 8
	sub	ecx, DWORD PTR _t0$3$[esp+104]
	cvtdq2pd xmm1, xmm1
	movd	xmm2, ecx
	divsd	xmm1, QWORD PTR __real@412e848000000000
	cvtdq2pd xmm2, xmm2
	divsd	xmm2, QWORD PTR __real@408f400000000000
	movaps	xmm0, xmm2
	addsd	xmm0, QWORD PTR __real@3f1a36e2eb1c432d
	divsd	xmm1, xmm0
	movsd	QWORD PTR [esp], xmm1
	push	edi
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm2
	push	OFFSET ??_C@_0BC@DOMNLMGA@?$CFf?5?$CFd?5?$CF?43f?5M?1s?5?5?$AN?$AA@
	call	_printf
	add	esp, 24					; 00000018H
	cmp	esi, DWORD PTR _t2$3$[esp+96]
	jl	$LL12@main
$LN13@main:
; Line 175
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
; Line 177
	push	0
	lea	eax, DWORD PTR $T17[esp+104]
	push	3
	push	eax
	call	DWORD PTR __imp__BGBDT_XI128_FromLong
; Line 178
	push	OFFSET ??_C@_0N@OKLOFGPI@I128?5Div?52?3?6?$AA@
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _vd$1$[esp+116], xmm0
	call	_printf
	add	esp, 20					; 00000014H
; Line 179
	call	_clock
	xor	edi, edi
	mov	DWORD PTR _t0$4$[esp+96], eax
	lea	ecx, DWORD PTR [eax+15000]
	mov	DWORD PTR _t2$4$[esp+96], ecx
; Line 180
	cmp	eax, ecx
	jge	$LN18@main
	npad	8
$LL17@main:
; Line 182
	mov	esi, 100000				; 000186a0H
	add	edi, esi
	npad	9
$LL21@main:
; Line 183
	movaps	xmm0, XMMWORD PTR _vd$1$[esp+96]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	sub	esp, 16					; 00000010H
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, esp
	movaps	xmm0, XMMWORD PTR _va$2$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR $T16[esp+128]
	push	eax
	call	ebx
	add	esp, 36					; 00000024H
	sub	esi, 1
	jne	SHORT $LL21@main
; Line 184
	call	_clock
	mov	esi, eax
	movd	xmm1, edi
; Line 185
	mov	ecx, esi
; Line 186
	sub	esp, 8
	sub	ecx, DWORD PTR _t0$4$[esp+104]
	cvtdq2pd xmm1, xmm1
	movd	xmm2, ecx
	divsd	xmm1, QWORD PTR __real@412e848000000000
	cvtdq2pd xmm2, xmm2
	divsd	xmm2, QWORD PTR __real@408f400000000000
	movaps	xmm0, xmm2
	addsd	xmm0, QWORD PTR __real@3f1a36e2eb1c432d
	divsd	xmm1, xmm0
	movsd	QWORD PTR [esp], xmm1
	push	edi
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm2
	push	OFFSET ??_C@_0BC@DOMNLMGA@?$CFf?5?$CFd?5?$CF?43f?5M?1s?5?5?$AN?$AA@
	call	_printf
	add	esp, 24					; 00000018H
	cmp	esi, DWORD PTR _t2$4$[esp+96]
	jl	$LL17@main
$LN18@main:
; Line 188
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
; Line 192
	push	OFFSET ??_C@_08NHDNPLG@LL?5Div?3?6?$AA@
	call	_printf
	add	esp, 8
; Line 193
	call	_clock
	xor	edi, edi
	mov	DWORD PTR _t0$5$[esp+96], eax
	lea	ecx, DWORD PTR [eax+1000]
; Line 194
	cmp	eax, ecx
	jge	SHORT $LN23@main
	mov	ebx, eax
	npad	5
$LL22@main:
; Line 196
	call	_rand
	call	_rand
; Line 198
	add	edi, 100000				; 000186a0H
; Line 201
	call	_clock
	mov	esi, eax
	movd	xmm1, edi
; Line 202
	mov	ecx, esi
; Line 203
	sub	esp, 8
	sub	ecx, ebx
	cvtdq2pd xmm1, xmm1
	movd	xmm2, ecx
	divsd	xmm1, QWORD PTR __real@412e848000000000
	cvtdq2pd xmm2, xmm2
	divsd	xmm2, QWORD PTR __real@408f400000000000
	movaps	xmm0, xmm2
	addsd	xmm0, QWORD PTR __real@3f1a36e2eb1c432d
	divsd	xmm1, xmm0
	movsd	QWORD PTR [esp], xmm1
	push	edi
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm2
	push	OFFSET ??_C@_0BC@DOMNLMGA@?$CFf?5?$CFd?5?$CF?43f?5M?1s?5?5?$AN?$AA@
	call	_printf
	lea	eax, DWORD PTR [ebx+1000]
	add	esp, 24					; 00000018H
	cmp	esi, eax
	jl	SHORT $LL22@main
	mov	ebx, DWORD PTR __imp__BGBDT_XI128_DivX
$LN23@main:
; Line 205
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
; Line 221
	mov	esi, DWORD PTR __imp__BGBDT_XI128_FromLong
	lea	eax, DWORD PTR $T15[esp+100]
	push	731459					; 000b2943H
	push	170224929				; 0a256d21H
	push	eax
	call	esi
; Line 222
	push	555214					; 000878ceH
	push	461551451				; 1b82b75bH
	movups	xmm0, XMMWORD PTR [eax]
	lea	eax, DWORD PTR $T14[esp+120]
	push	eax
	movaps	XMMWORD PTR _va$3$[esp+124], xmm0
	call	esi
; Line 224
	mov	edi, DWORD PTR __imp__BGBDT_XI128_ToString
	add	esp, 12					; 0000000cH
	mov	ecx, esp
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _vb$3$[esp+112], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	call	edi
	movaps	xmm0, XMMWORD PTR _va$3$[esp+112]
	add	esp, 16					; 00000010H
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, esp
	movups	XMMWORD PTR [eax], xmm0
	call	edi
	add	esp, 16					; 00000010H
	push	eax
	push	OFFSET ??_C@_0L@PBNPLDFL@a?$DN?$CFs?6b?$DN?$CFs?6?$AA@
	call	_printf
; Line 228
	movaps	xmm0, XMMWORD PTR _vb$3$[esp+108]
	mov	esi, DWORD PTR __imp__BGBDT_XI128_AddX
	push	ecx
	mov	eax, esp
	sub	esp, 16					; 00000010H
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, esp
	movaps	xmm0, XMMWORD PTR _va$3$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR $T13[esp+128]
	push	eax
	call	esi
; Line 229
	add	esp, 20					; 00000014H
	movups	xmm0, XMMWORD PTR [eax]
	mov	eax, esp
	sub	esp, 16					; 00000010H
	movaps	XMMWORD PTR _vc$6$[esp+128], xmm0
	movaps	xmm0, XMMWORD PTR _va$3$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, esp
	movaps	xmm0, XMMWORD PTR _vb$3$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR $T12[esp+128]
	push	eax
	call	esi
; Line 230
	add	esp, 20					; 00000014H
	mov	ecx, esp
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	call	edi
	movaps	xmm0, XMMWORD PTR _vc$6$[esp+112]
	add	esp, 16					; 00000010H
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, esp
	movups	XMMWORD PTR [eax], xmm0
	call	edi
	add	esp, 16					; 00000010H
	push	eax
	push	OFFSET ??_C@_0BB@PLDMBBIH@a?$CLb?3?5?$CFs?6b?$CLa?3?5?$CFs?6?$AA@
	call	_printf
; Line 233
	movaps	xmm0, XMMWORD PTR _vb$3$[esp+108]
	push	ecx
	mov	eax, esp
	sub	esp, 16					; 00000010H
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, esp
	movaps	xmm0, XMMWORD PTR _va$3$[esp+128]
	mov	esi, DWORD PTR __imp__BGBDT_XI128_SubX
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR $T11[esp+128]
	push	eax
	call	esi
; Line 234
	add	esp, 20					; 00000014H
	movups	xmm0, XMMWORD PTR [eax]
	mov	eax, esp
	sub	esp, 16					; 00000010H
	movaps	XMMWORD PTR _vc$7$[esp+128], xmm0
	movaps	xmm0, XMMWORD PTR _va$3$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, esp
	movaps	xmm0, XMMWORD PTR _vb$3$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR $T10[esp+128]
	push	eax
	call	esi
; Line 235
	add	esp, 20					; 00000014H
	mov	ecx, esp
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	call	edi
	movaps	xmm0, XMMWORD PTR _vc$7$[esp+112]
	add	esp, 16					; 00000010H
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, esp
	movups	XMMWORD PTR [eax], xmm0
	call	edi
	add	esp, 16					; 00000010H
	push	eax
	push	OFFSET ??_C@_0BB@GOMCHBOE@a?9b?3?5?$CFs?6b?9a?3?5?$CFs?6?$AA@
	call	_printf
; Line 238
	movaps	xmm0, XMMWORD PTR _vb$3$[esp+108]
	mov	esi, DWORD PTR __imp__BGBDT_XI128_MulX
	push	ecx
	mov	eax, esp
	sub	esp, 16					; 00000010H
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, esp
	movaps	xmm0, XMMWORD PTR _va$3$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR $T9[esp+128]
	push	eax
	call	esi
; Line 239
	add	esp, 20					; 00000014H
	movups	xmm0, XMMWORD PTR [eax]
	mov	eax, esp
	sub	esp, 16					; 00000010H
	movaps	XMMWORD PTR _vc$8$[esp+128], xmm0
	movaps	xmm0, XMMWORD PTR _va$3$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, esp
	movaps	xmm0, XMMWORD PTR _vb$3$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR $T8[esp+128]
	push	eax
	call	esi
; Line 240
	add	esp, 20					; 00000014H
	mov	ecx, esp
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	call	edi
	movaps	xmm0, XMMWORD PTR _vc$8$[esp+112]
	add	esp, 16					; 00000010H
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, esp
	movups	XMMWORD PTR [eax], xmm0
	call	edi
	add	esp, 16					; 00000010H
	push	eax
	push	OFFSET ??_C@_0BB@JJPOIAII@a?$CKb?3?5?$CFs?6b?$CKa?3?5?$CFs?6?$AA@
	call	_printf
; Line 243
	movaps	xmm0, XMMWORD PTR _vb$3$[esp+108]
	push	ecx
	mov	eax, esp
	sub	esp, 16					; 00000010H
	movups	XMMWORD PTR [eax], xmm0
	movaps	xmm0, XMMWORD PTR _va$3$[esp+128]
	mov	eax, esp
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR $T7[esp+128]
	push	eax
	call	ebx
; Line 244
	add	esp, 20					; 00000014H
	movups	xmm0, XMMWORD PTR [eax]
	mov	eax, esp
	sub	esp, 16					; 00000010H
	movaps	XMMWORD PTR _vc$9$[esp+128], xmm0
	movaps	xmm0, XMMWORD PTR _va$3$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, esp
	movaps	xmm0, XMMWORD PTR _vb$3$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR $T6[esp+128]
	push	eax
	call	ebx
; Line 245
	add	esp, 20					; 00000014H
	mov	ecx, esp
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	call	edi
	movaps	xmm0, XMMWORD PTR _vc$9$[esp+112]
	add	esp, 16					; 00000010H
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, esp
	movups	XMMWORD PTR [eax], xmm0
	call	edi
	add	esp, 16					; 00000010H
	push	eax
	push	OFFSET ??_C@_0BB@KLEHFDPK@a?1b?3?5?$CFs?6b?1a?3?5?$CFs?6?$AA@
	call	_printf
; Line 248
	movaps	xmm0, XMMWORD PTR _vb$3$[esp+108]
	mov	esi, DWORD PTR __imp__BGBDT_XI128_ModX
	push	ecx
	mov	eax, esp
	sub	esp, 16					; 00000010H
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, esp
	movaps	xmm0, XMMWORD PTR _va$3$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR $T5[esp+128]
	push	eax
	call	esi
; Line 249
	add	esp, 20					; 00000014H
	movups	xmm0, XMMWORD PTR [eax]
	mov	eax, esp
	sub	esp, 16					; 00000010H
	movaps	XMMWORD PTR _vc$10$[esp+128], xmm0
	movaps	xmm0, XMMWORD PTR _va$3$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, esp
	movaps	xmm0, XMMWORD PTR _vb$3$[esp+128]
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR $T4[esp+128]
	push	eax
	call	esi
; Line 250
	add	esp, 20					; 00000014H
	mov	ecx, esp
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	call	edi
	movaps	xmm0, XMMWORD PTR _vc$10$[esp+112]
	add	esp, 16					; 00000010H
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, esp
	movups	XMMWORD PTR [eax], xmm0
	call	edi
	add	esp, 16					; 00000010H
	push	eax
	push	OFFSET ??_C@_0BD@ODJIIGEK@a?$CF?$CFb?3?5?$CFs?6b?$CF?$CFa?3?5?$CFs?6?$AA@
	call	_printf
	add	esp, 12					; 0000000cH
; Line 253
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _printf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; Line 950
	push	esi
; Line 954
	mov	esi, DWORD PTR __Format$[esp]
	push	1
	call	___acrt_iob_func
	add	esp, 4
	lea	ecx, DWORD PTR __Format$[esp+4]
	push	ecx
	push	0
	push	esi
	push	eax
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	___stdio_common_vfprintf
	add	esp, 24					; 00000018H
	pop	esi
; Line 957
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; Line 639
	push	DWORD PTR __ArgList$[esp-4]
	push	DWORD PTR __Locale$[esp]
	push	DWORD PTR __Format$[esp+4]
	push	DWORD PTR __Stream$[esp+8]
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	___stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 640
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.10586.0\ucrt\corecrt_stdio_config.h
; Line 82
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 83
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
