//AHSRC:base/frgl_concmds.c
BTEIFGL_API FRGL_ConCmd *FRGL_LookupConCmd(char *name);
BTEIFGL_API FRGL_ConCmd *FRGL_GetConCmd(char *name);
BTEIFGL_API FRGL_ConCmd *FRGL_LookupConCmdPrefix(char *name);
BTEIFGL_API char *FRGL_ConCmdComplete(char *name);
BTEIFGL_API FRGL_ConCmd *FRGL_RegisterConCmd(char *name, char *desc,int (*func)(FRGL_ConsoleInfo *con, char **args));
//AHSRC:base/frgl_console.c
BTEIFGL_API int GfxFont_SetFont(char *name, int mode);
BTEIFGL_API int GfxFont_DrawChar(int c, int x, int y, int w, int h,int r, int g, int b, int a);
BTEIFGL_API int Con_HandleKey(int num, int down);
int Con_DefaultHandler(FRGL_ConsoleInfo *con, char *str);
char *Con_DefaultComplete(FRGL_ConsoleInfo *con, char *str);
BTEIFGL_API int Con_DoExecCmds(void);
BTEIFGL_API int Con_Update(float dt);
BTEIFGL_API int Con_UpdateInfo(FRGL_ConsoleInfo *con, float dt);
BTEIFGL_API int Con_StuffCmdInfo(FRGL_ConsoleInfo *con, char *str);
BTEIFGL_API int Con_StuffCmd(char *str);
BTEIFGL_API int Con_StuffCmdBuf(char *buf);
BTEIFGL_API int Con_ExecCmdBuf(char *name);
BTEIFGL_API int Con_IsDown();
BTEIFGL_API int Con_SetDown(int down);
BTEIFGL_API int Con_Clear();
BTEIFGL_API int Con_ClearInfo(FRGL_ConsoleInfo *con);
BTEIFGL_API FRGL_ConsoleInfo *FRGL_Console_AllocConsoleInfo();
BTEIFGL_API int Con_Init();
BTEIFGL_API int Con_ReInit();
BTEIFGL_API int Con_RenderBackground();
BTEIFGL_API int Con_RenderBackgroundInfo(FRGL_ConsoleInfo *con);
BTEIFGL_API int Con_Render();
BTEIFGL_API int Con_RenderInfo(FRGL_ConsoleInfo *con);
BTEIFGL_API int Con_RenderBackgroundVBO(FRGL_ConsoleInfo *con, FRGL_TextVBO *vbo);
BTEIFGL_API int Con_RenderTextVBO(FRGL_ConsoleInfo *con, FRGL_TextVBO *vbo);
BTEIFGL_API int Con_RenderInfo2(FRGL_ConsoleInfo *con);
void cb_scrollup();
void con_memcpy(u16 *dst, u16 *src, int cnt);
void con_memcpy2(u16 *dst, u16 *src, int cnt);
void con_memset(u16 *dst, int val, int cnt);
void con_memset2(u16 *dst, int val, int cnt);
void con_strcpy(u16 *dst, u16 *src);
int con_strlen(u16 *src);
void con_strcpy16to8(char *dst, u16 *src);
void con_strcpy8to16(u16 *dst, char *src);
void Con_ScrollUpInfo(FRGL_ConsoleInfo *con);
void Con_HandleAnsi(char **rstr);
void Con_HandleAnsiInfo(FRGL_ConsoleInfo *con, char **rstr);
BTEIFGL_API void Con_WriteStringBase(char *str);
BTEIFGL_API void Con_WriteString(char *str);
BTEIFGL_API void Con_WriteString2(FRGL_ConsoleInfo *con, char *str);
BTEIFGL_API int Con_HandleKey(int num, int down);
BTEIFGL_API int Con_HandleKeyInfo(FRGL_ConsoleInfo *con, int num, int down);
BTEIFGL_API int Con_KeyDown(FRGL_ConsoleInfo *con, int key);
BTEIFGL_API int Con_Printf(char *s, ...);
BTEIFGL_API int Con_Printf2(FRGL_ConsoleInfo *con, char *s, ...);
//AHSRC:base/frgl_cvar.c
FRGL_Cvar *FRGL_LookupCvar(char *name);
FRGL_Cvar *FRGL_GetCvar(char *name);
FRGL_Cvar *FRGL_LookupCvarPrefix(char *name);
BTEIFGL_API char *FRGL_CvarComplete(char *name);
BTEIFGL_API char *FRGL_CvarGet(char *name);
BTEIFGL_API bool FRGL_CvarSet(char *name, char *val);
BTEIFGL_API bool FRGL_CvarSetDefault(char *name, char *val);
BTEIFGL_API double FRGL_CvarGetNum(char *name);
BTEIFGL_API bool FRGL_CvarSetNum(char *name, double val);
BTEIFGL_API int FRGL_CvarGetInt(char *name);
//AHSRC:base/frgl_draw.c
BTEIFGL_API int Draw_SetSolid_2D(float aspect, int xo, int yo, int xs, int ys);
BTEIFGL_API int Draw_SetSolid2_2D(float aspect, float size,float *org, float *angles, int xo, int yo, int xs, int ys);
BTEIFGL_API int Draw_SetOrtho_3D(float aspect, float size,float *org, float *angles, int x, int y, int w, int h);
BTEIFGL_API int Draw_SetSolid3_2D(float lxs, float lys,float *org, int xo, int yo, int xs, int ys);
BTEIFGL_API int Draw_SetSolid4_2D(float *mins, float *maxs, float *org, float *ang, int xo, int yo, int xs, int ys);
BTEIFGL_API int Draw_SetPerspective_3D(float aspect, float fov, float d, float *org, float *angles, int xo, int yo, int xs, int ys);
BTEIFGL_API int Draw_SetPerspective2_3D(float aspect, float fov, float width, float *org, float *rot, int xo, int yo, int xs, int ys);
BTEIFGL_API void FRGL_Setup2D();
BTEIFGL_API void FRGL_Setup3D(float *org, float *rot);
//AHSRC:base/frgl_drawarr.c
BTEIFGL_API void FRGL_DrawPrim_SyncSendMatrix(void);
BTEIFGL_API void FRGL_DrawPrim_SyncSendMatrix(void);
BTEIFGL_API void FRGL_DrawPrim_DrawArraysSimpleFlat(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz);
BTEIFGL_API void FRGL_DrawPrim_DrawArraysNormalFlat(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int normsize, int normtype, int normstep, void *norm);
BTEIFGL_API void FRGL_DrawPrim_DrawArraysNormalFlatRGB(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int normsize, int normtype, int normstep, void *norm, int rgbsize, int rgbtype, int rgbstep, void *rgb);
BTEIFGL_API void FRGL_DrawPrim_DrawArraysNormalTex(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int normsize, int normtype, int normstep, void *norm);
BTEIFGL_API void FRGL_DrawPrim_DrawArraysNormalTexRGB(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int normsize, int normtype, int normstep, void *norm, int rgbsize, int rgbtype, int rgbstep, void *rgb);
BTEIFGL_API void FRGL_DrawPrim_DrawArraysTexRGB(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int rgbsize, int rgbtype, int rgbstep, void *rgb);
BTEIFGL_API void FRGL_DrawPrim_DrawElementsNormalTexRGB(int prim, int base, int nxyz, int *indices, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int normsize, int normtype, int normstep, void *norm, int rgbsize, int rgbtype, int rgbstep, void *rgb);
BTEIFGL_API void FRGL_DrawPrim_DrawArraysSimpleFlat(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz);
BTEIFGL_API void FRGL_DrawPrim_DrawArraysNormalFlat(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int normsize, int normtype, int normstep, void *norm);
BTEIFGL_API void FRGL_DrawPrim_DrawArraysNormalFlatRGB(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int normsize, int normtype, int normstep, void *norm, int rgbsize, int rgbtype, int rgbstep, void *rgb);
BTEIFGL_API void FRGL_DrawPrim_DrawArraysNormalTex(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int normsize, int normtype, int normstep, void *norm);
BTEIFGL_API void FRGL_DrawPrim_DrawArraysNormalTexRGB(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int normsize, int normtype, int normstep, void *norm, int rgbsize, int rgbtype, int rgbstep, void *rgb);
BTEIFGL_API void FRGL_DrawPrim_DrawArraysTexRGB(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int rgbsize, int rgbtype, int rgbstep, void *rgb);
BTEIFGL_API void FRGL_DrawPrim_DrawElementsNormalTexRGB(int prim, int base, int nxyz, int *indices, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int normsize, int normtype, int normstep, void *norm, int rgbsize, int rgbtype, int rgbstep, void *rgb);
//AHSRC:base/frgl_drawstub.c
int FRGL_DrawPrim_Init();
BTEIFGL_API void frglBegin(int prim);
BTEIFGL_API void frglEnd(void);
void FRGL_DrawPrim_DrawArrays(int prim, float *xyz, float *st, float *norm, float *rgba, int nxyz);
void FRGL_DrawPrim_VertexCheckExpand();
BTEIFGL_API void frglVertex3fv(float *v);
BTEIFGL_API void frglVertex3dv(double *v);
BTEIFGL_API void frglTexCoord2fv(float *v);
BTEIFGL_API void frglNormal3fv(float *v);
BTEIFGL_API void frglNormal4fv(float *v);
BTEIFGL_API void frglNormal3sbv(sbyte *v);
BTEIFGL_API void frglNormal3bv(sbyte *v);
BTEIFGL_API void frglColor3fv(float *v);
BTEIFGL_API void frglColor4fv(float *v);
BTEIFGL_API void frglColor4ubv(byte *v);
BTEIFGL_API void frglColor3f(float r, float g, float b);
BTEIFGL_API void frglColor4f(float r, float g, float b, float a);
BTEIFGL_API void frglColor4ub(int r, int g, int b, int a);
BTEIFGL_API void frglTexCoord2f(float s, float t);
BTEIFGL_API void frglVertex2f(float x, float y);
BTEIFGL_API void frglVertex3f(float x, float y, float z);
BTEIFGL_API void frglNormal3f(float x, float y, float z);
//BTEIFGL_API void frglColorMask(bool r, bool g, bool b, bool a);
BTEIFGL_API void frglEnableTexture2D(void);
BTEIFGL_API void frglDisableTexture2D(void);
BTEIFGL_API void frglBindTexture2D(int tex);
BTEIFGL_API void frglEnableLighting(void);
BTEIFGL_API void frglDisableLighting(void);
//BTEIFGL_API void frglEnable(int flag);
//BTEIFGL_API void frglDisable(int flag);
BTEIFGL_API void frglModelviewMatrix(void);
BTEIFGL_API void frglProjectionMatrix(void);
BTEIFGL_API void frglLoadIdentity();
BTEIFGL_API void frglPushMatrix(void);
BTEIFGL_API void frglPopMatrix(void);
BTEIFGL_API void frglMultMatrixf(float *mat);
BTEIFGL_API void frglTranslatef(float x, float y, float z);
BTEIFGL_API void frglScalef(float x, float y, float z);
BTEIFGL_API void frglRotatef(float th, float nx, float ny, float nz);
BTEIFGL_API void frglGetModelviewMatrix(float *v);
BTEIFGL_API void frglGetProjectionMatrix(float *v);
BTEIFGL_API float *frglGetModelviewMatrixPtr(void);
BTEIFGL_API float *frglGetProjectionMatrixPtr(void);
BTEIFGL_API void frglOrtho(float mx, float nx, float my, float ny, float mz, float nz);
BTEIFGL_API void frglFrustum(float mx, float nx, float my, float ny, float mz, float nz);
BTEIFGL_API void frglBegin(int prim);
BTEIFGL_API void frglEnd(void);
BTEIFGL_API void frglVertex2fv(float *v);
BTEIFGL_API void frglVertex3fv(float *v);
BTEIFGL_API void frglVertex3dv(double *v);
BTEIFGL_API void frglTexCoord2fv(float *v);
BTEIFGL_API void frglNormal3fv(float *v);
BTEIFGL_API void frglNormal3sbv(sbyte *v);
BTEIFGL_API void frglNormal3bv(sbyte *v);
BTEIFGL_API void frglColor3fv(float *v);
BTEIFGL_API void frglColor4fv(float *v);
BTEIFGL_API void frglColor4ubv(byte *v);
BTEIFGL_API void frglColor3f(float r, float g, float b);
BTEIFGL_API void frglColor4f(float r, float g, float b, float a);
BTEIFGL_API void frglColor4ub(int r, int g, int b, int a);
BTEIFGL_API void frglTexCoord2f(float s, float t);
BTEIFGL_API void frglVertex2f(float x, float y);
BTEIFGL_API void frglVertex3f(float x, float y, float z);
BTEIFGL_API void frglNormal3f(float x, float y, float z);
BTEIFGL_API void frglColorMask(bool r, bool g, bool b, bool a);
BTEIFGL_API void frglEnableTexture2D(void);
BTEIFGL_API void frglDisableTexture2D(void);
BTEIFGL_API void frglBindTexture2D(int tex);
BTEIFGL_API void frglEnableLighting(void);
BTEIFGL_API void frglDisableLighting(void);
BTEIFGL_API void frglEnable(int flag);
BTEIFGL_API void frglDisable(int flag);
BTEIFGL_API void frglModelviewMatrix(void);
BTEIFGL_API void frglProjectionMatrix(void);
BTEIFGL_API void frglLoadIdentity(void);
BTEIFGL_API void frglPushMatrix(void);
BTEIFGL_API void frglPopMatrix(void);
BTEIFGL_API void frglMultMatrixf(float *mat);
BTEIFGL_API void frglTranslatef(float x, float y, float z);
BTEIFGL_API void frglScalef(float x, float y, float z);
BTEIFGL_API void frglRotatef(float th, float nx, float ny, float nz);
BTEIFGL_API void frglGetModelviewMatrix(float *v);
BTEIFGL_API void frglOrtho(float mx, float nx, float my, float ny, float mz, float nz);
BTEIFGL_API void frglFrustum(float mx, float nx, float my, float ny, float mz, float nz);
//AHSRC:base/frgl_fonts.c
BTEIFGL_API int GfxFont_Register(char *name, byte *buf, int w, int h, int s, int e);
BTEIFGL_API FRGL_FontInfo *GfxFont_FindFont(char *name);
BTEIFGL_API byte *GfxFont_FetchChar(FRGL_FontInfo *font,int c, int *w, int *h);
BTEIFGL_API int GfxFont_GetCellBit(byte *cell,int w, int h, int x, int y, int rw, int rh);
BTEIFGL_API int GfxFont_RenderCell(FRGL_FontInfo *font,FRGL_FontFrag *frag, int c);
BTEIFGL_API FRGL_FontFrag *GfxFont_TryFetchFrag(FRGL_FontInfo *font, int c);
BTEIFGL_API FRGL_FontFrag *GfxFont_FetchFrag(FRGL_FontInfo *font, int c);
BTEIFGL_API int GfxFont_DrawChar(int c, int x, int y, int w, int h,int r, int g, int b, int a);
BTEIFGL_API int GfxFont_DrawCharMode(int c,int x, int y, int w, int h, int r, int g, int b, int a, int m);
BTEIFGL_API int GfxFont_DrawCharModeQI(int c,int x, int y, int w, int h, int r, int g, int b, int a, int m);
BTEIFGL_API int GfxFont_DrawString(char *str,int x, int y, int w, int h, int r, int g, int b, int a);
BTEIFGL_API int GfxFont_DrawString2(char *str, int x, int y, int w, int h,int r, int g, int b, int a);
BTEIFGL_API int GfxFont_DrawFormatString(char *str, int x, int y, int w, int h, int r, int g, int b, int a);
BTEIFGL_API int GfxFont_SetTime(int time);
BTEIFGL_API int GfxFont_SetFont(char *name, int mode);
BTEIFGL_API int GfxFont_SetFontSize(char *name, int mode, int size);
BTEIFGL_API int GfxFont_LoadFont(char *name, char *fname);
BTEIFGL_API int GfxFont_LoadFontBase(char *name, char *fname, int base);
BTEIFGL_API int GfxFont_AddFontSearch(char *name, char *cname);
BTEIFGL_API int GfxFont_Init();
//AHSRC:base/frgl_fonts_qi2.c
int frgl_clampi(int v, int m, int n);
BTEIFGL_API FRGL_TextVBO *FRGL_TextVBO_Create(void);
BTEIFGL_API void FRGL_TextVBO_Reset(FRGL_TextVBO *ctx);
BTEIFGL_API void FRGL_TextVBO_Upload(FRGL_TextVBO *ctx);
BTEIFGL_API void FRGL_TextVBO_Draw(FRGL_TextVBO *ctx);
BTEIFGL_API void FRGL_TextVBO_Color4fv(FRGL_TextVBO *ctx, float *fv);
BTEIFGL_API void FRGL_TextVBO_Color4f(FRGL_TextVBO *ctx,float r, float g, float b, float a);
BTEIFGL_API void FRGL_TextVBO_TexCoord2fv(FRGL_TextVBO *ctx, float *fv);
BTEIFGL_API void FRGL_TextVBO_TexCoord2f(FRGL_TextVBO *ctx,float s, float t);
BTEIFGL_API void FRGL_TextVBO_VertexCheckExpand(FRGL_TextVBO *ctx);
BTEIFGL_API void FRGL_TextVBO_Vertex3fv(FRGL_TextVBO *ctx, float *fv);
BTEIFGL_API void FRGL_TextVBO_Vertex2f(FRGL_TextVBO *ctx, float x, float y);
BTEIFGL_API void FRGL_TextVBO_CheckExpandPrim(FRGL_TextVBO *ctx);
BTEIFGL_API void FRGL_TextVBO_Begin(FRGL_TextVBO *ctx, int prim);
BTEIFGL_API void FRGL_TextVBO_End(FRGL_TextVBO *ctx);
BTEIFGL_API void FRGL_TextVBO_BindTexture(FRGL_TextVBO *ctx, int tex);
BTEIFGL_API int FRGL_TextVBO_DrawCharModeQI2(FRGL_TextVBO *ctx,int c, int x, int y, int w, int h, int r, int g, int b, int a, int m);
//AHSRC:base/frgl_input.c
BTEIFGL_API int frgl_puts(char *str);
BTEIFGL_API int frgl_printf(char *str, ...);
BTEIFGL_API void *frgl_malloc(int sz);
BTEIFGL_API void frgl_free(void *ptr);
BTEIFGL_API void *frgl_talloc(char *ty, int sz);
BTEIFGL_API void *frgl_tatomic(char *ty, int sz);
BTEIFGL_API void *frgl_realloc(void *ptr, int sz);
VFILE *frgl_fopen(char *name, char *mode);
void thLockFastMutex(void *ptr);
void thUnlockFastMutex(void *ptr);
void *thFastMutex();
BTEIFGL_API void *vf_bufferin_sz(VFILE *fd, int *rsz);
BTEIFGL_API void *vf_bufferin(VFILE *fd);
BTEIFGL_API void *vf_loadfile(char *name, int *rsz);
BTEIFGL_API void vf_storefile(char *name, void *buf, int sz);
BTEIFGL_API void *vf_loadfile(char *name, int *rsz);
BTEIFGL_API void vf_storefile(char *name, void *buf, int sz);
BTEIFGL_API void vf_freefdbuf(void *buf);
int FRGL_ParseChar(char **rs);
int FRGL_PeekChar(char **rs);
int FRGL_EmitChar(char **rs, int v);
BTEIFGL_API void *FRGL_GetState(void);
BTEIFGL_API void FRGL_SetupFrame(void);
BTEIFGL_API void FRGL_SetupMain(void);
BTEIFGL_API void FRGL_StartMain(void);
BTEIFGL_API void FRGL_FinishMain(void);
BTEIFGL_API void FRGL_FinishFrame(void);
BTEIFGL_API int FRGL_AddKeyHandler(int (*fcn)(int key, int down));
BTEIFGL_API int FRGL_KeyDown(int key);
BTEIFGL_API int FRGL_LastKeyDown(int key);
BTEIFGL_API int FRGL_GetKeyMap(byte *map);
BTEIFGL_API int GfxDev_Key_Event(int key, int down);
void FRGL_EndInputFrame();
BTEIFGL_API u16 *FRGL_GetKeybuf();
BTEIFGL_API int FRGL_TimeMS();
BTEIFGL_API int FRGL_DeltaMS(int *l);
BTEIFGL_API int frgl_clock(void);
BTEIFGL_API void FRGL_RegisterShutdown(void (*fcn)());
BTEIFGL_API void FRGL_Shutdown();
//AHSRC:base/frgl_menu.c
BTEIFGL_API FRGL_MenuInfo *FRGL_LookupMenu(char *name);
BTEIFGL_API FRGL_MenuInfo *FRGL_GetMenu(char *name);
BTEIFGL_API FRGL_MenuItem *FRGL_GetMenuItem(FRGL_MenuInfo *menu, int idx, char *name);
BTEIFGL_API int FRGL_MenuActiveP(void);
BTEIFGL_API int FRGL_SetMenuActive(char *name);
BTEIFGL_API int FRGL_DrawMenu(void);
BTEIFGL_API int FRGL_MenuHandleKeys(u16 *keys);
//AHSRC:base/frgl_shaddll.c
int FRGL_NoCompressedTexturesP();
int FRGL_NoBC7P();
int FRGL_IsRASWP();
int FRGL_InitOpenGlDLL();
void *frwglGetProcAddress(char *name);
HGLRC frwglCreateContext(HDC hdc);
BOOL frwglDeleteContext(HGLRC hglrc);
HGLRC frwglGetCurrentContext(void);
HDC frwglGetCurrentDC(void);
BOOL frwglMakeCurrent(HDC hdc, HGLRC hglrc);
BOOL frwglShareLists(HGLRC a0, HGLRC a1);
int frwglChoosePixelFormat(HDC hdc, CONST PIXELFORMATDESCRIPTOR *ppfd);
int frwglGetPixelFormat(HDC hdc);
BOOL frwglSetPixelFormat(HDC hdc, INT iPixelFormat, const PIXELFORMATDESCRIPTOR *ppfd);
int frwglDescribePixelFormat(HDC hdc, INT iPixelFormat, UINT nBytes, LPPIXELFORMATDESCRIPTOR ppfd);
BOOL frwglSwapBuffers(HDC hdc);
void *frwglGetProcAddress(char *name);
int FRGL_InitOpenGlFuncs();
BTEIFGL_API void frglAlphaFunc(GLenum func, GLclampf ref);
BTEIFGL_API void frglBindTexture(GLenum target, GLuint texture);
BTEIFGL_API void frglBlendFunc(GLenum sfactor, GLenum dfactor);
BTEIFGL_API void frglClear(GLbitfield mask);
BTEIFGL_API void frglClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
//BTEIFGL_API void frglColor4f(//		GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
BTEIFGL_API void frglColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
BTEIFGL_API void frglColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
BTEIFGL_API void frglCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
BTEIFGL_API void frglCullFace(GLenum mode);
BTEIFGL_API void frglDeleteTextures(GLsizei n, const GLuint *textures);
BTEIFGL_API void frglDepthFunc(GLenum func);
BTEIFGL_API void frglDisable(GLenum cap);
BTEIFGL_API void frglDisableClientState(GLenum cap);
BTEIFGL_API void frglDrawArrays(GLenum mode, GLint first, GLsizei count);
BTEIFGL_API void frglDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
BTEIFGL_API void frglEnable(GLenum cap);
BTEIFGL_API void frglEnableClientState(GLenum cap);
BTEIFGL_API void frglFinish(void);
BTEIFGL_API void frglFlush(void);
BTEIFGL_API void frglFrontFace(GLenum mode);
BTEIFGL_API void frglGenTextures(GLsizei n, GLuint *textures);
BTEIFGL_API GLenum frglGetError(void);
BTEIFGL_API void frglGetIntegerv(GLenum pname, GLint *params);
BTEIFGL_API void frglHint(GLenum target, GLenum mode);
BTEIFGL_API GLubyte *frglGetString(GLenum name);
//BTEIFGL_API void frglLoadIdentity(void);
BTEIFGL_API void frglMatrixMode(GLenum mode);
//BTEIFGL_API void frglMultMatrixf(const GLfloat *m);
BTEIFGL_API void frglNormalPointer(GLenum type, GLsizei stride, const GLvoid *ptr);
BTEIFGL_API void frglPolygonMode(GLenum face, GLenum mode);
BTEIFGL_API void frglReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
BTEIFGL_API void frglShadeModel(GLenum mode);
BTEIFGL_API void frglTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
BTEIFGL_API void frglTexEnvf(GLenum target, GLenum pname, GLfloat param);
BTEIFGL_API void frglTexEnvi(GLenum target, GLenum pname, GLint param);
BTEIFGL_API void frglTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
BTEIFGL_API void frglTexParameterf(GLenum target, GLenum pname, GLfloat param);
BTEIFGL_API void frglTexParameteri(GLenum target, GLenum pname, GLint param);
BTEIFGL_API void frglVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
BTEIFGL_API void frglViewport(GLint x, GLint y, GLsizei width, GLsizei height);
//AHSRC:base/frgl_shader.c
void *frglGetProcAddress(char *name);
BTEIFGL_API int FRGL_InitShader();
BTEIFGL_API int FRGL_LookupShaderSource(char *name, int ty);
BTEIFGL_API int FRGL_LoadShaderSource(char *name, int ty);
BTEIFGL_API int FRGL_LookupShader(char *name);
BTEIFGL_API int FRGL_LoadShader(char *name);
BTEIFGL_API int FRGL_UnloadShaders(void);
BTEIFGL_API int FRGL_BindShader(int num);
BTEIFGL_API int FRGL_UnbindShader();
BTEIFGL_API int FRGL_CheckGlExtension(char *str);
BTEIFGL_API int FRGL_GetFreeVideoMemory();
BTEIFGL_API int frglGetUniformLocation(int shader, char *name);
void FRGL_FlushUniformLocationHash(void);
BTEIFGL_API int frglGetUniformLocationF(int shader, char *name);
BTEIFGL_API int FRGL_ErrorStatusUniform(char *name);
BTEIFGL_API int FRGL_CheckForUniform(char *name);
BTEIFGL_API int FRGL_GetUniformLocation(char *name);
BTEIFGL_API int FRGL_Uniform1f(char *name, float x);
BTEIFGL_API int FRGL_Uniform2f(char *name, float x, float y);
BTEIFGL_API int FRGL_Uniform3f(char *name, float x, float y, float z);
BTEIFGL_API int FRGL_Uniform4f(char *name, float x, float y, float z, float w);
BTEIFGL_API int FRGL_Uniform1i(char *name, int x);
BTEIFGL_API int FRGL_Uniform2i(char *name, int x, int y);
BTEIFGL_API int FRGL_Uniform3i(char *name, int x, int y, int z);
BTEIFGL_API int FRGL_Uniform4i(char *name, int x, int y, int z, int w);
BTEIFGL_API int FRGL_Uniform1fv(char *name, int cnt, float *pf);
BTEIFGL_API int FRGL_Uniform2fv(char *name, int cnt, float *pf);
BTEIFGL_API int FRGL_Uniform3fv(char *name, int cnt, float *pf);
BTEIFGL_API int FRGL_Uniform4fv(char *name, int cnt, float *pf);
BTEIFGL_API int FRGL_UniformMatrix4fv(char *name, int cnt, float *pf);
BTEIFGL_API void frglUniform1f(int var, float x);
BTEIFGL_API void frglUniform2f(int var, float x, float y);
BTEIFGL_API void frglUniform3f(int var, float x, float y, float z);
BTEIFGL_API void frglUniform4f(int var, float x, float y, float z, float w);
BTEIFGL_API void frglUniform1i(int var, int x);
BTEIFGL_API void frglUniform2i(int var, int x, int y);
BTEIFGL_API void frglUniform3i(int var, int x, int y, int z);
BTEIFGL_API void frglUniform4i(int var, int x, int y, int z, int w);
BTEIFGL_API void frglUniform1fv(int var, int cnt, float *pf);
BTEIFGL_API void frglUniform2fv(int var, int cnt, float *pf);
BTEIFGL_API void frglUniform3fv(int var, int cnt, float *pf);
BTEIFGL_API void frglUniform4fv(int var, int cnt, float *pf);
BTEIFGL_API void frglUniformMatrix2fv(int var, int cnt, float *pf);
BTEIFGL_API void frglUniformMatrix3fv(int var, int cnt, float *pf);
BTEIFGL_API void frglUniformMatrix4fv(int var, int cnt, float *pf);
BTEIFGL_API int frglVertexAttrib1f(int index, float v0);
BTEIFGL_API int frglVertexAttrib2f(int index, float v0, float v1);
BTEIFGL_API int frglVertexAttrib3f(int index, float v0, float v1, float v2);
BTEIFGL_API int frglVertexAttrib4f(int index,float v0, float v1, float v2, float v3);
BTEIFGL_API int frglVertexAttrib1fv(int index, float *v);
BTEIFGL_API int frglVertexAttrib2fv(int index, float *v);
BTEIFGL_API int frglVertexAttrib3fv(int index, float *v);
BTEIFGL_API int frglVertexAttrib4fv(int index, float *v);
BTEIFGL_API int frglGetAttribLocation(int program, char *name);
BTEIFGL_API int FRGL_GetAttribLocation(char *name);
BTEIFGL_API int frglVertexAttribPointer(int index, int size, int type, int normalized, int stride, void *pointer);
BTEIFGL_API int frglEnableVertexAttribArray(int idx);
BTEIFGL_API int frglDisableVertexAttribArray(int idx);
BTEIFGL_API int frglActiveTexture(int idx);
BTEIFGL_API int frglMultiTexCoord1f(int idx, float s);
BTEIFGL_API int frglMultiTexCoord2f(int idx, float s, float t);
BTEIFGL_API int frglMultiTexCoord3f(int idx, float s, float t, float p);
BTEIFGL_API int frglMultiTexCoord4f(int idx, float s, float t, float p, float q);
BTEIFGL_API int frglMultiTexCoord1fv(int idx, float *v);
BTEIFGL_API int frglMultiTexCoord2fv(int idx, float *v);
BTEIFGL_API int frglMultiTexCoord3fv(int idx, float *v);
BTEIFGL_API int frglMultiTexCoord4fv(int idx, float *v);
BTEIFGL_API int frglBeginQuery(int tgt, int id);
BTEIFGL_API int frglEndQuery(int tgt);
BTEIFGL_API int frglGetQueryObjectiv(int id, int pname, int *params);
BTEIFGL_API int frglGetQueryObjectuiv(int id, int pname,unsigned int *params);
BTEIFGL_API int frglGenFramebuffers(int n, int *ids);
BTEIFGL_API int frglGenRenderbuffers(int n, int *ids);
BTEIFGL_API int frglBindFramebuffer(int target, int framebuffer);
BTEIFGL_API int frglBindRenderbuffer(int target, int framebuffer);
BTEIFGL_API int frglRenderbufferStorage(int target,int internalformat, int width, int height);
BTEIFGL_API int frglFramebufferTexture2D(int target, int attachment, int textarget, int texture, int level);
BTEIFGL_API int frglFramebufferRenderbuffer(int target, int attachment, int textarget, int texture);
BTEIFGL_API int frglCheckFramebufferStatus(int target);
BTEIFGL_API int frglDrawBuffers(int n, int *ids);
BTEIFGL_API int frglGenBuffers(int n, int *ids);
BTEIFGL_API int frglDeleteBuffers(int n, int *ids);
BTEIFGL_API int frglBindBuffer(int target, int buffer);
BTEIFGL_API int frglBufferData(int target, int size, const void *data, int usage);
BTEIFGL_API int frglBufferSubData(int target, int offset, int size, const void *data);
BTEIFGL_API void *frglMapBuffer(int target, int access);
BTEIFGL_API bool frglUnmapBuffer(int target);
BTEIFGL_API int frglCompressedTexImage2D(int		target, int		level, int		internalformat, int		width, int		height, int		border, int		imageSize, const void *data);
//AHSRC:base/frgl_texture.c
BTEIFGL_API int Tex_GetModeinfo(int *min, int *mag);
void tex_lock();
void tex_unlock();
BTEIFGL_API int Tex_Init2();
BTEIFGL_API int Tex_AllocTexnum();
BTEIFGL_API int Tex_FreeTexnum(int n);
BTEIFGL_API int Tex_MarkTexnum(int n);
BTEIFGL_API int Tex_DeleteTexture(int n);
BTEIFGL_API int Tex_FindFragment(int xs, int ys, int *x, int *y, int *z);
BTEIFGL_API int Tex_LockFragment(int x, int y, int z, int xs, int ys);
BTEIFGL_API int Tex_AllocFragment(int xs, int ys, int *x, int *y, int *z);
BTEIFGL_API int Tex_LoadTextureFragment(int xs, int ys, byte *buf,float *stmin, float *stmax);
BTEIFGL_API int Tex_Resample(byte *src, int iw, int ih, byte *dst, int ow, int oh);
BTEIFGL_API int Tex_ResampleMono(byte *src, int iw, int ih,byte *dst, int ow, int oh);
BTEIFGL_API int Tex_PadResample(int *src, int iw, int ih,int *dst, int ow, int oh);
BTEIFGL_API int Tex_HalfSample(byte *src, int w, int h);
BTEIFGL_API int Tex_HalfSample2(byte *src, int w, int h);
BTEIFGL_API int Tex_HalfSampleQ32(byte *src, int w, int h);
BTEIFGL_API int Tex_HalfSampleRGB9E5(byte *src, int w, int h);
BTEIFGL_API int Tex_HalfSampleRG11B10(byte *src, int w, int h);
BTEIFGL_API int Tex_HalfSampleClrs(byte *src, int w, int h, int clrs);
BTEIFGL_API double Tex_Sinc(double x);
BTEIFGL_API double Tex_Lanczos(double x, double a);
BTEIFGL_API int Tex_SincPolateRGBA8(byte *src, int w, int h,float x, float y, float *rgba, int n);
BTEIFGL_API int Tex_ResampleSinc(byte *src, int iw, int ih,byte *dst, int ow, int oh);
BTEIFGL_API int Tex_SplinePolateRGBA8(byte *src, int w, int h,float x, float y, float *rgba);
BTEIFGL_API int Tex_ResampleSpline(byte *src, int iw, int ih,byte *dst, int ow, int oh);
BTEIFGL_API int Tex_FilterBlur2(byte *src, byte *dst, int w, int h);
BTEIFGL_API int Tex_FilterHBlur(byte *src, byte *dst,int w, int h, float bf);
BTEIFGL_API int Tex_FilterVBlur(byte *src, byte *dst,int w, int h, float bf);
BTEIFGL_API int Tex_FilterBlurHV(byte *src, byte *dst,int w, int h, float xf, float yf);
BTEIFGL_API int Tex_FilterBlur(byte *src, byte *dst,int w, int h, int rad);
BTEIFGL_API int Tex_ResampleSpline2(byte *src, int iw, int ih,byte *dst, int ow, int oh);
BTEIFGL_API int Tex_SetUseColorFormat(int clrfmt);
BTEIFGL_API int Tex_GetLastColorFormat();
BTEIFGL_API int Tex_LoadTexture(int w, int h, byte *buf, int calcmip);
BTEIFGL_API int Tex_LoadTexture(int w, int h, byte *buf, int calcmip);
BTEIFGL_API int Tex_LoadTexture2(int w, int h, byte *buf,int mip, int rnum, int enc);
BTEIFGL_API int Tex_LoadTexture3A(int *wp, int *hp, byte *buf,int num, int clrs);
BTEIFGL_API int Tex_LoadTexture3B(int *wp, int *hp, byte *buf,int num, int clrs, int mip);
BTEIFGL_API int Tex_LoadTexture3(int *wp, int *hp, byte *buf, int num);
BTEIFGL_API int Tex_LoadTexture3C(int *wp, int *hp, byte *buf, int num, int clrs, int mip);
BTEIFGL_API int Tex_LoadTextureMono(int w, int h, byte *buf);
BTEIFGL_API byte *Img_LoadTGA(VFILE *fd, int *w, int *h);
BTEIFGL_API int Img_StoreTGA(VFILE *fd, byte *buf, int w, int h);
BTEIFGL_API byte *Img_LoadBMP(VFILE *fd, int *w, int *h, int *rtxc);
BTEIFGL_API byte *Img_LoadBMP(VFILE *fd, int *w, int *h, int *rtxc);
BTEIFGL_API byte *Img_FlattenDIB(byte *img, int w, int h);
BTEIFGL_API byte *Img_UnFlattenDIB(byte *img, int *w, int *h);
BTEIFGL_API byte *Img_FlattenBPX(byte *img, int w, int h, int clrs, int *rsz);
BTEIFGL_API byte *Img_LoadBPX(VFILE *fd, int *w, int *h, int *rtxc);
BTEIFGL_API byte *Img_TryLoadTextureBPX(char *name, int *w, int *h, int *rtxc);
BTEIFGL_API int Img_SaveTextureCacheBPX(char *name, int w, int h, byte *buf, int calcmip);
BTEIFGL_API void Img_ConvRGB8E8ToRGB9E5(byte *ibuf, byte *obuf, int xs, int ys);
BTEIFGL_API byte *Img_LoadPNG(VFILE *fd, int *w, int *h, int *rtxc);
BTEIFGL_API byte *Img_LoadJPG(VFILE *fd, int *w, int *h, int *rtxc);
BTEIFGL_API byte *Img_LoadHDR(VFILE *fd, int *w, int *h, int *rtxc);
BTEIFGL_API int Tex_LoadFile(char *name, int *w, int *h);
BTEIFGL_API byte *Tex_GetBuffer(int n);
BTEIFGL_API void Tex_FreeRaw(void *p);
BTEIFGL_API byte *Tex_LoadFileRaw(char *name, int *w, int *h);
BTEIFGL_API byte *Tex_LoadFile2Raw(char *name, int *w, int *h);
BTEIFGL_API byte *Tex_LoadFile2AlphaRaw(char *name, int *w, int *h);
BTEIFGL_API byte *Tex_LoadFileExtAlphaRaw(char *name, char *ext, int *w, int *h);
BTEIFGL_API byte *Tex_LoadFileExtBaseSuffixRaw(char *name, char *ext, char *base, char *suff, int *w, int *h);
BTEIFGL_API byte *Tex_LoadFileJpegAlphaRaw(char *name, int *w, int *h);
BTEIFGL_API int Tex_LoadFileExtAlpha(char *name, char *ext, int *w, int *h);
BTEIFGL_API int Tex_LoadFileJpegAlpha(char *name, int *w, int *h);
BTEIFGL_API int Tex_LoadFileExtBaseSuffix(char *name, char *ext, char *base, char *suff, int *w, int *h);
BTEIFGL_API int Tex_LoadFileBaseSuffix(char *name, char *base, char *suff, int *w, int *h);
BTEIFGL_API byte *Tex_LoadImageBufferRaw(char *name, char *type,byte *imgbuf, int imgsz, int *rw, int *rh);
BTEIFGL_API int Tex_StoreFile(char *name, byte *buf, int w, int h);
BTEIFGL_API int Tex_Screenshot_Clipboard();
BTEIFGL_API int Tex_Screenshot(char *name);
BTEIFGL_API int Tex_Screenshot2(char *name);
BTEIFGL_API int Tex_DoScreenshot();
BTEIFGL_API int Tex_DoScreenshotFrame();
BTEIFGL_API int Tex_ScreenshotTexture();
BTEIFGL_API int Tex_ScreenshotDepthTexture();
BTEIFGL_API int Tex_FillTextureScreenshot(int texnum);
BTEIFGL_API int Tex_FillTextureScreenshotDepth(int texnum);
BTEIFGL_API int Tex_EmptyTexture(int xs, int ys);
BTEIFGL_API int Tex_EmptyTextureRGB(int xs, int ys);
BTEIFGL_API int Tex_ScreenshotBuffer(byte *buf,int xo, int yo, int xs, int ys);
BTEIFGL_API int Tex_ScreenshotBufferYUV(byte *obuf,int xo, int yo, int xs, int ys);
//AHSRC:base/frgl_util.c
BTEIFGL_API void frgl_printf_null(char *str, ...);
BTEIFGL_API char *frgl_strdup(char *str);
BTEIFGL_API void *frgl_ralloc(int sz);
BTEIFGL_API char *frgl_rstrdup(char *str);
BTEIFGL_API char *frgl_rsprint(char *str, ...);
BTEIFGL_API char *frgl_rsprints(char *buf, char *str, ...);
BTEIFGL_API char **frgl_rsplit(char *s);
BTEIFGL_API char *frgl_rsgets(char *buf, int lim, char *str);
BTEIFGL_API char *frgl_rgets(char **str);
BTEIFGL_API char *frgl_rgettoken(char **str);
BTEIFGL_API char *frgl_rlltoa(s64 v);
BTEIFGL_API char *frgl_rdtoa(double v);
BTEIFGL_API char *frgl_rdtoa1p(double v);
BTEIFGL_API char *frgl_rdtoa2p(double v);
BTEIFGL_API char *frgl_rdtoa3p(double v);
BTEIFGL_API char *frgl_rdtoa4p(double v);
BTEIFGL_API s64 frgl_ratoi(char *str);
BTEIFGL_API int frgl_stricmp(char *s1, char *s2);
//AHSRC:base/frgl_texmat.c
int frgl_texmat_init();
void FRGL_TexMat_FlushMatShaders(void);
BTEIFGL_API void FRGL_TexMat_FlushShaders(void);
int frgl_texmat_hashname(char *name);
BTEIFGL_API FRGL_TextureMaterial *FRGL_TexMat_LookupInfo(char *name);
BTEIFGL_API FRGL_TextureMaterial *FRGL_TexMat_GetInfo(char *name);
BTEIFGL_API int FRGL_TexMat_CheckLoadInfo(FRGL_TextureMaterial *mat, char *name);
BTEIFGL_API int FRGL_TexMat_GetLoadIndex(char *name);
BTEIFGL_API int FRGL_TexMat_BindBasic(int idx);
BTEIFGL_API int FRGL_TexMat_CheckTeardown(FRGL_TextureMaterial *mat);
BTEIFGL_API int FRGL_TexMat_BindMaterial(int idx);
BTEIFGL_API void FRGL_TexMat_SetExposure(float expose);
BTEIFGL_API int FRGL_TexMat_GetLoadSprite(char *name);
BTEIFGL_API int FRGL_TexMat_BoundSpriteFlipP(void);
BTEIFGL_API int FRGL_TexMat_BoundSpriteIsSideP(void);
BTEIFGL_API int FRGL_TexMat_BindSprite(int idx, int rang);
//AHSRC:base/math_m3.c
BTEIFGL_API void Mat3F_Copy(float *a, float *b);
BTEIFGL_API void Mat3F_Transpose(float *a, float *b);
BTEIFGL_API void Mat3F_Identity(float *a);
BTEIFGL_API void Mat3F_Mat3Mult(float *a, float *b, float *c);
BTEIFGL_API void Mat3F_Mat3MultT(float *a, float *b, float *c);
BTEIFGL_API void Mat3F_Mat3TMult(float *a, float *b, float *c);
BTEIFGL_API void Mat3F_TransformVector(float *a, float *xform, float *c);
BTEIFGL_API void Mat3F_Inverse(float *a, float *b);
BTEIFGL_API void Mat3F_AxisTo3Matrix(float *a, float th, float *b);
BTEIFGL_API void Mat3F_Filter3Matrix(float *a, float *b);
BTEIFGL_API void Mat3F_Rotate3Matrix(float *a, float *v, float th, float *b);
BTEIFGL_API int Mat3F_ArcPolate(float *v0, float *v1, float *v2, float t,float *rnv);
BTEIFGL_API void Mat3F_LinePolate(float *v0, float *v1, float *v2, float t,float *n);
BTEIFGL_API void Mat3F_Interpolate(float *m0, float *m1, float *m2, float t);
//AHSRC:base/math_m4.c
BTEIFGL_API void Mat4F_Identity(float *a);
BTEIFGL_API void Mat4F_Copy(float *a, float *b);
BTEIFGL_API int Mat4F_Equal(float *a, float *b);
BTEIFGL_API void Mat4F_MatMult(float *a, float *b, float *c);
BTEIFGL_API void Mat4F_MatMultT(float *a, float *b, float *c);
BTEIFGL_API void Mat4F_Transpose(float *a, float *b);
BTEIFGL_API void Mat4F_Inverse(float *a, float *b);
BTEIFGL_API void Mat4F_Inverse(float *a, float *b);
BTEIFGL_API void Mat4F_InverseTransform(float *a, float *b);
BTEIFGL_API void Mat4F_InterpolateTransform(float *m0, float *m1, float *m2, float t);
BTEIFGL_API void Mat4F_TransformVector(float *dir, float *xform, float *v);
BTEIFGL_API void Mat4F_TransformVectorT(float *dir, float *xform, float *v);
BTEIFGL_API void Mat4F_TransformNormal(float *dir, float *xform, float *norm);
BTEIFGL_API void Mat4F_TransformNormalT(float *dir, float *xform, float *norm);
BTEIFGL_API void Mat4F_TransformNormalN(float *dir, float *xform, float *norm);
BTEIFGL_API void Mat4F_TransformNormalNT(float *dir, float *xform, float *norm);
BTEIFGL_API void Mat4F_TransformPoint(float *point, float *xform, float *org);
BTEIFGL_API void Mat4F_TransformPointT(float *point, float *xform, float *org);
BTEIFGL_API void Mat4F_TransformPointN(float *point, float *xform, float *org);
BTEIFGL_API void Mat4F_TransformPointNT(float *point, float *xform, float *org);
BTEIFGL_API void Mat4F_TransformPointLocal(float *point, float *xform, float *org);
BTEIFGL_API void Mat4F_TransformPointLocalT(float *point, float *xform, float *org);
BTEIFGL_API void Mat4F_AxisTo4Matrix(float *a, float th, float *b);
BTEIFGL_API void Mat4F_AxisTo4MatrixT(float *a, float th, float *b);
BTEIFGL_API void Mat4F_Filter4Matrix(float *a, float *b);
BTEIFGL_API void Mat4F_Rotate4Matrix(float *a, float *v, float th, float *b);
BTEIFGL_API void Mat4F_Set4MatrixRotXY(float *a, float th);
BTEIFGL_API void Mat4F_Set4MatrixRotXZ(float *a, float th);
BTEIFGL_API void Mat4F_Set4MatrixRotYZ(float *a, float th);
BTEIFGL_API void Mat4F_Set4MatrixRotXW(float *a, float th);
BTEIFGL_API void Mat4F_Set4MatrixRotYW(float *a, float th);
BTEIFGL_API void Mat4F_Set4MatrixRotZW(float *a, float th);
BTEIFGL_API void Mat4F_Rotate4MatrixXY(float *a, float th, float *b);
BTEIFGL_API void Mat4F_Rotate4MatrixXZ(float *a, float th, float *b);
BTEIFGL_API void Mat4F_Rotate4MatrixYZ(float *a, float th, float *b);
BTEIFGL_API void Mat4F_Rotate4MatrixXW(float *a, float th, float *b);
BTEIFGL_API void Mat4F_Rotate4MatrixYW(float *a, float th, float *b);
BTEIFGL_API void Mat4F_Rotate4MatrixZW(float *a, float th, float *b);
BTEIFGL_API void Mat4F_Rotate4MatrixAngles(float *a, float *ang, float *b);
void Mat4F_SetupFrustum(float *mat,float left, float right, float bottom, float top, float nearval, float farval);
void Mat4F_SetupOrtho(float *mat,float left, float right, float bottom, float top, float nearval, float farval);
//AHSRC:base/gpio_rdtsc.c
void BGBRPI_Sched_DoSomeNops();
void BGBRPI_Sched_DelayLoop(int usec);
BTEIFGL_API void BGBRPI_Sched_Delay(int usec);
BTEIFGL_API void GPIO_InitRdtsc();
s64 GPIO_CyclesPerSecond();
s64 GPIO_Rdtsc();
BTEIFGL_API double GPIO_GetDeltaRdtsc(s64 *rt0);
BTEIFGL_API s64 GPIO_GetTimeUS(void);
BTEIFGL_API double GPIO_GetDeltaTimeUS(s64 *rt0);
BTEIFGL_API double GPIO_GetTimeRtcUS();
BTEIFGL_API double GPIO_GetDeltaTimeRtcUS(s64 *rt0);
BTEIFGL_API s64 GPIO_GetTimeRtcUS2(void);
//AHSRC:base/gpio_dummy_w32.c
s64 GPIO_WavGetTimeUS_FakeUS(void);
BTEIFGL_API void GPIO_DummySetTimeFakeUS(s64 us);
void GPIO_DummyInitPin(int pin);
void GPIO_DummyClosePin(int pin);
void GPIO_DummyUpdatePins();
void GPIO_DummyUpdatePinI(int pin, s64 dt);
BTEIFGL_API void GPIO_SetPinInput(int pin);
BTEIFGL_API void GPIO_SetPinOutput(int pin);
BTEIFGL_API void GPIO_SetPinMode(int pin, int mode);
BTEIFGL_API void GPIO_SetPinModeAlt(int pin, int mode);
BTEIFGL_API void GPIO_InputPinSetValue(int pin, int val);
BTEIFGL_API int GPIO_PinGetValue(int pin);
BTEIFGL_API void GPIO_PinSetValue(int pin, int val);
BTEIFGL_API int GPIO_PinGetOutMask(void);
BTEIFGL_API int GPIO_PinSetOutMask(int bits);
BTEIFGL_API int GPIO_PinSetOutMask8(int bits);
BTEIFGL_API int GPIO_PinSetOutMask8A(int bits);
BTEIFGL_API int GPIO_PinSetOutMask8B(int bits);
BTEIFGL_API int GPIO_PinGetInBits(void);
BTEIFGL_API void GPIO_Init();
BTEIFGL_API void GPIO_DeInit();
BTEIFGL_API void GPIO_I2C_Init();
BTEIFGL_API int GPIO_I2C_PollDone();
BTEIFGL_API void GPIO_I2C_WaitDone();
BTEIFGL_API void GPIO_I2C_CmdReadDevice(int dev, int len,byte *data);
BTEIFGL_API void GPIO_I2C_CmdWriteDevice(int dev, int len,byte *data);
//AHSRC:base/net_btemsg.c
BTEIFGL_API int BTEIFGL_NET_AddrEqual(VADDR *a, VADDR *b);
BTEIFGL_API BTEIFGL_PeerInfo *BTEIFGL_NET_LookupPeerAddr(VADDR *addr);
BTEIFGL_API BTEIFGL_PeerInfo *BTEIFGL_NET_LookupPeerGuid(VGUID *nodeid);
BTEIFGL_API int BTEIFGL_NET_RegisterPeer(VADDR *addr, VGUID *id, int nodefl);
BTEIFGL_API int BTEIFGL_NET_Init(void);
char *frgl_twocc2str(u16 tcc);
char *frgl_fourcc2str(u32 fcc);
int FRGL_ParseU16(byte **rcs);
u32 FRGL_ParseU24(byte **rcs);
u32 FRGL_ParseU32(byte **rcs);
void FRGL_ParseGUID(byte **rcs, VGUID *rval);
void FRGL_EmitU16(byte **rct, u16 val);
void FRGL_EmitU24(byte **rct, u32 val);
void FRGL_EmitU32(byte **rct, u32 val);
void FRGL_EmitGUID(byte **rct, VGUID guid);
int BTEIFGL_NET_ProcessSubMsgTWOCC(byte *msg, int sz, u32 fcc, VADDR *addr);
int BTEIFGL_NET_ProcessSubMsgFOURCC(byte *msg, int sz, u32 fcc, VADDR *addr);
int BTEIFGL_NET_CheckSync(byte *cs, byte *cse);
int BTEIFGL_NET_ProcessMsg(byte *msg, int sz, VADDR *addr);
BTEIFGL_API int BTEIFGL_NET_Update(double dt);
BTEIFGL_API int BTEIFGL_NET_SetImpulse(u32 imp1, u32 imp2);
BTEIFGL_API u32 BTEIFGL_NET_GetPinsMask(void);
BTEIFGL_API u32 BTEIFGL_NET_GetPinsActive(void);
BTEIFGL_API int BTEIFGL_NET_GetPinsTarget(int pin);
BTEIFGL_API u32 BTEIFGL_NET_GetPinsInMask(void);
BTEIFGL_API u32 BTEIFGL_NET_GetPinsOutMask(void);
BTEIFGL_API int BTEIFGL_NET_SetupSync(byte *cs);
BTEIFGL_API int BTEIFGL_NET_SendProbe(u32 ipv4);
BTEIFGL_API int BTEIFGL_NET_SendSimpleFcc(VADDR *addr,byte *data, int szData, u32 fcc);
//AHSRC:base/deflate.c
void PDZ2_WriteBit(int i);
void PDZ2_Write2Bits(int i);
void PDZ2_Write3Bits(int i);
void PDZ2_Write4Bits(int i);
void PDZ2_Write5Bits(int i);
void PDZ2_WriteNBits(int i, int n);
void PDZ2_FlushBits();
int PDZ2_BalanceTree_r(short *nodes, short *nlen, int root, int h, int ml);
void PDZ2_CalcLengths_r(short *nodes, byte *cl, int root, int h);
int PDZ2_BuildLengths(int *stat, int nc, byte *cl, int ml);
int PDZ2_BuildLengthsAdjust(int *stat, int nc, byte *cl, int ml);
void PDZ2_UpdateWindowByte(byte *s);
void PDZ2_UpdateWindowString(byte *s, int l);
int PDZ2_LookupString(byte *cs, byte *ce, int *rl, int *rd);
int PDZ2_LZCompressBuffer(byte *ibuf, byte *obuf, byte *mbuf, int sz);
int PDZ2_LZCompressBufferRLE(byte *ibuf, byte *obuf, byte *mbuf, int sz);
void PDZ2_StatLZRun(byte *cs, int *lstat, int *dstat);
void PDZ2_StatLZBuffer(byte *tbuf, byte *mbuf, int n,int *lstat, int *dstat);
void PDZ2_StatLengths(byte *cl, int nc, int *stat);
void PDZ2_EncodeSymbol(int v);
void PDZ2_EncodeLengths(byte *cl, int nc);
void PDZ2_EncodeLZRun(byte *cs);
void PDZ2_EncodeLZBuffer(byte *tbuf, byte *mbuf, int n);
int PDZ2_EncodeBlockStatic(byte *ibuf, int isz, int last);
int PDZ2_EncodeBlock(byte *ibuf, int isz, int last);
int PDZ2_EncodeStream_I(byte *ibuf, byte *obuf, int isz, int osz);
int PDZ2_EncodeStream(byte *ibuf, byte *obuf, int isz, int osz);
int PDZ2_EncodeStream64(byte *ibuf, byte *obuf, int isz, int osz);
int PDZ2_EncodeStreamLvl(byte *ibuf, byte *obuf, int isz, int osz, int l);
int PDZ2_EncodeStream64Lvl(byte *ibuf, byte *obuf,int isz, int osz, int lvl);
int PDZ2_EncodeStreamLvlZl(byte *ibuf, byte *obuf,int isz, int osz, int lvl);
int PDZ2_EncodeStream64LvlZl(byte *ibuf, byte *obuf,int isz, int osz, int lvl);
int PDZ2_EncodeStream64LvlZlTest(byte *ibuf, byte *obuf,int isz, int osz, int lvl);
//AHSRC:base/inflate.c
int PDUNZ_ReadByteBasic();
int PDUNZ_ReadByteEscape();
int PDUNZ_ReadBit();
int PDUNZ_Read2Bits();
int PDUNZ_Read3Bits();
int PDUNZ_Read4Bits();
int PDUNZ_Read5Bits();
int PDUNZ_ReadNBits(int n);
void PDUNZ_SkipNBits(int n);
int PDUNZ_PeekWord();
void PDUNZ_AlignByte();
int PDUNZ_ReadAlignedByte();
int PDUNZ_ReadAlignedWord();
int PDUNZ_TransposeByte(int v);
int PDUNZ_TransposeWord(int v);
int PDUNZ_SetupTable(byte *cl, int ncl,u16 *tc, u16 *tm, byte *tl, u16 *ti, u16 *tn);
int PDUNZ_SetupStatic();
int PDUNZ_DecodeSymbol();
int PDUNZ_DecodeDistance();
int PDUNZ_DecodeCodeLengths(byte *cl, int ncl);
int PDUNZ_DecodeHeader();
int PDUNZ_DecodeHeaderBTLZH();
int PDUNZ_DecodeRun(int sym);
int PDUNZ_DecodeBlockData();
int PDUNZ_DecodeBlock();
BTEIFGL_API int PDUNZ_DecodeStream(byte *ibuf, byte *obuf, int isz, int osz);
BTEIFGL_API int PDUNZ_DecodeStreamSz(byte *ibuf, byte *obuf, int isz, int osz, int *rosz, int flags);
BTEIFGL_API int PDUNZ_DecodeStreamSzZl(byte *ibuf, byte *obuf, int isz, int osz, int *rosz, int flags);
BTEIFGL_API int PDUNZ_DecodeStreamZl(byte *ibuf, byte *obuf, int isz, int osz);
//AHSRC:base/bufpng.c
u32 BGBBTJ_BufPNG_DataAdler32(void *buf, int sz, u32 lcrc);
void BGBBTJ_BufPNG_DataAdler32_Step16(byte *buf, u32 *rs1, u32 *rs2);
u32 BGBBTJ_BufPNG_DataAdler32(void *buf, int sz, u32 lcrc);
u32 BGBBTJ_BufPNG_CRC32(void *buf, int sz, u32 lcrc);
char *BGBBTJ_BufPNG_Fourcc2String(u32 fcc);
int BGBBTJ_BufPNG_Paeth(int a, int b, int c);
int BGBBTJ_BufPNG_Paeth(int a, int b, int c);
u32 BGBBTJ_BufPNG_ReadInt32BE(byte **rct);
u32 BGBBTJ_BufPNG_ReadFourcc(byte **rct);
BTEIFGL_API int BGBBTJ_BufPNG_DecodeOBuf(byte *csbuf, int cssz, byte *obuf, int *w, int *h);
void BGBBTJ_BufPNG_DecodeScan24_0(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan32_0(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan24_1(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan32_1(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan24_2(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan32_2(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan24_3(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan32_3(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan24_4(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan32_4(byte *s, byte *sca, byte *scb, int xs);
bool BGBBTJ_BufPNG_DecodeScan(byte *s, byte *sca, byte *scb, int xs, int ssz, int fm);
BTEIFGL_API byte *BGBBTJ_BufPNG_Decode(byte *csbuf, int cssz, int *w, int *h);
void BGBBTJ_BufPNG_WriteInt32LE(byte **rct, u32 v);
void BGBBTJ_BufPNG_WriteInt32BE(byte **rct, u32 v);
void BGBBTJ_BufPNG_WriteFourcc(byte **rct, u32 v);
void BGBBTJ_BufPNG_WriteChunk(byte **rct, u32 fcc, byte *buf, int len);
BTEIFGL_API int BGBBTJ_BufPNG_Encode(byte *ctbuf, int ctsz, byte *buf, int xs, int ys);
BTEIFGL_API int BGBBTJ_BufPNG_EncodeFast(byte *ctbuf, int ctsz, byte *buf, int xs, int ys);
//AHSRC:base/btpk_image.c
u16 bkpak_swdu16(btpk_u16 v);
u32 bkpak_swdu32(btpk_u32 v);
u64 bkpak_swdu64(btpk_u64 v);
btpk_u16 bkpak_sweu16(u16 v);
btpk_u32 bkpak_sweu32(u32 v);
btpk_u64 bkpak_sweu64(u64 v);
BTEIFGL_API BtPak0_Image *BtPak_LookupImage(char *name);
BTEIFGL_API BtPak0_Image *BtPak_LoadImageRO(char *name);
BTEIFGL_API BtPak0_Image *BtPak_LoadImageRW(char *name);
BTEIFGL_API BtPak0_Image *BtPak_CreateImageRW(char *name);
BTEIFGL_API int BtPak_ImageCloseImage(BtPak0_Image *img);
BtPak0_LoadChunk *BtPak_ImageLookupChunk(BtPak0_Image *img, int idx);
BtPak0_LoadChunk *BtPak_ImageLoadChunk(BtPak0_Image *img, int idx);
int BtPak_ImageFindFreeBlocks(BtPak0_Image *img, int nblk);
int BtPak_ImageAllocBlocks(BtPak0_Image *img, int nblk);
int BtPak_ImageFreeBlocks(BtPak0_Image *img, int ix);
int BtPak_ImageAllocChunkId(BtPak0_Image *img);
BtPak0_LoadChunk *BtPak_ImageNewLoadChunk(BtPak0_Image *img, int sz);
int BtPak_ImageResizeLoadChunk(BtPak0_Image *img, BtPak0_LoadChunk *chk, int newsz);
int BtPak_ImageCommitLoadChunk(BtPak0_Image *img, BtPak0_LoadChunk *chk);
int BtPak_ImageCommitChunks(BtPak0_Image *img);
BtPak0_LoadChunk *BtPak_ImageFindMultiChunk(BtPak0_Image *img, int ctid, int sz);
int BtPak_ImageFindFreeMultiChunkSpace(BtPak0_Image *img, BtPak0_LoadChunk *chk, int nblk);
int BtPak_ImageAllocMultiChunkSpace(BtPak0_Image *img, BtPak0_LoadChunk *chk, int isz);
int BtPak_ImageFreeMultiChunkSpace(BtPak0_Image *img, BtPak0_LoadChunk *chk, int ix);
char *BtPak_ImageGetNameOvf(BtPak0_Image *img, byte *nbuf);
int BtPak_ImageLookupDirName(BtPak0_Image *img,int sidx, char *name);
int BtPak_ImageAllocDirEnt(BtPak0_Image *img);
int BtPak_ImageGetDirName(BtPak0_Image *img,int didx, int sidx, char *name);
int BtPak_ImageLookupDirPath(BtPak0_Image *img, char *path);
int BtPak_ImageGetDirPath(BtPak0_Image *img, char *path);
BtPak0_DirEnt *BtPak_ImageGetDirent(BtPak0_Image *img, int id);
BTEIFGL_API int BtPak_ImageLoadFile(BtPak0_Image *img, char *path,byte **rbuf, int *rsz);
int BtPak_IsAlphaId(int ch);
int BtPak_ImageCalcPathCtId(BtPak0_Image *img, char *path);
char *BtPak_ImageCtId2Str(BtPak0_Image *img, int ctid);
BTEIFGL_API int BtPak_ImageStoreFile(BtPak0_Image *img, char *path,byte *ibuf, int isz);
BTEIFGL_API int BtPak_ImageCommit(BtPak0_Image *img);
BTEIFGL_API BtPak0_OpenFile *BtPak_ImageFileOpenRead(BtPak0_Image *img, char *path);
BTEIFGL_API BtPak0_OpenFile *BtPak_ImageFileOpen(BtPak0_Image *img, char *path, char *mode);
BTEIFGL_API int BtPak_FileClose(BtPak0_OpenFile *fd);
BTEIFGL_API int BtPak_FileSeek(BtPak0_OpenFile *fd, s64 pos, int rel);
BTEIFGL_API s64 BtPak_FileTell(BtPak0_OpenFile *fd);
BTEIFGL_API int BtPak_FileRead(void *buf, int sz1, int sz2, BtPak0_OpenFile *fd);
BTEIFGL_API int BtPak_FileWrite(void *buf, int sz1, int sz2, BtPak0_OpenFile *fd);
//AHSRC:base/snd_adpcm.c
BTEIFGL_API void BGBDT_MsImaAdpcm_DecodeBlockMono(byte *ibuf, s16 *obuf, int len);
BTEIFGL_API void BGBDT_MsImaAdpcm_DecodeBlockMonoAsStereo(byte *ibuf, s16 *obuf, int len);
BTEIFGL_API void BGBDT_MsImaAdpcm_EncodeBlockMono(s16 *ibuf, byte *obuf, int len, int *ridx);
BTEIFGL_API void BGBDT_MsImaAdpcm_DecodeBlockStereo(byte *ibuf, s16 *obuf, int len);
BTEIFGL_API void BGBDT_MsImaAdpcm_EncodeBlockStereo(s16 *ibuf, byte *obuf, int len);
BTEIFGL_API int BGBDT_MsImaAdpcm_MonoSamplesFromBlockSize(int sz);
BTEIFGL_API int BGBDT_MsImaAdpcm_MonoBlockSizeFromSamples(int len);
BTEIFGL_API int BGBDT_MsImaAdpcm_StereoSamplesFromBlockSize(int sz);
BTEIFGL_API int BGBDT_MsImaAdpcm_StereoBlockSizeFromSamples(int len);
BTEIFGL_API int BGBDT_MsImaAdpcm_MonoInitIndex(s16 *ibuf);
void BGBDT_SndBTAC1C_DecodeStereoBlockStereo(byte *ibuf, s16 *obuf, int len);
void BGBDT_SndBTAC1C_DecodeMonoBlockStereo(byte *ibuf, s16 *obuf, int len);
void BGBDT_SndBTAC1C_DecodeJointBlockStereo(byte *ibuf, s16 *obuf, int len);
BTEIFGL_API int BGBDT_SndBTAC1C_EncodeQuantUni(int tgt, int pred, int step, int lsbit);
BTEIFGL_API int BGBDT_SndBTAC1C_EncodeQuantUni3(int uni, int step, int pred, int tgt, int lsbit);
BTEIFGL_API void BGBDT_SndBTAC1C_EncodeBlockStereoJS(s16 *ibuf, byte *obuf, int len, int *ridx);
BTEIFGL_API void BGBDT_SndBTAC1C_DecodeBlockStereo(byte *ibuf, s16 *obuf, int len);
BTEIFGL_API void BGBDT_SndBTAC1C_DecodeBlockStereoLg2(byte *ibuf, s16 *obuf, int lg2);
BTEIFGL_API void BGBDT_SndBTAC1C_DecodeBlockMonoLg2(byte *ibuf, s16 *obuf, int lg2);
BTEIFGL_API void BGBDT_SndBTAC1C_EncodeBlockMonoLg2(s16 *ibuf, byte *obuf, int lg2, int *ridx);
BTEIFGL_API void BGBDT_SndBTAC1C_EncodeBlockStereoLg2(s16 *ibuf, byte *obuf, int lg2, int *ridx);
//AHSRC:base/snd_btac1c1.c
BTEIFGL_API void BGBDT_SndBTAC1C1_DecodeBlockMonoSRI(byte *ibuf, s16 *obuf, int len);
int BGBDT_SndBTAC1C1_QuantSBaseSRI(int diff);
int BGBDT_SndBTAC1C1_QuantSRangeSRI(int diff);
BTEIFGL_API void BGBDT_SndBTAC1C1_EncodeBlockMonoSRI(s16 *ibuf, byte *obuf, int len, int *ridx, int usetag);
BTEIFGL_API void BGBDT_SndBTAC1C_DecodeBlockMono(byte *ibuf, s16 *obuf, int len);
s64 btac1c2_fakesqrt(s64 val);
u32 btac1c2_fakesqrt32(u32 val);
s64 btac1c2_fakesqrt(s64 val);
int BGBDT_SndBTAC1C1_ErrorBlockMonoSamples(s16 *ibuf0, s16 *ibuf1, int len);
int BGBDT_SndBTAC1C1_ErrorBlockStereoSamples(s16 *ibuf0, s16 *ibuf1, int len);
BTEIFGL_API void BGBDT_SndBTAC1C1_EncodeBlockMono(s16 *ibuf, byte *obuf, int len, int *ridx);
BTEIFGL_API void BGBDT_SndBTAC1C1_EncodeBlockMonoLg2(s16 *ibuf, byte *obuf, int lg2, int *ridx);
//AHSRC:base/snd_btac1c2.c
int BGBDT_SndBTAC1C2_PredictSample(int *psamp, int idx, int pfcn, btac1c_idxstate *ridx);
int BGBDT_SndBTAC1C2_PredictSample_Pfn0(int *psamp, int idx,int pfcn, btac1c_idxstate *ridx);
int BGBDT_SndBTAC1C2_PredictSample_Pfn1(int *psamp, int idx,int pfcn, btac1c_idxstate *ridx);
int BGBDT_SndBTAC1C2_PredictSample_Pfn2(int *psamp, int idx,int pfcn, btac1c_idxstate *ridx);
int BGBDT_SndBTAC1C2_PredictSample_Pfn3(int *psamp, int idx,int pfcn, btac1c_idxstate *ridx);
int BGBDT_SndBTAC1C2_PredictSample_Pfn4(int *psamp, int idx,int pfcn, btac1c_idxstate *ridx);
int BGBDT_SndBTAC1C2_PredictSample_Pfn5(int *psamp, int idx,int pfcn, btac1c_idxstate *ridx);
int BGBDT_SndBTAC1C2_PredictSample_Pfn6(int *psamp, int idx,int pfcn, btac1c_idxstate *ridx);
int BGBDT_SndBTAC1C2_PredictSample_Pfn7(int *psamp, int idx,int pfcn, btac1c_idxstate *ridx);
int BGBDT_SndBTAC1C2_PredictSample_Pfn8(int *psamp, int idx,int pfcn, btac1c_idxstate *ridx);
int BGBDT_SndBTAC1C2_PredictSample_Pfn9(int *psamp, int idx,int pfcn, btac1c_idxstate *ridx);
int BGBDT_SndBTAC1C2_PredictSample_Pfn10(int *psamp, int idx,int pfcn, btac1c_idxstate *ridx);
int BGBDT_SndBTAC1C2_PredictSample_Pfn11(int *psamp, int idx,int pfcn, btac1c_idxstate *ridx);
void *BGBDT_SndBTAC1C2_GetPredictFunc(int pfcn);
BTEIFGL_API void btac1c_initstate(btac1c_idxstate *ridx);
BTEIFGL_API void BGBDT_SndBTAC1C2_DecodeBlockMono(byte *ibuf, s16 *obuf, int len, btac1c_idxstate *ridx);
void BGBDT_SndBTAC1C2_DecodeMonoBlockStereo(byte *ibuf, s16 *obuf, int len, btac1c_idxstate *ridx);
void BGBDT_SndBTAC1C2_DecodeJointBlockStereo(byte *ibuf, s16 *obuf, int len, btac1c_idxstate *ridx);
void BGBDT_SndBTAC1C2_DecodeStereoBlockStereoI(byte *ibuf, s16 *obuf, int len, btac1c_idxstate *ridx);
void BGBDT_SndBTAC1C2_DecodeStereoBlockStereo(byte *ibuf, s16 *obuf, int len, btac1c_idxstate *ridx);
BTEIFGL_API void BGBDT_SndBTAC1C2_DecodeBlockStereo(byte *ibuf, s16 *obuf, int len, btac1c_idxstate *ridx);
BTEIFGL_API void BGBDT_SndBTAC1C2_DecodeBlockStereoLg2(byte *ibuf, s16 *obuf, int lg2, btac1c_idxstate *ridx);
BTEIFGL_API void BGBDT_SndBTAC1C2_DecodeBlockMonoLg2(byte *ibuf, s16 *obuf, int lg2, btac1c_idxstate *ridx);
BTEIFGL_API void BGBDT_SndBTAC1C2_DecodePostFilterMono(s16 *obuf, int len);
BTEIFGL_API void BGBDT_SndBTAC1C2_DecodeDePopStereo(s16 *obuf, int blks, int blen);
double btac1c_ssqrt(double v);
BTEIFGL_API int BGBDT_SndBTAC1C2_AutoCorrMono(s16 *ibuf, int len, s16 *firfx);
BTEIFGL_API int BGBDT_SndBTAC1C2_EncodeQuantUni(int tgt, int pred, int step, int lsbit);
BTEIFGL_API int BGBDT_SndBTAC1C2_EncodeQuantUni2(int tgt, int tgt2, int pred, int step, int lsbit);
BTEIFGL_API int BGBDT_SndBTAC1C2_EncodeQuantUni3(int uni, int step, int pred, int tgt, int tgt2, int lsbit);
void BGBDT_SndBTAC1C2_PredictSampleMulti(int *psamp, int idx, btac1c_idxstate *ridx, int *prvec);
int BGBDT_SndBTAC1C2_SelectFilterBlockMono(s16 *ibuf, int len, btac1c_idxstate *ridx);
int BGBDT_SndBTAC1C2_SelectFilterBlockStereo(s16 *ibuf, int len, btac1c_idxstate *ridx, int *rpcfcn, int *rpsfcn);
BTEIFGL_API void BGBDT_SndBTAC1C2_EncodeBlockMonoPfcn(s16 *ibuf, byte *obuf, int len, btac1c_idxstate *ridx, int pfcn);
BTEIFGL_API void BGBDT_SndBTAC1C2_EncodeBlockMono(s16 *ibuf, byte *obuf, int len, btac1c_idxstate *ridx);
BTEIFGL_API void BGBDT_SndBTAC1C2_DumpStatBlocks(byte *buf, int bsz, int nblks);
BTEIFGL_API void BGBDT_SndBTAC1C2_DumpStereoStatBlocks(byte *buf, int bsz, int nblks);
void BGBDT_SndBTAC1C2_EncodeBlockStereoJS_Pfcn(s16 *ibuf, byte *obuf, int len, btac1c_idxstate *ridx, int pcfcn, int psfcn);
BTEIFGL_API int BGBDT_SndBTAC1C2_StereoBlockSizeFromSamples(int len);
void BGBDT_SndBTAC1C2_EncodeBlockStereoJS(s16 *ibuf, byte *obuf, int len, btac1c_idxstate *ridx);
void BGBDT_SndBTAC1C2_EncodeStereoBlockStereoI(s16 *ibuf, byte *obuf, int len, btac1c_idxstate *ridx, int pfcn);
void BGBDT_SndBTAC1C2_EncodeStereoBlockStereo2Pfcn(s16 *ibuf, byte *obuf, int len, btac1c_idxstate *ridx, int pfcn);
void BGBDT_SndBTAC1C2_EncodeMonoBlockStereoPfcn(s16 *ibuf, byte *obuf, int len, btac1c_idxstate *ridx, int pfcn);
void BGBDT_SndBTAC1C2_EncodeBlockStereo(s16 *ibuf, byte *obuf, int len, btac1c_idxstate *ridx);
BTEIFGL_API void BGBDT_SndBTAC1C2_EncodeBlockStereoLg2(s16 *ibuf, byte *obuf, int lg2, btac1c_idxstate *ridx);
BTEIFGL_API void BGBDT_SndBTAC1C2_EncodeBlockMonoLg2(s16 *ibuf, byte *obuf, int lg2, btac1c_idxstate *ridx);
//AHSRC:base/snd_mixer.c
BTEIFGL_API int BGBDT_Sound_AllocChanId(void);
BTEIFGL_API int BGBDT_Sound_FreeChanId(int id);
BTEIFGL_API BGBDT_SndMixChan *BGBDT_Sound_AllocMixChan(void);
BTEIFGL_API int BGBDT_Sound_FreeMixChan(BGBDT_SndMixChan *cur);
BTEIFGL_API BGBDT_SndMixChan *BGBDT_Sound_LookupMixChan(int id);
BTEIFGL_API BGBDT_SndMixChan *BGBDT_Sound_GetMixChan(int id);
BTEIFGL_API int BGBDT_Sound_DeleteMixChan(int id);
BTEIFGL_API BGBDT_SndListen *BGBDT_Sound_LookupListener(int id);
BTEIFGL_API BGBDT_SndListen *BGBDT_Sound_GetListener(int id);
BTEIFGL_API int BGBDT_Sound_MixChannel(BGBDT_SndListen *listen, BGBDT_SndMixChan *chan, double dt, double odt);
BTEIFGL_API int BGBDT_Sound_CheckListenBuffer(BGBDT_SndListen *listen, double dt);
BTEIFGL_API int BGBDT_Sound_SetListenOrg(vec3 org);
BTEIFGL_API int BGBDT_Sound_SetListenVecRt(vec3 v);
BTEIFGL_API int BGBDT_Sound_SetListenVecFw(vec3 v);
BTEIFGL_API int BGBDT_Sound_SetListenVecUp(vec3 v);
BTEIFGL_API int BGBDT_Sound_MixTime(double dt);
BTEIFGL_API int BGBDT_Sound_PlaySound(char *name, int vol, int att, int flag);
BTEIFGL_API int BGBDT_Sound_ChanSetOrigin(int id, vec3 org);
BTEIFGL_API int BGBDT_Sound_ChanSetOriginF(int id, float x, float y, float z);
//AHSRC:base/snd_sample.c
u32 BGBDT_Snd_HashName(char *name);
BGBDT_SndSampler *BGBDT_Snd_LookupSampler(char *name);
BGBDT_SndSampler *BGBDT_Snd_GetSampler(char *name);
byte *BGBDT_Snd_RiffReadU32(byte *cs, u32 *rv);
byte *BGBDT_Snd_RiffReadS32(byte *cs, u32 *rv);
byte *BGBDT_Snd_RiffReadFcc(byte *cs, u32 *rv);
int bgbdt_log2up(int x);
BTEIFGL_API BGBDT_SndSampler *BGBDT_Snd_GetLoadSampler(char *name);
BTEIFGL_API BGBDT_SndSampler *BGBDT_Snd_GetLoadSamplerWAV(char *name);
int BGBDT_Snd_GetSampleMonoFqClz(BGBDT_SndSampler *samp, int fq, int pos);
int BGBDT_Snd_SampleModSample(BGBDT_SndSampler *samp, int pos);
int BGBDT_Snd_GetSampleMonoFqMod(BGBDT_SndSampler *samp, int fq, int pos);
int BGBDT_Snd_GetSampleMonoMod_Gen(BGBDT_SndSampler *samp, int pos);
int BGBDT_Snd_GetSampleMultiMod_GenM(BGBDT_SndSampler *samp,int pos, int ch);
int BGBDT_Snd_GetSampleMono_PCM8M(BGBDT_SndSampler *samp, int pos);
int BGBDT_Snd_GetSampleMono_PCM8S(BGBDT_SndSampler *samp, int pos);
int BGBDT_Snd_GetSampleMultiMod_PCM8S(BGBDT_SndSampler *samp,int pos, int ch);
int BGBDT_Snd_GetSampleMono_PCM16M(BGBDT_SndSampler *samp, int pos);
int BGBDT_Snd_GetSampleMono_PCM16S(BGBDT_SndSampler *samp, int pos);
int BGBDT_Snd_GetSampleMultiMod_PCM16S(BGBDT_SndSampler *samp,int pos, int ch);
int BGBDT_Snd_GetCacheCheckKey(BGBDT_SndSampler *samp, int blkid, s16 **rbuf);
int BGBDT_Snd_GetSampleMono_MADPCM(BGBDT_SndSampler *samp, int pos);
int BGBDT_Snd_GetSampleMono_SADPCM(BGBDT_SndSampler *samp, int pos);
int BGBDT_Snd_GetSampleMonoI_MADPCM_2N8(BGBDT_SndSampler *samp, int pos);
int BGBDT_Snd_GetSampleMono_MADPCM_2N8(BGBDT_SndSampler *samp, int pos);
int BGBDT_Snd_GetSampleMonoMod_MADPCM_2N8(BGBDT_SndSampler *samp, int pos);
int BGBDT_Snd_GetSampleMono_SADPCM_2N8(BGBDT_SndSampler *samp, int pos);
int BGBDT_Snd_GetSampleMono_SADPCM_2N16(BGBDT_SndSampler *samp, int pos);
BTEIFGL_API int BGBDT_Snd_GetSampleMono(BGBDT_SndSampler *samp, int pos);
BTEIFGL_API int BGBDT_Snd_GetSampleMonoMod(BGBDT_SndSampler *samp, int pos);
//AHSRC:base/vf31_btpk.c
int vf31_btpk_init(void);
int vf31_btpk_VfClose(VF31 *fd);
int vf31_btpk_VfRead(void *buf, int s1, int s2, VF31 *fd);
int vf31_btpk_VfWrite(void *buf, int s1, int s2, VF31 *fd);
int vf31_btpk_VfGetc(VF31 *fd);
int vf31_btpk_VfPutc(int v, VF31 *fd);
s64 vf31_btpk_VfTell(VF31 *fd);
int vf31_btpk_VfSeek(VF31 *fd, s64 ofs, int rel);
VF31_VFMNT *vf31_btpk_VfMount_RO(char *devpath, char *mntpath,char *fstype, char *mode);
VF31_VFMNT *vf31_btpk_VfMount_RW(char *devpath, char *mntpath,char *fstype, char *mode);
int vf31_btpk_VfUmount(VF31_VFMNT *mnt);
VF31 *vf31_btpk_VfOpen(VF31_VFMNT *mnt, char *path, char *mode);
int vf31_btpk_VfLoadFile(VF31_VFMNT *mnt, char *path, void **rbuf, int *rsz);
int vf31_btpk_VfStoreFile(VF31_VFMNT *mnt, char *path, void *buf, int sz);
int vf31_btpk_VfStoreFile_RO(VF31_VFMNT *mnt, char *path, void *buf, int sz);
//AHSRC:base/vf31_osdir.c
int vf31_osdir_init(void);
int vf31_osdir_VfClose(VF31 *fd);
int vf31_osdir_VfRead(void *buf, int s1, int s2, VF31 *fd);
int vf31_osdir_VfWrite(void *buf, int s1, int s2, VF31 *fd);
int vf31_osdir_VfGetc(VF31 *fd);
int vf31_osdir_VfPutc(int v, VF31 *fd);
s64 vf31_osdir_VfTell(VF31 *fd);
int vf31_osdir_VfSeek(VF31 *fd, s64 ofs, int rel);
VF31_VFMNT *vf31_osdir_VfMount(char *devpath, char *mntpath,char *fstype, char *mode);
int vf31_osdir_VfUmount(VF31_VFMNT *mnt);
VF31 *vf31_osdir_VfOpen(VF31_VFMNT *mnt, char *path, char *mode);
int vf31_osdir_VfLoadFile(VF31_VFMNT *mnt, char *path, void **rbuf, int *rsz);
int vf31_osdir_VfStoreFile(VF31_VFMNT *mnt, char *path, void *buf, int sz);
//AHSRC:base/vf31_vfile.c
BTEIFGL_API int VfClose(VF31 *fd);
BTEIFGL_API int VfRead(void *buf, int s1, int s2, VF31 *fd);
BTEIFGL_API int VfWrite(void *buf, int s1, int s2, VF31 *fd);
BTEIFGL_API int VfGetc(VF31 *fd);
BTEIFGL_API int VfPutc(int v, VF31 *fd);
BTEIFGL_API s64 VfTell(VF31 *fd);
BTEIFGL_API int VfSeek(VF31 *fd, s64 ofs, int rel);
BTEIFGL_API VF31_VFMNT *VfMount(char *devpath, char *mntpath,char *fstype, char *mode);
BTEIFGL_API int VfUmount(VF31_VFMNT *mnt);
BTEIFGL_API int VfUnlinkMount(VF31_VFMNT *mnt);
BTEIFGL_API void VfNormalizePath(char *path, char *pbuf);
BTEIFGL_API VF31_VFMNT *VfQueryPathMounts(char *path);
BTEIFGL_API VF31 *VfOpen(char *path, char *mode);
BTEIFGL_API int VfLoadFile(char *path, void **rbuf, int *rsz);
BTEIFGL_API void *VfLoadFile2(char *path, int *rsz);
BTEIFGL_API void VfFreeLoadFileBuffer(void *buf);
BTEIFGL_API int VfStoreFile(char *path, void *buf, int sz);
BTEIFGL_API int VfRegisterVfsDrv(VF31_VFMNT_VTAB *drv);
int vf_setupvm();
BTEIFGL_API int VfInitVfs(void);
//AHSRC:base/w32_glw.c
void gfxdrv_lock();
void gfxdrv_unlock();
void gfxdrv_sleep(int ms);
BTEIFGL_API void GfxDrv_GetWindowSize(int *xs, int *ys);
BTEIFGL_API void GfxDrv_GetWindowTexSize(int *xs, int *ys);
BTEIFGL_API void GfxDrv_GetWindowMaxSize(int *xs, int *ys);
BTEIFGL_API void GfxDrv_GetWindowMaxTexSize(int *xs, int *ys);
BTEIFGL_API bool GfxDrv_WindowIsActiveP(void);
BTEIFGL_API bool GfxDrv_WindowIsFullActiveP(void);
BTEIFGL_API bool GfxDrv_WindowIsFullscreenP(void);
BTEIFGL_API void GfxDrv_SetClearColor(float cr, float cg, float cb);
BTEIFGL_API void GfxDrv_BeginDrawing();
BTEIFGL_API void GfxDrv_KeyEvent(int key, int down);
BTEIFGL_API void GfxDrv_EndDrawing(void);
void GfxDrv_V_HandleMessages();
int GfxDrv_V_SetWindowedMode();
int GfxDrv_V_GetDesktopSize();
int GfxDrv_V_SetFullscreenMode();
void GfxDrv_UpdateMode();
int GfxDrv_V_SetupWindow();
void GfxDrv_InitGL();
void GfxDrv_InitGL2();
BTEIFGL_API void GfxDrv_Shutdown();
int GfxDrv_MapKey(int key);
void GfxDrv_AppActivate(bool active, bool minimized);
BTEIFGL_API void GfxDrv_SetDefaults(char *label, int width, int height);
BTEIFGL_API void GfxDrv_SetDefaultFullscreen(int fs);
BTEIFGL_API void GfxDrv_SetFullscreenResolution(int width, int height);
BTEIFGL_API int GfxDrv_SetupMainDC();
BTEIFGL_API int GfxDrv_Start();
BTEIFGL_API int GfxDrv_SetupThreadShareLists();
BTEIFGL_API int GfxDrv_TeardownThreadShareLists();
BTEIFGL_API int GfxDrv_Init(void *hInstance, int nCmdShow, int *rkill);
BTEIFGL_API int GfxDrv_SetInstance(void *hInstance, int nCmdShow);
BTEIFGL_API int GfxDrv_SetKill(int *rkill);
BTEIFGL_API int GfxDrv_GetDtSwap();
//AHSRC:base/w32_mouse.c
BTEIFGL_API int GfxDrv_MouseGetRelPos(int *dx, int *dy, int *mb);
BTEIFGL_API int GfxDrv_MouseGetPos(int *mx, int *my, int *mb);
BTEIFGL_API int GfxDrv_MouseSetPos(int mx, int my);
//AHSRC:base/w32_sound.c
BTEIFGL_API int SoundDev_DeInit();
BTEIFGL_API int SoundDev_Init();
BTEIFGL_API int SoundDev_GetDMAPos();
BTEIFGL_API void SoundDev_Submit();
void BGBMID_Sound_MixPopReduceStereo(short *buffer, int cnt);
void BGBMID_Sound_MixPopReduceStereo2(short *buffer, int size, int offs, int cnt);
BTEIFGL_API int SoundDev_PaintSamples(short *buffer, int cnt);
BTEIFGL_API int SoundDev_WriteRawSamples(short *buffer,int cnt, int ovcnt);
BTEIFGL_API int SoundDev_WriteStereoSamples(short *buffer, int cnt);
BTEIFGL_API int SoundDev_WriteStereoSamples2(short *buffer, int cnt, int ovcnt);
BTEIFGL_API int SoundDev_WriteSamples(short *buffer, int cnt);
//AHSRC:base/ems_glw.c
BTEIFGL_API int GfxDrv_MouseGetRelPos(int *dx, int *dy, int *mb);
BTEIFGL_API int GfxDrv_MouseGetPos(int *mx, int *my, int *mb);
BTEIFGL_API int GfxDrv_MouseSetPos(int mx, int my);
int GfxDrv_MapKey(int key);
void GfxDrv_UpdateKeyboard();
void GfxDrv_UpdateEvents();
BTEIFGL_API void GfxDrv_GetWindowSize(int *xs, int *ys);
BTEIFGL_API void GfxDrv_GetWindowTexSize(int *xs, int *ys);
BTEIFGL_API bool GfxDrv_WindowIsActiveP(void);
BTEIFGL_API void GfxDrv_BeginDrawing();
BTEIFGL_API void GfxDrv_EndDrawing(void);
void GfxDrv_InitGL();
BTEIFGL_API int GfxDrv_Start();
BTEIFGL_API void GfxDrv_SetDefaults(char *label, int width, int height);
BTEIFGL_API void GfxDrv_SetDefaultFullscreen(int fs);
BTEIFGL_API int GfxDrv_Init(void *hInstance, int nCmdShow, int *rkill);
BTEIFGL_API int GfxDrv_SetKill(int *rkill);
BTEIFGL_API int GfxDrv_GetDtSwap();
//AHSRC:base/ems_sound.c
BTEIFGL_API int SoundDev_DeInit();
BTEIFGL_API int SoundDev_Init();
BTEIFGL_API int SoundDev_WriteRawSamples(short *buffer,int cnt, int ovcnt);
BTEIFGL_API int SoundDev_WriteStereoSamples(short *buffer, int cnt);
BTEIFGL_API int SoundDev_WriteStereoSamples2(short *buffer, int cnt, int ovcnt);
BTEIFGL_API int SoundDev_WriteSamples(short *buffer, int cnt);
//AHSRC:base/w32_guid.c
int NET_CreateGuid(VGUID *buf);
int NET_GuidEqualP(VGUID *a, VGUID *b);
char *NET_Guid2String(VGUID *guid);
char *NET_String2Guid(VGUID *guid, char *s);
int NET_GuidIsSixteencc(VGUID *guid);
int NET_GuidFromName(VGUID *guid, char *name);
//AHSRC:base/w32_net.c
char *ipv4tostr(unsigned long addr);
char *ipv6tostr(byte *addr);
char *NET_Addr2Str(VADDR *addr);
VADDR *NET_Str2Addr(char *str, int proto);
BTEIFGL_API int NET_InitLow(void);
BTEIFGL_API VADDR *NET_LookupHost(char *name);
BTEIFGL_API VADDR *NET_LookupHost2(char *name, char *serv, int proto);
BTEIFGL_API VADDR *NET_DecodeHostnamePort(char *name, int defport);
BTEIFGL_API VADDR *NET_DecodeHostname(char *name);
//AHSRC:base/w32_udpip.c
char *ipv4tostr(unsigned long addr);
char *ipv6tostr(byte addr[16]);
BTEIFGL_API int NET_InitLow(void);
int __UDP_OpenSocket(int port);
int __UDP_OpenSocket(int port);
BTEIFGL_API int UDP_GetSocketAddr(int socket, VADDR *addrbuf);
int UDP_SockGet(void *buf, int lim, VADDR *from, int sock);
int UDP_SockSend(int sock, VADDR *targ, void *msg, int len, int flags);
BTEIFGL_API int UDP_OpenSocket(int port);
//AHSRC:voxel/vox_chunk.c
BGBDT_VoxRegion *BGBDT_AllocRegion(BGBDT_VoxWorld *world);
BGBDT_VoxChunk *BGBDT_AllocChunk(BGBDT_VoxWorld *world);
void BGBDT_FreeRegion(BGBDT_VoxWorld *world, BGBDT_VoxRegion *rgn);
void BGBDT_FreeChunk(BGBDT_VoxWorld *world, BGBDT_VoxChunk *chk);
byte *BGBDT_WorldAllocVoxelIndexL(BGBDT_VoxWorld *world);
byte *BGBDT_WorldAllocVoxelIndexH(BGBDT_VoxWorld *world);
void BGBDT_WorldFreeVoxelIndexL(BGBDT_VoxWorld *world, byte *buf);
void BGBDT_WorldFreeVoxelIndexH(BGBDT_VoxWorld *world, byte *buf);
void *BGBDT_WorldAllocVoxelData(BGBDT_VoxWorld *world, int num);
void BGBDT_WorldFreeVoxelData(BGBDT_VoxWorld *world, void *buf, int num);
void *BGBDT_WorldReallocVoxelData(BGBDT_VoxWorld *world,void *oldbuf, int oldnum, int newnum);
BTEIFGL_API u32 bgbdt_xyz2rgnid(int bx, int by, int bz);
BTEIFGL_API BGBDT_VoxRegion *BGBDT_WorldGetRegion(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, int accfl);
BTEIFGL_API BGBDT_VoxChunk *BGBDT_WorldGetChunk(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, int accfl);
BTEIFGL_API BGBDT_VoxChunk *BGBDT_GetRegionChunk(BGBDT_VoxWorld *world, BGBDT_VoxRegion *rgn, int bx, int by, int bz, int accfl);
void bgbdt_clearvoxdatastatus(BGBDT_VoxDataStatus *rts);
void BGBDT_WorldVoxel_GetTypeIdFlags(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, BGBDT_VoxData td, int *rtix, int *rfl);
void BGBDT_WorldGet_UpdateAdjFl(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, BGBDT_VoxDataStatus *rts, int accfl);
int BGBDT_WorldGetChunkVoxIdx(BGBDT_VoxWorld *world,BGBDT_VoxChunk *chk, int bx, int by, int bz);
BGBDT_VoxCoord BGBDT_WorldGetChunkVoxCoord(BGBDT_VoxWorld *world,BGBDT_VoxChunk *chk, int bx, int by, int bz);
BGBDT_VoxCoord BGBDT_WorldGetRegionChunkCoord(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn, int bx, int by, int bz);
BGBDT_VoxCoord BGBDT_WorldGetRegionVoxelCoord(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn, int bx, int by, int bz);
BTEIFGL_API int BGBDT_WorldGetVoxelData(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, BGBDT_VoxData *rtd, BGBDT_VoxDataStatus *rts, int accfl);
BTEIFGL_API int BGBDT_WorldGetChunkVoxelData(BGBDT_VoxWorld *world,int bx, int by, int bz, BGBDT_VoxChunk *chk, BGBDT_VoxData *rtd, BGBDT_VoxDataStatus *rts, int accfl);
int BGBDT_WorldTouchAdjacentChunks(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, int accfl);
BTEIFGL_API int BGBDT_WorldSetChunkVoxelData(BGBDT_VoxWorld *world,BGBDT_VoxChunk *chk, BGBDT_VoxCoord xyz, BGBDT_VoxData td, int accfl);
BTEIFGL_API int BGBDT_WorldSetVoxelData(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, BGBDT_VoxData td, int accfl);
BTEIFGL_API int BGBDT_WorldUpdateChunkSolid(BGBDT_VoxWorld *world,BGBDT_VoxChunk *chk);
BTEIFGL_API int BGBDT_WorldGetString(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, int accfl, char *str);
BTEIFGL_API char *BGBDT_WorldGetStringForIndex(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, int accfl, int idx);
void BGBDT_UnloadVoxRegionChunk(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn, BGBDT_VoxChunk *chk);
void BGBDT_UnloadVoxRegion(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn);
void BGBDT_UnloadRegionMeshes(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn);
//AHSRC:voxel/vox_decrice.c
int BGBDT_Rice_InitTables();
int BGBDT_Rice_NextByte(BGBDT_RiceContext *ctx);
int BGBDT_Rice_SetupRead(BGBDT_RiceContext *ctx, byte *buf, int szbuf);
int BGBDT_Rice_ReadBit(BGBDT_RiceContext *ctx);
int BGBDT_Rice_ReadNBits(BGBDT_RiceContext *ctx, int n);
int BGBDT_Rice_ReadNBitsNoMask(BGBDT_RiceContext *ctx, int n);
int BGBDT_Rice_Read4Bits(BGBDT_RiceContext *ctx);
int BGBDT_Rice_Read8Bits(BGBDT_RiceContext *ctx);
int BGBDT_Rice_Read16Bits(BGBDT_RiceContext *ctx);
u32 BGBDT_Rice_Read32Bits(BGBDT_RiceContext *ctx);
u64 BGBDT_Rice_Read48Bits(BGBDT_RiceContext *ctx);
void BGBDT_Rice_SkipNBits(BGBDT_RiceContext *ctx, int n);
void BGBDT_Rice_Skip8Bits(BGBDT_RiceContext *ctx);
int BGBDT_Rice_PeekWord(BGBDT_RiceContext *ctx);
int BGBDT_Rice_PeekByte(BGBDT_RiceContext *ctx);
int BGBDT_Rice_PeekNibble(BGBDT_RiceContext *ctx);
int BGBDT_Rice_ReadRiceQ(BGBDT_RiceContext *ctx);
int BGBDT_Rice_ReadRice(BGBDT_RiceContext *ctx, int k);
int BGBDT_Rice_ReadAdRice2(BGBDT_RiceContext *ctx, int *rk);
int BGBDT_Rice_ReadAdRiceI(BGBDT_RiceContext *ctx, int *rk);
int BGBDT_Rice_ReadAdRice(BGBDT_RiceContext *ctx, int *rk);
int BGBDT_Rice_ReadAdSRice(BGBDT_RiceContext *ctx, int *rk);
int BGBDT_Rice_ReadRiceDcI(BGBDT_RiceContext *ctx, int rk);
int BGBDT_Rice_ReadRiceDc(BGBDT_RiceContext *ctx, int rk);
int BGBDT_Rice_ReadAdRiceDcI(BGBDT_RiceContext *ctx, int *rk);
int BGBDT_Rice_ReadAdRiceDc(BGBDT_RiceContext *ctx, int *rk);
int BGBDT_Rice_ReadAdRiceLLI(BGBDT_RiceContext *ctx, int *rk);
int BGBDT_Rice_ReadAdRiceLL(BGBDT_RiceContext *ctx, int *rk);
int BGBDT_Rice_ReadAdSRiceDc(BGBDT_RiceContext *ctx, int *rk);
int BGBDT_Rice_ReadQExpBase(BGBDT_RiceContext *ctx, int k);
int BGBDT_Rice_ReadAdExp2Rice(BGBDT_RiceContext *ctx, int *rk);
//AHSRC:voxel/vox_draw.c
void BGBDT_CalcCoordLocalOrigin(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, float *vec);
BTEIFGL_API void BGBDT_ConvVoxToLocalCoord(BGBDT_VoxWorld *world, BGBDT_VoxCoord xyz, float *vec);
float BGBDT_CalcCameraChunkMeshDistance(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh);
void BGBDT_CalcChunkMeshLocalCenter(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh, float *vec);
void BGBDT_CalcChunkMeshViewCenter(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh, float *vec);
void BGBDT_CalcChunkLocalCenter(BGBDT_VoxWorld *world,BGBDT_VoxChunk *chk, float *vec);
void BGBDT_CalcRegionBlockLocalCenter(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn, int bx, int by, int bz, float *vec);
void BGBDT_CalcRegionLocalOrigin(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn, float *vec);
BTEIFGL_API BGBDT_VoxCoord BGBDT_ConvLocalToVoxCoord(BGBDT_VoxWorld *world, float *vec);
void BGBDT_CalcChunkMeshFrustumCenter(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh, float *vec);
void BGBDT_DrawVoxChunkMesh(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh);
void BGBDT_UpdateVoxRegionCVS(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn);
void BGBDT_DrawVoxRegion(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn);
BTEIFGL_API void BGBDT_DrawVoxWorld(BGBDT_VoxWorld *world);
//AHSRC:voxel/vox_drawent.c
void BGBDT_DrawVoxRegionEntity(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn, BGBDT_VoxRenderEntity *ent);
void BGBDT_UpdateVoxRegionEntityCVS(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn);
void BGBDT_DrawVoxRegionEntities(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn);
//AHSRC:voxel/vox_light.c
int bgbdt_voxlight_blendv(int la, int lb, int vfl);
int bgbdt_voxlight_blenda(int la, int lb, int ix, int vfl);
int BGBDT_VoxLight_UpdateChunkCheckCave(BGBDT_VoxWorld *world, BGBDT_VoxChunk *chk);
int BGBDT_VoxLight_UpdateChunkLight(BGBDT_VoxWorld *world, BGBDT_VoxChunk *chk);
BTEIFGL_API int BGBDT_VoxLight_ClearBlockLightRadius(BGBDT_VoxWorld *world, BGBDT_VoxCoord xyz, int accfl);
BTEIFGL_API int BGBDT_VoxLight_ClearBlockAreaLightRadius(BGBDT_VoxWorld *world, BGBDT_VoxCoord xyz, int accfl);
BTEIFGL_API int BGBDT_VoxLight_CheckClearBlockLightRadius(BGBDT_VoxWorld *world, BGBDT_VoxCoord xyz, int accfl);
BTEIFGL_API int BGBDT_VoxLight_GetBlockLightIntensity(BGBDT_VoxWorld *world, BGBDT_VoxCoord xyz, BGBDT_VoxData td);
int BGBDT_VoxEnt_UpdateChunkSpawnEnts(BGBDT_VoxWorld *world, BGBDT_VoxChunk *chk);
BTEIFGL_API int BGBDT_VoxEnt_CheckSpawnEnitity(BGBDT_VoxWorld *world, BGBDT_VoxCoord xyz, BGBDT_VoxData td, char *cname);
int BGBDT_WorldChunkCompact(BGBDT_VoxWorld *world,BGBDT_VoxChunk *chk);
//AHSRC:voxel/vox_load.c
int BGBDT_WorldCheckRegionMagic(byte *buf);
int BGBDT_WorldDecodeRegionData(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn);
int BGBDT_DecodeChunkLZ(BGBDT_RiceContext *ctx,byte *obuf, int obsz);
int BGBDT_ReadLzSTF(BGBDT_RiceContext *ctx, int *rk);
int BGBDT_ReadLzSTF3(BGBDT_RiceContext *ctx, int *rk);
int BGBDT_ReadLzSMTF2(BGBDT_RiceContext *ctx, int *rk);
int BGBDT_DecodeChunkLZ(BGBDT_RiceContext *ctx,byte *obuf, int obsz);
int BGBDT_WorldDecodeChunkBits(BGBDT_VoxWorld *world,BGBDT_VoxChunk *chk, byte *ibuf, int ibsz, int accfl);
int BGBDT_WorldDecodeChunk(BGBDT_VoxWorld *world,BGBDT_VoxChunk *chk, byte *ibuf, int accfl);
int BGBDT_VoxRgn_CheckRegionLzMagic(byte *buf);
int BGBDT_VoxRgn_LzMemCpyF(byte *dst, byte *src, int len);
int BGBDT_VoxRgn_UnpackLZ4(byte *ibuf, int isz, byte *obuf, int osz);
int BGBDT_VoxRgn_UnpackRgnLz(BGBDT_VoxWorld *world,byte *ibuf, int ibsz, byte **robuf, int *rosz);
//AHSRC:voxel/vox_mesh.c
BGBDT_VoxChunkMesh *BGBDT_AllocChunkMesh(BGBDT_VoxWorld *world);
void BGBDT_FreeChunkMeshTempData(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh);
void BGBDT_FreeChunkMesh(BGBDT_VoxWorld *world, BGBDT_VoxChunkMesh *mesh);
int BGBDT_VoxMesh_IndexVertex(BGBDT_VoxChunkMesh *mesh,BGBDT_VoxVertex xyz);
int BGBDT_VoxMesh_IndexTriangle(BGBDT_VoxChunkMesh *mesh,BGBDT_VoxTriangle tri);
int BGBDT_VoxMesh_IndexMaterial(BGBDT_VoxChunkMesh *mesh, int mat);
int BGBDT_VoxMesh_EmitTriangle(BGBDT_VoxChunkMesh *mesh,BGBDT_VoxVertex v0, BGBDT_VoxVertex v1, BGBDT_VoxVertex v2, int mat, int atxy, int light);
int BGBDT_VoxMesh_EmitQuad(BGBDT_VoxChunkMesh *mesh,BGBDT_VoxVertex v0, BGBDT_VoxVertex v1, BGBDT_VoxVertex v2, BGBDT_VoxVertex v3, int mat, int atxy, int light);
int BGBDT_VoxMesh_EmitBlockFacesGeneric(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh, BGBDT_VoxChunk *chk, int bx, int by, int bz, BGBDT_VoxData td, BGBDT_VoxDataStatus tds);
int BGBDT_VoxMesh_EmitBlockFacesNSBox(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh, BGBDT_VoxChunk *chk, int bx, int by, int bz, BGBDT_VoxData td, BGBDT_VoxDataStatus tds);
int BGBDT_VoxMesh_EmitChunkFaces(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh, BGBDT_VoxChunk *chk);
int BGBDT_VoxMesh_IndexVaVertex(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh, float *xyz, float *st, byte *rgba, byte *norm);
u16 bgbdt_float2hf(float f);
int BGBDT_VoxMesh_IndexVaVertex(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh, float *xyz, float *st, byte *rgba, byte *norm);
float bgbdt_clamp01(float v);
void bgbdt_voxmesh_clrclamp(byte *clr, float cr, float cg, float cb);
int BGBDT_VoxMesh_EmitVaTriangle(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh, BGBDT_VoxTriangle *tri);
int BGBDT_VoxMesh_RebuildArrays(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh);
int BGBDT_VoxMesh_RebuildChunkMesh(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh, BGBDT_VoxChunk *chk);
int BGBDT_WorldDecodeChunkMesh(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *chk, byte *ibuf, int accfl);
BGBDT_VoxChunkMesh *BGBDT_WorldGetChunkMesh(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, int accfl);
BGBDT_VoxChunkMesh *BGBDT_GetRegionChunkMesh(BGBDT_VoxWorld *world, BGBDT_VoxRegion *rgn, int bx, int by, int bz, int accfl);
//AHSRC:voxel/vox_rice.c
BGBDT_RiceContext *BGBDT_Rice_AllocContext(void);
void BGBDT_Rice_FreeContext(BGBDT_RiceContext *ctx);
void BGBDT_Rice_SetupWrite(BGBDT_RiceContext *ctx, byte *obuf, int osz);
void BGBDT_Rice_EmitByte(BGBDT_RiceContext *ctx, int i);
void BGBDT_Rice_WriteBit(BGBDT_RiceContext *ctx, int i);
void BGBDT_Rice_WriteNBits(BGBDT_RiceContext *ctx, int v, int n);
void BGBDT_Rice_WriteNBitsH(BGBDT_RiceContext *ctx, u32 i, int n);
void BGBDT_Rice_WriteNBitsL(BGBDT_RiceContext *ctx, s64 i, int n);
void BGBDT_Rice_Write2Bits(BGBDT_RiceContext *ctx, int i);
void BGBDT_Rice_Write3Bits(BGBDT_RiceContext *ctx, int i);
void BGBDT_Rice_Write4Bits(BGBDT_RiceContext *ctx, int i);
void BGBDT_Rice_Write8Bits(BGBDT_RiceContext *ctx, int v);
void BGBDT_Rice_Write16Bits(BGBDT_RiceContext *ctx, int v);
void BGBDT_Rice_WriteRice(BGBDT_RiceContext *ctx, int v, int k);
int BGBDT_Rice_CountWriteRice(BGBDT_RiceContext *ctx, int v, int k);
void BGBDT_Rice_WriteSRice(BGBDT_RiceContext *ctx, int v, int k);
int BGBDT_Rice_CountWriteSRice(BGBDT_RiceContext *ctx, int v, int k);
void BGBDT_Rice_WriteAdRice(BGBDT_RiceContext *ctx, int v, int *rk);
int BGBDT_Rice_CountWriteAdRice(BGBDT_RiceContext *ctx, int v, int *rk);
void BGBDT_Rice_WriteAdSRice(BGBDT_RiceContext *ctx, int v, int *rk);
void BGBDT_Rice_WriteAdExpRice(BGBDT_RiceContext *ctx, int v, int *rk);
void BGBDT_Rice_WriteAdExpSRice(BGBDT_RiceContext *ctx, int v, int *rk);
int BGBDT_Rice_CountWriteAdRiceDc(BGBDT_RiceContext *ctx, int v, int *rk);
int BGBDT_Rice_CountWriteAdSRiceDc(BGBDT_RiceContext *ctx, int v, int *rk);
void BGBDT_Rice_WriteAdRiceDc(BGBDT_RiceContext *ctx, int v, int *rk);
void BGBDT_Rice_WriteAdSRiceDc(BGBDT_RiceContext *ctx, int v, int *rk);
void BGBDT_Rice_WriteAdRiceILL(BGBDT_RiceContext *ctx, int val, int *rk);
void BGBDT_Rice_WriteAdRiceLL(BGBDT_RiceContext *ctx, int val, int *rk);
int BGBDT_Rice_FlushBits(BGBDT_RiceContext *ctx);
void BGBDT_Rice_WriteQExpBase(BGBDT_RiceContext *ctx, int v, int k);
void BGBDT_Rice_WriteAdExp2Rice(BGBDT_RiceContext *ctx, int v, int *rk);
//AHSRC:voxel/vox_save.c
void BGBDT_EmitLzSTF(BGBDT_RiceContext *ctx, int sym, int *rk);
void BGBDT_EmitLzSTF3(BGBDT_RiceContext *ctx, int sym, int *rk);
void BGBDT_EmitLzSMTF2(BGBDT_RiceContext *ctx, int sym, int *rk);
int BGBDT_ChunkLzHashHi(BGBDT_RiceContext *ctx, byte *ics);
void BGBDT_ChunkLzHashChi(BGBDT_RiceContext *ctx,byte *ics, int *chi);
int BGBDT_ChunkLzLookupMatch(BGBDT_RiceContext *ctx,byte *ics, byte *icss, byte *icse, int *rbl, int *rbd);
int BGBDT_ChunkLzUpdateWindow(BGBDT_RiceContext *ctx, byte *ics, int len);
int BGBDT_EncodeChunkLZ(BGBDT_RiceContext *ctx,byte *ibuf, int ibsz);
int BGBDT_WorldEncodeChunkBits(BGBDT_VoxWorld *world,BGBDT_VoxChunk *chk, byte *obuf, int obsz, int accfl);
int BGBDT_WorldEncodeChunkBuffer(BGBDT_VoxWorld *world,BGBDT_VoxChunk *chk, byte *obuf, int obsz, int accfl);
int BGBDT_RegionCellGetTag(BGBDT_VoxRegion *rgn, int idx);
int BGBDT_RegionCellSetTag(BGBDT_VoxRegion *rgn, int idx, int val);
int BGBDT_RegionFindFreeCellData(BGBDT_VoxRegion *rgn, int len);
int BGBDT_RegionExpandCellData(BGBDT_VoxRegion *rgn, int len);
int BGBDT_RegionAllocCellData(BGBDT_VoxRegion *rgn, int sz);
int BGBDT_RegionFreeCellData(BGBDT_VoxRegion *rgn, int ix);
int BGBDT_WorldEncodeChunk(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn, BGBDT_VoxChunk *chk, int accfl);
int BGBDT_WorldSaveRegionData(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn);
byte *BGBDT_EncLZ4_EmitMod255(byte *ct, int val);
int BGBDT_EncodeRegionBufLZ4(BGBDT_RiceContext *ctx,byte *ibuf, int ibsz, byte *obuf, int obsz);
int BGBDT_WorldEncodeRegionLZ4(BGBDT_VoxWorld *world, BGBDT_VoxRegion *rgn, byte *ibuf, int ibsz, byte *obuf, int obsz);
int BGBDT_WorldEncodeRegionBLZ(BGBDT_VoxWorld *world, BGBDT_VoxRegion *rgn, byte *ibuf, int ibsz, byte *obuf, int obsz);
int BGBDT_WorldEncodeRegionFeLz32(BGBDT_VoxWorld *world, BGBDT_VoxRegion *rgn, byte *ibuf, int ibsz, byte *obuf, int obsz);
//AHSRC:voxel/vox_tick.c
void BGBDT_RandomTickRegion(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn, BGBDT_VoxCoord xyz);
void BGBDT_TickVoxRegion(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn);
void BGBDT_UpdateVoxRegionPVS_MeshUpd(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn);
void BGBDT_UpdateVoxRegionPVS(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn);
BTEIFGL_API void BGBDT_TickVoxWorld(BGBDT_VoxWorld *world);
void BGBDT_VoxelWorld_RandomTick_Grass(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn, BGBDT_VoxCoord xyz, BGBDT_VoxData td);
void BGBDT_VoxelWorld_RandomTick_TallGrass(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn, BGBDT_VoxCoord xyz, BGBDT_VoxData td);
//AHSRC:voxel/vox_trace.c
int BGBDT_VoxTrace_CheckChunkEmpty(BGBDT_VoxWorld *world, BGBDT_VoxChunk *chk);
int BGBDT_VoxTrace_CheckChunkSolid(BGBDT_VoxWorld *world, BGBDT_VoxChunk *chk);
int BGBDT_VoxTrace_CheckChunkOpaque(BGBDT_VoxWorld *world, BGBDT_VoxChunk *chk);
BTEIFGL_API BGBDT_VoxChunk *BGBDT_RayCastChunk(BGBDT_VoxWorld *world,BGBDT_VoxCoord spos, BGBDT_VoxCoord epos, BGBDT_VoxCoord *rpos, int tracefl);
BTEIFGL_API int BGBDT_RayCastVoxel(BGBDT_VoxWorld *world,BGBDT_VoxCoord spos, BGBDT_VoxCoord epos, BGBDT_VoxCoord *rpos, BGBDT_VoxCoord *rlpos, BGBDT_VoxData *rtd, BGBDT_VoxDataStatus *rts, int tracefl);
BTEIFGL_API int BGBDT_CheckBoxCollideP(BGBDT_VoxCoord min1, BGBDT_VoxCoord max1, BGBDT_VoxCoord min2, BGBDT_VoxCoord max2);
BTEIFGL_API int BGBDT_WorldVoxel_GetVoxNSBox(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, BGBDT_VoxData td, BGBDT_VoxCoord *rmin, BGBDT_VoxCoord *rmax, int *rnbox);
BTEIFGL_API int BGBDT_WorldVoxel_CheckBoxMatchP(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, BGBDT_VoxData td, BGBDT_VoxCoord min, BGBDT_VoxCoord max, int tracefl);
BTEIFGL_API int BGBDT_BoxQueryVoxel(BGBDT_VoxWorld *world,BGBDT_VoxCoord min, BGBDT_VoxCoord max, BGBDT_VoxCoord *rpos, BGBDT_VoxData *rtd, int *rnvox,  int tracefl);
//AHSRC:voxel/vox_voxty.c
BTEIFGL_API int BGBDT_WorldVoxel_GetTypeID(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, BGBDT_VoxData td);
BTEIFGL_API int BGBDT_WorldVoxel_GetFlags(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, BGBDT_VoxData td);
BTEIFGL_API char *BGBDT_WorldVoxel_GetTypeName(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, BGBDT_VoxData td);
BTEIFGL_API int BGBDT_WorldVoxel_CheckSolidP(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, BGBDT_VoxData td);
BTEIFGL_API int BGBDT_WorldVoxel_CheckTransparentP(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, BGBDT_VoxData td);
BTEIFGL_API int BGBDT_WorldVoxel_CheckAirP(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, BGBDT_VoxData td);
BTEIFGL_API int BGBDT_WorldVoxel_CheckMatchP(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, BGBDT_VoxData td, int tracefl);
BTEIFGL_API int BGBDT_WorldVoxel_GetGlow(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, BGBDT_VoxData td);
BTEIFGL_API BGBDT_VoxTypeInfo *BGBDT_VoxelWorld_LookupTypeInfoName(BGBDT_VoxWorld *world, char *name);
BTEIFGL_API BGBDT_VoxTypeInfo *BGBDT_VoxelWorld_GetTypeInfoName(BGBDT_VoxWorld *world, char *name);
BTEIFGL_API BGBDT_VoxTypeInfo *BGBDT_VoxelWorld_LookupTypeInfoIndex(BGBDT_VoxWorld *world, int idx);
BTEIFGL_API int BGBDT_VoxelWorld_LookupTypeIndexName(BGBDT_VoxWorld *world, char *name);
BTEIFGL_API BGBDT_VoxTypeInfo *BGBDT_VoxelWorld_GetTypeInfoIndex(BGBDT_VoxWorld *world, int idx);
int BGBDT_WorldRegionLookupString(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn, char *str);
int BGBDT_WorldRegionGetString(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn, char *str);
char *BGBDT_WorldRegionStringForIndex(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn, int idx);
//AHSRC:voxel/vox_world.c
BGBDT_VoxWorld *BGBDT_AllocVoxelWorld();
int bgbdt_log2f2(int v);
int bgbdt_exp2f2(int v);
void *BGBDT_WorldAllocVoxelTemp(BGBDT_VoxWorld *world, int sz);
void BGBDT_WorldFreeVoxelTemp(BGBDT_VoxWorld *world, void *buf, int sz);
void *BGBDT_WorldReallocVoxelTemp(BGBDT_VoxWorld *world,void *oldbuf, int oldsz, int newsz);
int BGBDT_VoxelWorld_NoisePRandR(BGBDT_VoxWorld *world, BGBDT_VoxCoord xyz, int k);
int BGBDT_VoxelWorld_NoisePRandC(BGBDT_VoxWorld *world, BGBDT_VoxCoord xyz, int k);
int BGBDT_VoxelWorld_NoisePRandV(BGBDT_VoxWorld *world, BGBDT_VoxCoord xyz, int k);
int BGBDT_VoxelWorld_NoisePRandV(BGBDT_VoxWorld *world, BGBDT_VoxCoord xyz, int k);
void BGBDT_VoxelWorld_InitSamplerChk(BGBDT_VoxWorld *world, BGBDT_NoiseSample *samp, BGBDT_VoxCoord xyz, int kf);
float BGBDT_VoxelWorld_NoiseChk(BGBDT_VoxWorld *world, BGBDT_NoiseSample *samp, BGBDT_VoxCoord xyz, int k);
float BGBDT_VoxelWorld_NoiseChk4(BGBDT_VoxWorld *world, BGBDT_NoiseSample *samp, BGBDT_VoxCoord xyz, int k);
float BGBDT_VoxelWorld_NoiseChk16(BGBDT_VoxWorld *world, BGBDT_NoiseSample *samp, BGBDT_VoxCoord xyz, int k);
float BGBDT_VoxelWorld_NoiseVox4(BGBDT_VoxWorld *world, BGBDT_NoiseSample *samp, BGBDT_VoxCoord xyz, int k);
float btge_scurve(float a);
int BGBDT_VoxelWorld_GenerateChunkBasic(BGBDT_VoxWorld *world, BGBDT_VoxChunk *chk);
int BGBDT_CheckRgnGenChunkBasicP(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn, int bx, int by, int bz);
int BGBDT_CheckRgnGenChunkBasic256P(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn, int bx, int by, int bz);
BTEIFGL_API BGBDT_VoxWorld *BGBDT_CreateBasicWorld(char *name);
BTEIFGL_API BGBDT_VoxWorld *BGBDT_CreateBasicWorld2(char *name, char *wrlty);
BTEIFGL_API BGBDT_VoxWorld *BGBDT_SetupBasicWorld2(BGBDT_VoxWorld *wrl, char *name, char *wrlty);
int BGBDT_VoxelWorld_SaveWorldInfo(BGBDT_VoxWorld *world);
int BGBDT_VoxelWorld_LoadWorldInfo(BGBDT_VoxWorld *world);
//AHSRC:voxel/vox_felz32.c
int BGBDT_FeLz32_LookupMatch(BGBDT_FeLzContext *ctx,u32 *cs, u32 *cse, int *rml, int *rmd);
int BGBDT_FeLz32_UpdateString(BGBDT_FeLzContext *ctx,u32 *cs, u32 *cse, int len);
int BGBDT_FeLz32_EncodeBufferCtx(BGBDT_FeLzContext *ctx,u32 *ibuf, int ibsz, u32 *obuf, int obsz);
int BGBDT_FeLz32_EncodeBuffer(u32 *ibuf, int ibsz, u32 *obuf, int obsz);
int BGBDT_FeLz32_DecodeBuffer(u32 *ibuf, int ibsz, u32 *obuf, int obsz);
//AHSRC:voxel/vox_tg_mare.c
int BGBDT_VoxTg_SetupGenerate(BGBDT_VoxWorld *world);
int bgbdt_voxtg_vxrand();
int bgbdt_voxtg_vxsrand(int seed);
int BGBDT_VoxTgMare_GenerateTree(BGBDT_VoxWorld *world, BGBDT_VoxCoord xyz);
int BGBDT_VoxTgMare_GenerateChunkBasic(BGBDT_VoxWorld *world, BGBDT_VoxChunk *chk);
//AHSRC:entity/ent_bsvm.c
int bt2ent_frgl_printf(dtVal str, dtVal va);
void Bt2Ent_RegisterNames();
BTEIFGL_API vec3d Bt2Ent_EntGetOrigin(dtVal obj);
BTEIFGL_API void Bt2Ent_EntSetOrigin(dtVal obj, vec3d org);
BTEIFGL_API vec3d Bt2Ent_EntGetVelocity(dtVal obj);
BTEIFGL_API void Bt2Ent_EntSetVelocity(dtVal obj, vec3d org);
BTEIFGL_API float Bt2Ent_EntGetAngle(dtVal obj);
BTEIFGL_API void Bt2Ent_EntSetAngle(dtVal obj, float val);
BTEIFGL_API float Bt2Ent_EntGetRadius(dtVal obj);
BTEIFGL_API float Bt2Ent_EntGetHeight(dtVal obj);
BTEIFGL_API void Bt2Ent_EntSetRadius(dtVal obj, float val);
BTEIFGL_API void Bt2Ent_EntSetHeight(dtVal obj, float val);
BTEIFGL_API char *Bt2Ent_EntGetSprite(dtVal obj);
BTEIFGL_API char *Bt2Ent_EntGetSpriteLf(dtVal obj);
BTEIFGL_API char *Bt2Ent_EntGetSpriteBk(dtVal obj);
BTEIFGL_API void Bt2Ent_EntGetSpriteSize(dtVal obj, float *xs, float *ys);
BTEIFGL_API s64 Bt2Ent_EntGetFlags(dtVal obj);
BTEIFGL_API void Bt2Ent_EntSetFlags(dtVal obj, s64 val);
BTEIFGL_API dtVal Bt2Ent_EntGetOwner(dtVal obj);
BTEIFGL_API void Bt2Ent_EntSetOwner(dtVal obj, dtVal val);
BTEIFGL_API int Bt2Ent_LoadScript(char *def, char *imgname);
BTEIFGL_API int Bt2Ent_ScriptUpdate(double dt);
BTEIFGL_API int Bt2Ent_BindVoxWorld(BGBDT_VoxWorld *world);
BTEIFGL_API int Bt2Ent_SpawnWorld(char *func);
BTEIFGL_API int Bt2Ent_ToolSet(int id);
BTEIFGL_API int Bt2Ent_ToolUse(int flag);
BTEIFGL_API dtVal Bt2Ent_SpawnPlayer(void);
BTEIFGL_API dtVal Bt2Ent_SpawnEntityBasicXyz(char *cname, double x, double y, double z);
BTEIFGL_API dtVal Bt2Ent_SpawnEntityBasic(char *cname, vec3d org);
BTEIFGL_API int Bt2Ent_CallEntityTouch(dtVal self, dtVal other);
BTEIFGL_API int Bt2Ent_CallEntityUse(dtVal self, dtVal other);
BTEIFGL_API dtVal Bt2Ent_GetGlobalA(char *cname);
BTEIFGL_API int Bt2Ent_GetGlobalI(char *cname);
BTEIFGL_API int Bt2Ent_SetGlobalA(char *cname, dtVal v);
BTEIFGL_API int Bt2Ent_SetGlobalI(char *cname, int v);
BTEIFGL_API void Bt2Ent_SetGlobalVec3(char *cname, vec3d org);
int Bt2Ent_DrawSprite(BGBDT_VoxWorld *world,char *spr, vec3d vorg, float xs, float ys, int rang);
int Bt2Ent_DrawEntity(BGBDT_VoxWorld *world, dtVal ent);
BTEIFGL_API int Bt2Ent_DrawWorldEnts(BGBDT_VoxWorld *world);
BTEIFGL_API int Bt2Ent_CheckBoxEnt(BGBDT_VoxWorld *world, BGBDT_VoxCoord min, BGBDT_VoxCoord max, dtVal ent);
BTEIFGL_API int Bt2Ent_GetBoxEnt(BGBDT_VoxWorld *world, dtVal ent, BGBDT_VoxCoord *rmin, BGBDT_VoxCoord *rmax);
BTEIFGL_API int Bt2Ent_CheckRayEnt(BGBDT_VoxWorld *world, BGBDT_VoxCoord spos, BGBDT_VoxCoord epos, dtVal ent);
BTEIFGL_API int Bt2Ent_BoxQueryWorldEnts(BGBDT_VoxWorld *world, dtVal self, BGBDT_VoxCoord min, BGBDT_VoxCoord max, dtVal *robj, int *rnobj, int qflag);
BTEIFGL_API int Bt2Ent_RayQueryEntity(BGBDT_VoxWorld *world, dtVal self, BGBDT_VoxCoord spos, BGBDT_VoxCoord epos, dtVal *robj, int *rnobj, int tracefl);
BTEIFGL_API int Bt2Ent_RayCastEntity(BGBDT_VoxWorld *world, dtVal self, BGBDT_VoxCoord spos, BGBDT_VoxCoord epos, BGBDT_VoxCoord *rpos, dtVal *robj, int tracefl);
int bt2ent_movetick_checkmove(dtVal ent, double *porg,double *relmin, double *relmax);
BTEIFGL_API int Bt2Ent_EntityMoveCheckCollide(dtVal ent, void *rpos);
BTEIFGL_API int Bt2Ent_EmitParticleExplosionBasic(dtVal ent,int cnt, int atxy, u32 clr);
BTEIFGL_API int Bt2Ent_EmitParticleEffectPara(dtVal ent, dtVal args);
//AHSRC:entity/ent_dialog.c
BTEIFGL_API char *Bt2Ent_GetToolSprite(void);
BTEIFGL_API int Bt2Ent_SetToolSprite(char *str);
BTEIFGL_API dtVal Bt2Ent_GetToolTraceEnt(void);
BTEIFGL_API int Bt2Ent_SetToolTraceEnt(dtVal ent);
BTEIFGL_API int Bt2Ent_DialogActiveP(void);
BTEIFGL_API int Bt2Ent_DialogImpulse(int imp);
BTEIFGL_API int Bt2Ent_InvenActiveP(void);
BTEIFGL_API int Bt2Ent_DrawDialog(void);
BTEIFGL_API int Bt2Ent_InvenSetActive(int val);
BTEIFGL_API int Bt2Ent_SetDialog(dtVal dbox);
BTEIFGL_API int Bt2Ent_SetUseBackground(char *bkg);
BTEIFGL_API int Bt2Ent_SetApplyWorldFlags(int flag);
BTEIFGL_API int Bt2Ent_SetClearWorldFlags(int flag);
BTEIFGL_API int Bt2Ent_GetInvenSlot(int slot);
BTEIFGL_API int Bt2Ent_SetInvenSlot(int slot, int val);
BTEIFGL_API int Bt2Ent_ClearInven(void);
BTEIFGL_API s64 Bt2Ent_GetTokenSlot(int slot);
BTEIFGL_API int Bt2Ent_SetTokenSlot(int slot, s64 val);
BTEIFGL_API int Bt2Ent_GetNumToken(void);
BTEIFGL_API int Bt2Ent_ClearTokens(void);
BTEIFGL_API int Bt2Ent_GiveItem(int item);
BTEIFGL_API int Bt2Ent_TakeItem(int item);
BTEIFGL_API int Bt2Ent_CheckItem(int item);
BTEIFGL_API int Bt2Ent_GiveToken(int item);
BTEIFGL_API int Bt2Ent_TakeToken(int item);
BTEIFGL_API int Bt2Ent_CheckToken(int item);
BTEIFGL_API int Bt2Ent_SetBgm(char *bgm);
char *Bt2Ent_DiagGetFace1(dtVal obj);
char *Bt2Ent_DiagGetFace2(dtVal obj);
char *Bt2Ent_DiagGetText(dtVal obj);
dtVal Bt2Ent_DiagGetOptions(dtVal obj);
char *Bt2Ent_DiagGetVoice(dtVal obj);
int Bt2Ent_CallDiagImpulse(dtVal self, int imp);
int Bt2Ent_CallDiagSetup(dtVal self);
int Bt2Ent_DrawDialogBox(dtVal dbox);
int Bt2Ent_DrawInventory(void);
int Bt2Ent_DrawDeadScreen(void);
int Bt2Ent_DrawUseBackground(void);
//AHSRC:entity/ent_part.c
BGBDT_Particle *BGBDT_Part_Alloc(void);
BGBDT_Particle *BGBDT_Part_SpawnParticle(vec3d org, vec3 vel, int atxy);
float bgbdt_part_randf();
float bgbdt_part_randsf();
float bgbdt_part_scurve(float a);
BTEIFGL_API void BGBDT_Part_ParticleExplosionBasic(vec3d org, vec3 bvel, vec3 rvel, int cnt, int atxy, u32 clr);
BTEIFGL_API void BGBDT_Part_ParticleInitPara(BGBDT_ParticleEmission *para);
BTEIFGL_API void BGBDT_Part_ParticleEmitPara(BGBDT_ParticleEmission *para);
void BGBDT_Part_UpdateParticleClr(BGBDT_Particle *part, double dt);
void BGBDT_Part_UpdateParticle(BGBDT_Particle *part, double dt);
void BGBDT_Part_PartLocalOrigin(BGBDT_Particle *part, float *lorg);
double BGBDT_Part_PartCameraDistance(BGBDT_Particle *part);
BTEIFGL_API void BGBDT_Part_UpdateParticles(double dt);
void BGBDT_Part_DrawEmitParticle(BGBDT_Particle *part);
BTEIFGL_API void BGBDT_Part_DrawParticles(void);
//AHSRC:btews/btws_diode.c
BTEIFGL_API void btews_diode_Update(BTEWS_WireNode *self, double dt);
BTEIFGL_API void btews_diode_Draw(BTEWS_WireNode *self,float x0, float y0, float x1, float y1);
BTEIFGL_API void btews_diode_Place(BTEWS_Component *self,BTEWS_WireGrid *grid, int x, int y);
//AHSRC:btews/btws_dip.c
BTEIFGL_API void btews_dippin_Update(BTEWS_WireNode *self, double dt);
BTEIFGL_API void btews_dipcore_Update(BTEWS_WireNode *self, double dt);
BTEIFGL_API void btews_dip14_Draw(BTEWS_WireNode *self,float x0, float y0, float x1, float y1);
BTEIFGL_API void btews_dip14_Place(BTEWS_Component *self,BTEWS_WireGrid *grid, int x, int y);
//AHSRC:btews/btws_grid.c
BTEIFGL_API BTEWS_Component *BTEWS_LookupComponent(char *name);
BTEIFGL_API BTEWS_Component *BTEWS_GetComponent(char *name);
BTEIFGL_API BTEWS_WireGrid *BTEWS_AllocGrid(int xs, int ys);
BTEIFGL_API BTEWS_WireNode *BTEWS_GetNode(BTEWS_WireGrid *grid,int x, int y);
BTEIFGL_API BTEWS_WireNode *BTEWS_GetAllocNode(BTEWS_WireGrid *grid,int x, int y);
BTEIFGL_API int BTEWS_CheckEmptyNode(BTEWS_WireGrid *grid,int x, int y);
BTEIFGL_API void BTEWS_DeleteNode2(BTEWS_WireGrid *grid,int x, int y);
BTEIFGL_API void BTEWS_DeleteNode(BTEWS_WireGrid *grid,int x, int y);
BTEIFGL_API void BTEWS_DrawGrid(BTEWS_WireGrid *grid,float xo, float yo, float xsc, float ysc);
BTEIFGL_API void BTEWS_AddNodeLive(BTEWS_WireGrid *grid,BTEWS_WireNode *node);
BTEIFGL_API void BTEWS_MarkNodeDirty(BTEWS_WireGrid *grid,int x, int y);
BTEIFGL_API void BTEWS_MarkNodeDirtyStar(BTEWS_WireGrid *grid,int x, int y);
BTEIFGL_API void BTEWS_UpdateGridStep(BTEWS_WireGrid *grid, double dt);
BTEIFGL_API void BTEWS_UpdateGrid(BTEWS_WireGrid *grid, double dt);
BTEIFGL_API bool BTEWS_NodeIsWireJoin(BTEWS_WireGrid *grid,BTEWS_WireNode *self);
BTEIFGL_API void BTEWS_SpreadGridWireWid(BTEWS_WireGrid *grid,BTEWS_WireNode *self);
BTEIFGL_API void BTEWS_RebuildGridWireLinks(BTEWS_WireGrid *grid, BTEWS_WireNode *self);
BTEIFGL_API void BTEWS_FlushGridNetWires(BTEWS_WireGrid *grid);
BTEIFGL_API void BTEWS_RebuildGridWid(BTEWS_WireGrid *grid);
//AHSRC:btews/btws_netnode.c
BTEIFGL_API BTEWS_NetWire *BTEWS_AllocNetWireNode(BTEWS_WireGrid *grid);
BTEIFGL_API BTEWS_NetWire *BTEWS_LookupNetWireNode(BTEWS_WireGrid *grid, int wid);
BTEIFGL_API BTEWS_NetWire *BTEWS_GetNetWireNode(BTEWS_WireGrid *grid, int wid);
BTEIFGL_API BTEWS_NetComponent *BTEWS_AllocNetComponentNode(BTEWS_WireGrid *grid);
BTEIFGL_API BTEWS_NetComponent *BTEWS_LookupNetComponentNode(BTEWS_WireGrid *grid, int cid);
BTEIFGL_API BTEWS_NetComponent *BTEWS_GetNetComponentNode(BTEWS_WireGrid *grid, int cid);
//AHSRC:btews/btws_resistor.c
void btews_resistor_UpdatePin(BTEWS_WireNode *self, double dt);
void btews_resistor_UpdateDigital(BTEWS_WireNode *self, double dt);
void btews_resistor_Update(BTEWS_WireNode *self, double dt);
void btews_resistor_Draw(BTEWS_WireNode *self,float x0, float y0, float x1, float y1);
BTEIFGL_API void btews_resistor_Place(BTEWS_Component *self,BTEWS_WireGrid *grid, int x, int y);
//AHSRC:btews/btws_transistor.c
BTEIFGL_API void btews_transistor_Update(BTEWS_WireNode *self, double dt);
BTEIFGL_API void btews_transistor_Draw(BTEWS_WireNode *self,float x0, float y0, float x1, float y1);
BTEIFGL_API void btews_transistor_Place(BTEWS_Component *self,BTEWS_WireGrid *grid, int x, int y);
//AHSRC:btews/btws_wire.c
char *btews_wire_Describe(BTEWS_WireNode *self);
char *btews_wire_DescribeDigital(BTEWS_WireNode *self);
BTEIFGL_API int btews_wire_checkConnect(BTEWS_WireNode *self,BTEWS_WireNode *other);
BTEIFGL_API int btews_wire_MouseXY(BTEWS_WireNode *self,float x0, float y0, float x1, float y1);
BTEIFGL_API void BTEWS_Wire_ColorForVoltage(BTEWS_WireNode *self, double v);
BTEIFGL_API void btews_wire_Draw(BTEWS_WireNode *self,float x0, float y0, float x1, float y1);
BTEIFGL_API void btews_wire_UpdateAdjacent(BTEWS_WireNode *self);
void btews_wire_DigitalPick(BTEWS_WireNode *self, BTEWS_WireNode *other,int *rdg, int adg, int *rsrc, int smsk);
BTEIFGL_API void btews_wire_UpdateDigital(BTEWS_WireNode *self, double dt);
BTEIFGL_API void btews_wire_Update(BTEWS_WireNode *self, double dt);
BTEIFGL_API void btews_wire_Place(BTEWS_Component *self,BTEWS_WireGrid *grid, int x, int y);
BTEIFGL_API void btews_wire_PlaceDigital(BTEWS_Component *self,BTEWS_WireGrid *grid, int x, int y);
//AHSRC:btews/msp430i/mspi_interp.c
void *msp430_malloc(int sz);
BTEIFGL_API MSP430_Context *MSP430_AllocContext(void);
BTEIFGL_API MSP430_Context *MSP430_NewContext(int ty, int szRam, int szRom);
int msp430_readHexDigit(char ch);
int msp430_readHexNibble(char **rcs);
int msp430_readHexByte(char **rcs);
int msp430_readHexWord(char **rcs);
int msp430_readHexDWord(char **rcs);
BTEIFGL_API double MSP430_GetCurrentMHz(MSP430_Context *ctx);
BTEIFGL_API int MSP430_GetCurrentMips(MSP430_Context *ctx);
BTEIFGL_API double MSP430_GetCurrentAvgMips(MSP430_Context *ctx);
BTEIFGL_API int MSP430_GetOutputPinRunning(MSP430_Context *ctx);
BTEIFGL_API int MSP430_DecodeIHex(MSP430_Context *ctx, char *ibuf, int szBuf);
BTEIFGL_API int MSP430_LoadIHex(MSP430_Context *ctx, char *fname);
BTEIFGL_API char *MSP430_LookupMapSymbol(MSP430_Context *ctx, int addr, int *rbase);
BTEIFGL_API int MSP430_AddMapSymbol(MSP430_Context *ctx, char *sym, int addr);
BTEIFGL_API int MSP430_DecodeMap(MSP430_Context *ctx, char *ibuf, int szBuf);
BTEIFGL_API int MSP430_LoadMap(MSP430_Context *ctx, char *fname);
BTEIFGL_API int MSP430_FlushICache(MSP430_Context *ctx);
BTEIFGL_API int MSP430_Reset(MSP430_Context *ctx);
BTEIFGL_API int MSP430_Run(MSP430_Context *ctx);
BTEIFGL_API int MSP430_RunCount(MSP430_Context *ctx, int cnt);
BTEIFGL_API int MSP430_Push(MSP430_Context *ctx, int val);
BTEIFGL_API int MSP430_Interupt(MSP430_Context *ctx, int inum);
BTEIFGL_API int MSP430_UpdatePeri(MSP430_Context *ctx);
BTEIFGL_API int MSP430_PinInputVoltage(MSP430_Context *ctx,int inum, float val);
//AHSRC:btews/msp430i/mspi_mmu.c
int MSP430_VaReadByte(MSP430_Context *ctx, int addr);
int MSP430_VaWriteByte(MSP430_Context *ctx, int addr, int val);
int MSP430_VaReadWord(MSP430_Context *ctx, int addr);
int MSP430_VaWriteWord(MSP430_Context *ctx, int addr, int val);
int MSP430_VaReadWordSP(MSP430_Context *ctx, int addr);
int MSP430_VaWriteWordSP(MSP430_Context *ctx, int addr, int val);
int MSP430_VaReadWordPC(MSP430_Context *ctx, int addr);
int MSP430_GetRegB(MSP430_Context *ctx, int reg);
int MSP430_VaAddrIsRomP(MSP430_Context *ctx, int addr);
//AHSRC:btews/msp430i/mspi_oparith.c
MSP430_Opcode *MSP430_OpMovRRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpMovRRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpMovRIW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpMovMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpMovMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddRRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddRRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddRIW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddRIB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddPcRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddPcMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddRRW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddRRB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddRIW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddRIB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddMW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddMB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddcRRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddcRRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddcRIW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddcRIB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddcMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddcMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddcRRW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddcRRB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddcRIW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddcRIB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubRRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubRRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubRIW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubRIB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubRRW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubRRB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubRIW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubRIB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubcRRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubcRRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubcRIW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubcRIB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubcMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubcMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubcRRW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubcRRB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubcRIW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubcRIB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpCmpRRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpCmpRRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpCmpRIW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpCmpRIB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpCmpMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpCmpMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBitRRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBitRRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBitRIW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBitRIB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBitMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBitMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBicRRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBicRRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBicRIW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBicRIB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBicMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBicMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBisRRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBisRRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBisRIW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBisRIB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBisMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBisMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpXorRRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpXorRRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpXorRIW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpXorRIB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpXorMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpXorMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpXorRRW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpXorRRB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpXorRIW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpXorRIB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAndRRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAndRRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAndRIW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAndRIB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAndMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAndMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAndRRW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAndRRB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAndRIW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAndRIB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
//AHSRC:btews/msp430i/mspi_opcode.c
MSP430_Opcode *MSP430_AllocOpcode(MSP430_Context *ctx);
MSP430_Opcode *MSP430_LookupOpcode(MSP430_Context *ctx, int addr);
MSP430_Opcode *MSP430_GetOpcode(MSP430_Context *ctx, int addr);
MSP430_Opcode *MSP430_LookupHashOpcode(MSP430_Context *ctx, int addr);
int MSP430_GetOpMemDestI(MSP430_Context *ctx, MSP430_Opcode *op);
int MSP430_GetOpMemSrcI(MSP430_Context *ctx, MSP430_Opcode *op);
int MSP430_GetOpMemDest(MSP430_Context *ctx, MSP430_Opcode *op);
int MSP430_GetOpMemDestValueByte(MSP430_Context *ctx, MSP430_Opcode *op);
int MSP430_GetOpMemDestValueWord(MSP430_Context *ctx, MSP430_Opcode *op);
int MSP430_GetOpMemSrcValueByte(MSP430_Context *ctx, MSP430_Opcode *op);
int MSP430_GetOpMemSrcValueWord(MSP430_Context *ctx, MSP430_Opcode *op);
void MSP430_UpdateStatusW(MSP430_Context *ctx, int a, int b, int k);
void MSP430_UpdateStatusB(MSP430_Context *ctx, int a, int b, int k);
MSP430_Opcode *MSP430_OpTrapInv(MSP430_Context *ctx, MSP430_Opcode *op);
void MSP430_DecodeOpcodeArgsUOp(MSP430_Context *ctx,MSP430_Opcode *cur, int opn, int *raddr);
void MSP430_DecodeOpcodeArgsBinOp(MSP430_Context *ctx,MSP430_Opcode *cur, int opn, int *raddr);
void MSP430_DecodeOpcode_ClobberLSR(MSP430_Context *ctx,MSP430_Opcode *cur);
void MSP430_DecodeOpcode_CopyValues(MSP430_Context *ctx,MSP430_Opcode *dop, MSP430_Opcode *sop);
int MSP430_DecodeOpcodeI(MSP430_Context *ctx,MSP430_Opcode *cur, int opn, int *raddr);
MSP430_Opcode *MSP430_DecodeOpcode(MSP430_Context *ctx, int *raddr);
MSP430_Opcode *MSP430_DirectInterpOpcode(MSP430_Context *ctx,MSP430_Opcode *cur);
MSP430_Opcode *MSP430_GetDecodeOpcode(MSP430_Context *ctx, int addr);
MSP430_Opcode *MSP430_GetDecodeRomOpcode(MSP430_Context *ctx, int addr);
char *MSP430_DumpOpcode_NameForOp(MSP430_Context *ctx, MSP430_Opcode *cur);
char *MSP430_DumpOpcode_NameForReg(MSP430_Context *ctx, int reg);
void MSP430_DumpOpcode_Param(MSP430_Context *ctx, MSP430_Opcode *cur,int fl, int reg, int offs);
void MSP430_DumpOpcode(MSP430_Context *ctx, MSP430_Opcode *cur);
//AHSRC:btews/msp430i/mspi_opmisc.c
MSP430_Opcode *MSP430_OpRrcRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpRrcRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpRrcMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpRrcMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSwpbRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSwpbMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpRraRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpRraRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpRraMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpRraMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSxtRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSxtMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpPushRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpPushRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpPushMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpPushMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpPopRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpPopRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpCallRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpCallMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpCallIW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBrMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpRet(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpReti(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJmp(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJne(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJeq(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJnc(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJc(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJn(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJge(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJl(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpRepI(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpRepR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJmpDi(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJneDi(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJeqDi(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJncDi(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJcDi(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJnDi(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJgeDi(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJlDi(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpCallDiMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpRetiDi(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpRetDi(MSP430_Context *ctx, MSP430_Opcode *op);
//AHSRC:fastbcn/bcn_bitstream.c
void BGBBTJ_BitsLE_Clear(BGBBTJ_BitStream *ctx);
void BGBBTJ_BitsLE_SetupWrite(BGBBTJ_BitStream *ctx, byte *ct, int sz);
void BGBBTJ_BitsLE_ClearSetupWrite(BGBBTJ_BitStream *ctx, byte *ct, int sz);
void BGBBTJ_BitsLE_WriteBits(BGBBTJ_BitStream *ctx, int v, int n);
void BGBBTJ_BitsLE_WriteBit(BGBBTJ_BitStream *ctx, int v);
void BGBBTJ_BitsLE_Write2Bits(BGBBTJ_BitStream *ctx, int v);
void BGBBTJ_BitsLE_Write3Bits(BGBBTJ_BitStream *ctx, int v);
void BGBBTJ_BitsLE_Write4Bits(BGBBTJ_BitStream *ctx, int v);
void BGBBTJ_BitsLE_Write5Bits(BGBBTJ_BitStream *ctx, int v);
void BGBBTJ_BitsLE_Write6Bits(BGBBTJ_BitStream *ctx, int v);
void BGBBTJ_BitsLE_Write7Bits(BGBBTJ_BitStream *ctx, int v);
void BGBBTJ_BitsLE_Write12Bits(BGBBTJ_BitStream *ctx, int v);
void BGBBTJ_BitsLE_Write8Bits(BGBBTJ_BitStream *ctx, int v);
void BGBBTJ_BitsLE_Write16Bits(BGBBTJ_BitStream *ctx, int v);
void BGBBTJ_BitsLE_FlushBits(BGBBTJ_BitStream *ctx);
void BGBBTJ_BitsLE_SetupRead(BGBBTJ_BitStream *ctx, byte *cs, int sz);
void BGBBTJ_BitsLE_ClearSetupRead(BGBBTJ_BitStream *ctx, byte *ct, int sz);
int BGBBTJ_BitsLE_ReadBits(BGBBTJ_BitStream *ctx, int n);
int BGBBTJ_BitsLE_ReadBit(BGBBTJ_BitStream *ctx);
int BGBBTJ_BitsLE_Read2Bits(BGBBTJ_BitStream *ctx);
int BGBBTJ_BitsLE_Read7Bits(BGBBTJ_BitStream *ctx);
int BGBBTJ_BitsLE_Read8Bits(BGBBTJ_BitStream *ctx);
int BGBBTJ_BitsLE_Read3Bits(BGBBTJ_BitStream *ctx);
int BGBBTJ_BitsLE_Read4Bits(BGBBTJ_BitStream *ctx);
int BGBBTJ_BitsLE_Read5Bits(BGBBTJ_BitStream *ctx);
int BGBBTJ_BitsLE_Read6Bits(BGBBTJ_BitStream *ctx);
int BGBBTJ_BitsLE_Read14Bits(BGBBTJ_BitStream *ctx);
int BGBBTJ_BitsLE_Read16Bits(BGBBTJ_BitStream *ctx);
int BGBBTJ_BitsLE_Peek8Bits(BGBBTJ_BitStream *ctx);
//AHSRC:fastbcn/bc7_common.c
int bgbbtj_bc7_bitcnt8(int i);
int bgbbtj_bc7_bitcnt16(int i);
int BGBBTJ_BC7_PartitionInit(void);
int BGBBTJ_BC7_CalcBlockError(byte *rgba0, int xstride0, int ystride0, byte *rgba1, int xstride1, int ystride1);
//AHSRC:fastbcn/bc7_blkdec.c
int BGBBTJ_BC7_DecodeBlock_ReadMode(BGBBTJ_BitStream *bits);
int bgbbtj_bc7_interpolate(int e0, int e1, int idx, int prec);
void BGBBTJ_BC7_DecodeBlock_Mode4(BGBBTJ_BitStream *bits, byte *rgba, int xstride, int ystride, int flags);
void BGBBTJ_BC7_DecodeBlock_Mode5(BGBBTJ_BitStream *bits, byte *rgba, int xstride, int ystride, int flags);
void BGBBTJ_BC7_DecodeBlock_Mode6(BGBBTJ_BitStream *bits, byte *rgba, int xstride, int ystride, int flags);
void BGBBTJ_BC7_DecodeBlock_Mode0(BGBBTJ_BitStream *bits, byte *rgba, int xstride, int ystride, int flags);
void BGBBTJ_BC7_DecodeBlock_Mode1(BGBBTJ_BitStream *bits, byte *rgba, int xstride, int ystride, int flags);
void BGBBTJ_BC7_DecodeBlock_Mode2(BGBBTJ_BitStream *bits, byte *rgba, int xstride, int ystride, int flags);
void BGBBTJ_BC7_DecodeBlock_Mode3(BGBBTJ_BitStream *bits, byte *rgba, int xstride, int ystride, int flags);
void BGBBTJ_BC7_DecodeBlock_Mode7(BGBBTJ_BitStream *bits, byte *rgba, int xstride, int ystride, int flags);
void BGBBTJ_BC7_DecodeBlock_Default(BGBBTJ_BitStream *bits, byte *rgba, int xstride, int ystride, int flags);
int BGBBTJ_BC7_GetBlockMode(byte *block);
void BGBBTJ_BC7_DecodeBlock(byte *block,byte *rgba, int xstride, int ystride, int flags);
void BGBBTJ_BC7_DecodeBlockEdge(byte *block,byte *rgba, int xstride, int ystride, int xfrac, int yfrac, int pfb);
void BGBBTJ_BC7_DecodeImageBC7I(byte *block,byte *rgba, int xs, int ys, int stride, int pfb);
void BGBBTJ_BC7_DecodeImageBC7(byte *block,byte *rgba, int xs, int ys, int stride);
void BGBBTJ_BC7_DecodeImageBC7_BGRA(byte *block,byte *rgba, int xs, int ys, int stride);
//AHSRC:fastbcn/bc7_filter_cmy.c
void BGBBTJ_BC7_EncodeBlock_SplitMinMaxClrYA(byte *pxy, byte *pxy2, byte *pxa, int *min_rgba, int *max_rgba, int *rmcy, int *rncy, int *rmca, int *rnca, int *rpartn, byte *rgba, int xstride, int ystride, int pfb);
//AHSRC:fastbcn/bc7_filter_yuv.c
int clamp15(int i);
int clamp31(int i);
int btic1h_subfold(int a, int b);
void BT1H_EncodeBlockFilt_YUYV(byte *pxy,	byte *pxu,	byte *pxv, byte *pxa, byte *pmcy,	byte *pncy,	byte *pmca,	byte *pnca, byte *yuv, int xstride, int ystride);
void BT1H_EncodeBlockFilt_Yuva4204(byte *pxy,	byte *pxu,	byte *pxv, byte *pxa, byte *pmcy,	byte *pncy,	byte *pmca,	byte *pnca, byte *ybuf, byte *ubuf, byte *vbuf, byte *abuf, int xystride, int yystride, int xustride, int yustride, int pfb);
void BT1H_EncodeBlockFilt_RGBI(byte *pxy,	byte *pxu,	byte *pxv, byte *pxa, byte *pmcy,	byte *pncy,	byte *pmca,	byte *pnca, byte *rgb, int xstride, int ystride, int tflip);
void BGBBTJ_BC7_EncodeBlock_SplitMinMaxClrYA2(byte *pxy, byte *pxy2, byte *pxa, int *min_rgba, int *max_rgba, int *rmcy, int *rncy, int *rmca, int *rnca, int *rpartn, byte *rgba, int xstride, int ystride, int pfb);
void BGBBTJ_BC7_EncodeBlock_SplitMinMaxClrYA2_Yuva4204(byte *pxy, byte *pxy2, byte *pxa, int *min_rgba, int *max_rgba, int *rmcy, int *rncy, int *rmca, int *rnca, int *rpartn, byte *ybuf, byte *ubuf, byte *vbuf, byte *abuf, int xystride, int yystride, int xustride, int yustride, int pfb);
//AHSRC:fastbcn/bc7_blkenc.c
void BGBBTJ_BC7_EncodeBlock_VecSwapRGB(int *clra, int *clrb);
void BGBBTJ_BC7_EncodeBlock_VecSwapRGBA(int *clra, int *clrb);
void BGBBTJ_BC7_EncodeBlock_VecSwapR(int *clra, int *clrb);
void BGBBTJ_BC7_EncodeBlock_VecSwapG(int *clra, int *clrb);
void BGBBTJ_BC7_EncodeBlock_VecSwapB(int *clra, int *clrb);
void BGBBTJ_BC7_EncodeBlock_VecSwapA(int *clra, int *clrb);
void BGBBTJ_BC7_EncodeBlock_VecInvertPixels(byte *pxv, int n, int min, int max);
void BGBBTJ_BC7_EncodeBlock_Mode4(byte *block,byte *pxy, byte *pxa, int *min, int *max, int mcy, int ncy, int mca, int nca);
void BGBBTJ_BC7_EncodeBlock_Mode5(byte *block,byte *pxy, byte *pxa, int *min, int *max, int mcy, int ncy, int mca, int nca);
void BGBBTJ_BC7_EncodeBlock_Mode6(byte *block,byte *pxy, int *min, int *max, int mcy, int ncy);
void BGBBTJ_BC7_EncodeBlock_Mode1(byte *block,byte *pxy0, byte *pxy1, int *min, int *max, int *rmcy, int *rncy, int part);
void BGBBTJ_BC7_EncodeBlock_Mode3(byte *block,byte *pxy0, byte *pxy1, int *min, int *max, int *rmcy, int *rncy, int part);
void BGBBTJ_BC7_EncodeBlock_Mode7(byte *block,byte *pxy0, byte *pxy1, int *min, int *max, int *rmcy, int *rncy, int part);
void BGBBTJ_BC7_EncodeBlockI(byte *block,byte *pxy, byte *pxy2, byte *pxa, int *min, int *max, int *mcy, int *ncy, int mca, int nca, int pn);
void BGBBTJ_BC7_EncodeBlock(byte *block,byte *rgba, int xstride, int ystride, int pfb);
void BGBBTJ_BC7_EncodeBlockYuva4204(byte *block,byte *ybuf, byte *ubuf, byte *vbuf, byte *abuf, int xystride, int yystride, int xustride, int yustride, int pfb);
void BGBBTJ_BC7_EncodeBlockBest(byte *block,byte *rgba, int xstride, int ystride, int pfb);
void BGBBTJ_BC7_EncodeBlockEdge(byte *block,byte *rgba, int xstride, int ystride, int xfrac, int yfrac, int pfb);
void BGBBTJ_BC7_EncodeBlockEdgeYuva4204(byte *block,byte *ybuf, byte *ubuf, byte *vbuf, byte *abuf, int xystride, int yystride, int xustride, int yustride, int xfrac, int yfrac, int pfb);
void BGBBTJ_BC7_EncodeImageBestBC7(byte *block,byte *rgba, int xs, int ys, int stride, int pfb);
void BGBBTJ_BC7_StatImageBC7(byte *block,int xs, int ys);
void BGBBTJ_BC7_EncodeImageMipHalfSample(byte *obuf, byte *ibuf, int xs, int ys, int xstr, int pfb);
void BGBBTJ_BC7_EncodeImageMipBC7(byte *block,byte *ibuf, int xs, int ys, int xstr, int pfb);
void BGBBTJ_BC7_EncodeImageYuvaBC7(byte *block,byte *ybuf,	byte *ubuf,	byte *vbuf,	byte *abuf, int xs, int ys, int xystr, int xustr, int pfb);
void BGBBTJ_BC7_EncodeImagePlaneMipHalfSample(byte *oybuf, byte *iybuf, int xs, int ys);
void BGBBTJ_BC7_EncodeImageMipYuvaBC7(byte *block,byte *ybuf,	byte *ubuf,	byte *vbuf,	byte *abuf, int xs, int ys, int xystr, int xustr, int pfb);
//AHSRC:fastbcn/bc7_blkenc_p2.c
void BGBBTJ_BC7_EncodeBlock_VecInvertPixels_Part2A(byte *pxv, int n, int min, int max, int part);
void BGBBTJ_BC7_EncodeBlock_VecInvertPixels_Part2B(byte *pxv, int n, int min, int max, int part);
void BGBBTJ_BC7_EncodeBlock_Mode1(byte *block,byte *pxy0, byte *pxy1, int *min, int *max, int *rmcy, int *rncy, int part);
void BGBBTJ_BC7_EncodeBlock_Mode3(byte *block,byte *pxy0, byte *pxy1, int *min, int *max, int *rmcy, int *rncy, int part);
void BGBBTJ_BC7_EncodeBlock_Mode7(byte *block,byte *pxy0, byte *pxy1, int *min, int *max, int *rmcy, int *rncy, int part);
//AHSRC:fastbcn/bcn_s2blkenc.c
void BGBBTJ_BCn_InitDither_S2TCB(void);
void BGBBTJ_BCn_EncodeBlockI_S2TC(byte *block,byte *pxy, int *min, int *max, int mcy, int ncy);
void BGBBTJ_BCn_EncodeBlockI_S2TCB(byte *block,byte *pxy, byte *pxa, int *min, int *max, int mcy, int ncy, int mca, int nca);
void BGBBTJ_BCn_EncodeAlphaBlockI_S2TC(byte *block,byte *pxa, int mca, int nca);
void BGBBTJ_BCn_EncodeAlphaBlock2I_S2TC(byte *block,byte *pxa, int mca, int nca);
void BGBBTJ_BC7_EncodeBlockBCnI(byte *block, int bcf,byte *pxy, byte *pxy2, byte *pxa, int *min, int *max, int *mcy, int *ncy, int mca, int nca, int pn);
void BGBBTJ_BCn_EncodeBlockBCn(byte *block, int bcf,byte *rgba, int xstride, int ystride, int pfb);
void BGBBTJ_BCn_EncodeBlockBCnYuva4204(byte *block, int bcf,byte *ybuf, byte *ubuf, byte *vbuf, byte *abuf, int xystride, int yystride, int xustride, int yustride, int pfb);
int BGBBTJ_BCn_GetBlockStride(int bcf);
void BGBBTJ_BCn_EncodeBlockEdgeBCn(byte *block, int bcf,byte *rgba, int xstride, int ystride, int xfrac, int yfrac, int pfb);
void BGBBTJ_BCn_EncodeImageBCnI(byte *block, int bcf,byte *rgba, int xs, int ys, int stride, int pfb);
void BGBBTJ_BCn_EncodeImageBCn(byte *block, int bcf,byte *rgba, int xs, int ys, int pfb);
int BGBBTJ_BCn_MapPxfToBcf(int pxf);
void BGBBTJ_BCn_EncodeImagePxfBCn(byte *block, int pxf,byte *rgba, int xs, int ys, int pfb);
//AHSRC:fastbcn/bcn_s2blkdec.c
void BGBBTJ_S2TC_DecodeBlockRGBA(byte *block,byte *rgba, int xstride, int ystride, int pfb);
void BGBBTJ_S2TC_DecodeBlockBC2A(byte *block,byte *rgba, int xstride, int ystride, int pfb);
void BGBBTJ_S2TC_DecodeBlockBC4(byte *block,byte *rgba, int xstride, int ystride, int pfb);
void BGBBTJ_BCn_DecodeBlock(byte *block, int bcf,byte *rgba, int xstride, int ystride, int pfb);
void BGBBTJ_BCn_DecodeBlockEdge(byte *block, int bcf,byte *rgba, int xstride, int ystride, int xfrac, int yfrac, int pfb);
void BGBBTJ_BCn_DecodeImageBCnI(byte *block, int bcf,byte *rgba, int xs, int ys, int stride, int pfb);
void BGBBTJ_BCn_DecodeImageBCn(byte *block, int bcf,byte *rgba, int xs, int ys, int pfb);
//AHSRC:fastbcn/bcn_decjpg.c
PDJPG_Context *PDJPG_AllocContext();
void PDJPG_FreeContext(PDJPG_Context *ctx);
PDJPG_Context *PDJPG_AllocPoolContext();
void PDJPG_FreePoolContext(PDJPG_Context *ctx);
void PDJPG_Init();
void PDJPG_TransIDCT_Horiz(int *iblk, int *oblk);
void PDJPG_TransIDCT_Vert(int *iblk, int *oblk);
void BGBBTJ_JPG_TransIDCT_Vert2(int *iblk, int *oblk, int dcbias);
void PDJPG_TransIDCT(int *iblk, int *oblk, int dcbias, int rtm);
void PDJPG_TransIRDCT_Horiz(int *iblk, int *oblk);
void PDJPG_TransIRDCT_Vert(int *iblk, int *oblk);
void PDJPG_TransIRDCT(int *iblk, int *oblk, int dcbias, int rtm);
int PDJHUFF_NextByte(PDJPG_Context *ctx);
int PDJHUFF_InitStream(PDJPG_Context *ctx, byte *buf);
int PDJHUFF_ReadBit(PDJPG_Context *ctx);
int PDJHUFF_ReadNBits(PDJPG_Context *ctx, int n);
void PDJHUFF_SkipNBits(PDJPG_Context *ctx, int n);
int PDJHUFF_PeekWord(PDJPG_Context *ctx);
int PDJHUFF_DecodeSymbol(PDJPG_Context *ctx, int tab);
int PDJHUFF_DecodeDiffDC(PDJPG_Context *ctx, int tab);
int PDJHUFF_DecodeBlock(PDJPG_Context *ctx,int *buf, int dctab, int actab, int qid, int ni, int nn);
void PDJPG_CopyOutBlock8B(PDJPG_Context *ctx, int *ibuf, byte *obuf, int xs, int ys, int x, int y);
int PDJPG_MarkerSOS(PDJPG_Context *ctx, byte *buf);
int PDJPG_MarkerSOF0(PDJPG_Context *ctx, byte *buf);
int PDJPG_MarkerDQT(PDJPG_Context *ctx, byte *buf);
int PDJPG_MarkerDHT(PDJPG_Context *ctx, byte *buf);
int PDJPG_MarkerAPP0(PDJPG_Context *ctx, byte *buf);
int PDJPG_MarkerAPP9(PDJPG_Context *ctx, byte *buf);
int PDJPG_MarkerAPP11(PDJPG_Context *ctx, byte *buf);
int PDJPG_MarkerAPP12(PDJPG_Context *ctx, byte *buf);
int PDJPG_MarkerAPP14(PDJPG_Context *ctx, byte *buf);
int PDJPG_MarkerAPPN(PDJPG_Context *ctx, byte *buf);
int PDJPG_DecodeColorTransformYCbCr420(PDJPG_Context *ctx, byte *obuf);
int PDJPG_DecodeCtxInner(PDJPG_Context *ctx,byte *buf, int sz, int *xs, int *ys);
int PDJPG_GetImageYUVA420(PDJPG_Context *ctx,byte *ybuf, byte *ubuf, byte *vbuf, byte *abuf, int xs, int ys);
int PDJPG_GetImagePlaneYUVA420(PDJPG_Context *ctx,byte *yuva, int xs, int ys);
int PDJPG_GetImageRGBA(PDJPG_Context *ctx,byte *rgba, int xs, int ys);
void PDJPG_Free(byte *buf);
BTEIFGL_API byte *PDJPG_DecodeScanForComponentLayer(byte *buf, int sz, char *name);
BTEIFGL_API int PDJPG_DecodeBasic(PDJPG_Context *ctx,byte *buf, int sz, int *rxs, int *rys);
int PDJPG_EscapeDecodeBuffer(byte *ibuf, int isz,byte *obuf, int osz);
int PDJPG_EscapeDecodeSingleBuffer(byte *buf, int sz);
int PDJPG_DecodeLDatCtx(PDJPG_Context *ctx,byte *buf, int sz, int *xs, int *ys);
//AHSRC:fastbcn/bcn_encjpg.c
PDJPG_Context *PDJPG_AllocContext();
void PDJPG_FreeContext(PDJPG_Context *ctx);
void PDJPG_TransDCT_Horiz(byte *iblk, int *oblk);
void PDJPG_TransDCT_Vert(int *iblk, int *oblk);
void PDJPG_TransDCT(byte *iblk, short *oblk);
int pdjpg_abslog2up(int v);
void PDJHUFF_QuantBlock(PDJPG_Context *ctx, short *ibuf, short *obuf, int qid);
void PDJPG_SetupQuantTabDivFP(PDJPG_Context *ctx, int qid);
void PDJHUFF_WriteBit(PDJPG_Context *ctx, int i);
void PDJHUFF_WriteNBits(PDJPG_Context *ctx, int v, int n);
void PDJHUFF_FlushBits(PDJPG_Context *ctx);
void PDJHUFF_WriteString(PDJPG_Context *ctx, char *str);
int PDJHUFF_BalanceTree_r(short *nodes, short *nlen, int root, int h, int ml);
void PDJHUFF_CalcLengths_r(short *nodes, byte *cl, int root, int h);
int PDJHUFF_BuildLengths(int *stat, int nc, byte *cl, int ml);
void PDJHUFF_BuildLengthsAdjust(int *stat, int nc, byte *cl, int ml);
void PDJHUFF_EncodeSymbol(PDJPG_Context *ctx, int tab, int v);
void PDJHUFF_EncodeVal(PDJPG_Context *ctx, int tab, int z, int v);
void PDJHUFF_StatVal(int *stat, int z, int v);
void PDJHUFF_EncodeBlock(PDJPG_Context *ctx,short *buf, int dctab, int actab);
void PDJHUFF_StatBlock(short *buf, int *dcstat, int *acstat);
void PDJPG_GetImgBlk(byte *blk, int xo, int yo, byte *img, int xs, int ys);
void PDJPG_FilterImageDCT(byte *ibuf, short *obuf, int xs, int ys);
void PDJPG_EmitDQT(PDJPG_Context *ctx, int n);
void PDJPG_EmitSOF(PDJPG_Context *ctx, int xs, int ys);
void PDJPG_EmitSOS(PDJPG_Context *ctx);
void PDJPG_EmitDHT(PDJPG_Context *ctx, int tab);
void PDJPG_MakeQuantTabFastIJG_Y(short *inv, int cnt, byte *tab, float qf);
void PDJPG_MakeQuantTabFastIJG_UV(short *inv, int cnt, byte *tab, float qf);
void PDJPG_MakeQuantTabInput(short *inv, int cnt, byte *tab, float q);
void PDJPG_MakeQuantTabInputY(short *inv, int cnt, byte *tab, float q);
void PDJPG_MakeQuantTabInputUV(short *inv, int cnt, byte *tab, float q);
void PDJPG_MakeQuantTabInput_AA(short *in, int cnt, byte *tab, float q);
void PDJPG_MakeQuantTabInputFast(short *in, int cnt, byte *tab, float q);
int PDJPG_EncodeCtx(PDJPG_Context *ctx, byte *ibuf, byte *obuf, int xs, int ys, int qf, int pf);
PDJPG_Context *PDJPG_AllocContext();
void PDJPG_FreeContext(PDJPG_Context *ctx);
int PDJPG_Encode(byte *ibuf, byte *obuf, int xs, int ys, int qf);
void PDJPG_FlushEncodeFast(PDJPG_Context *ctx);
void PDJPG_ConvertImageYUV(PDJPG_Context *ctx,byte *ibuf, int xs, int ys, int pf, int xs2, int ys2, int xs3, int ys3);
int PDJPG_EncodeFastCtx(PDJPG_Context *ctx,byte *ibuf, byte *obuf, int xs, int ys, int qf, int pf);
int PDJPG_EncodeFast(byte *ibuf, byte *obuf, int xs, int ys, int qf);
byte *PDJPG_EmitComponentLayer(PDJPG_Context *ctx,byte *ct, char *name);
int PDJPG_EscapeEncodeBuffer(byte *ibuf, int isz,byte *obuf, int osz);
int PDJPG_EscapeEncodeSingleBuffer(byte *buf, int sz);
int PDJPG_EncodeLDatCtx(PDJPG_Context *ctx, byte *ibuf, byte *obuf, int xs, int ys, int qf, int pf);
int PDJPG_EncodeComponentCtx(PDJPG_Context *ctx, byte *rgba, byte *norm, byte *spec, byte *luma, byte *obuf, int xs, int ys, int qf);
int PDJPG_EncodeComponent(byte *rgba, byte *norm, byte *spec, byte *luma, byte *obuf, int xs, int ys, int qf);
BTEIFGL_API int PDJPG_EncodeRgbaCtx(PDJPG_Context *ctx, byte *rgba, byte *obuf, int xs, int ys, int qf);
BTEIFGL_API int PDJPG_EncodeClrsCtx(PDJPG_Context *ctx, byte *rgba, byte *obuf, int xs, int ys, int qf, int pf);
BTEIFGL_API int PDJPG_EncodeRgba(byte *rgba, byte *obuf, int xs, int ys, int qf);
BTEIFGL_API int PDJPG_EncodeClrs(byte *rgba, byte *obuf, int xs, int ys, int qf, int pf);
//AHSRC:fastbcn/bcn_bt1h_common.c
BTIC1H_Context *BTIC1H_AllocContext(void);
int BTIC1H_DestroyContext(BTIC1H_Context *ctx);
void BTIC1H_SetupContextInitial(BTIC1H_Context *ctx);
void BTIC1H_SetupDecodeContextInitial(BTIC1H_Context *ctx);
//AHSRC:fastbcn/bcn_bt1h_decrice.c
int BTIC1H_Rice_InitTables();
int BTIC1H_Rice_NextByteBasic(BTIC1H_Context *ctx);
int BTIC1H_Rice_NextByteBasic(BTIC1H_Context *ctx);
int BTIC1H_Rice_ReadNBitsBasic(BTIC1H_Context *ctx, int n);
int BTIC1H_Rice_Read8BitsBasic(BTIC1H_Context *ctx);
int BTIC1H_Rice_Read16BitsBasic(BTIC1H_Context *ctx);
void BTIC1H_Rice_SkipNBitsBasic(BTIC1H_Context *ctx, int n);
int BTIC1H_Rice_ReadAdRiceBasic(BTIC1H_Context *ctx, int *rk);
int BTIC1H_Rice_ReadAdSRiceBasic(BTIC1H_Context *ctx, int *rk);
int BTIC1H_Rice_ReadAdRiceDcBasic(BTIC1H_Context *ctx, int *rk);
int BTIC1H_Rice_ReadAdSRiceDcBasic(BTIC1H_Context *ctx, int *rk);
int BTIC1H_Rice_SetupRead(BTIC1H_Context *ctx, byte *buf, int szbuf);
int BTIC1H_Rice_ReadBit(BTIC1H_Context *ctx);
int BTIC1H_Rice_ReadNBitsBasic(BTIC1H_Context *ctx, int n);
int BTIC1H_Rice_Read4Bits(BTIC1H_Context *ctx);
int BTIC1H_Rice_Read8BitsBasic(BTIC1H_Context *ctx);
int BTIC1H_Rice_Read16BitsBasic(BTIC1H_Context *ctx);
int BTIC1H_Rice_Read16Bits(BTIC1H_Context *ctx);
u32 BTIC1H_Rice_Read24Bits(BTIC1H_Context *ctx);
u32 BTIC1H_Rice_Read32Bits(BTIC1H_Context *ctx);
u64 BTIC1H_Rice_Read48Bits(BTIC1H_Context *ctx);
void BTIC1H_Rice_SkipNBitsBasic(BTIC1H_Context *ctx, int n);
void BTIC1H_Rice_Skip8Bits(BTIC1H_Context *ctx);
int BTIC1H_Rice_PeekWord(BTIC1H_Context *ctx);
int BTIC1H_Rice_PeekNibble(BTIC1H_Context *ctx);
int BTIC1H_Rice_ReadRice(BTIC1H_Context *ctx, int k);
int BTIC1H_Rice_ReadAdRiceBasic(BTIC1H_Context *ctx, int *rk);
int BTIC1H_Rice_ReadAdSRiceBasic(BTIC1H_Context *ctx, int *rk);
int BTIC1H_DecodeReadVLI(BTIC1H_Context *ctx, byte **rcs);
int BTIC1H_Rice_SetupRead2(BTIC1H_Context *ctx, byte *buf, int szbuf);
//AHSRC:fastbcn/bcn_bt1h_blkdec_pyuv.c
void BTIC1H_DecodeBlockMB2B_Alpha(byte *block,byte *rgba, int xstride, int ystride, int tflip);
void BTIC1H_DecodeBlockMB2B_PYUV_PYUV(byte *block,byte *ybuf, byte *ubuf, byte *vbuf, int yystride, int yustride);
void BTIC1H_DecodeBlockMB2B_P420_PYUV(byte *block,byte *ybuf, byte *ubuf, byte *vbuf, int yystride, int yustride);
void BTIC1H_DecodeBlockMB2B_PYUV(byte *block,byte *ybuf, byte *ubuf, byte *vbuf, int yystride, int yustride);
void BTIC1H_DecodeImageMB2B_PYUV(byte *block, int blkstride,byte *ybuf, byte *ubuf, byte *vbuf, byte *abuf, int xs, int ys);
//AHSRC:fastbcn/bcn_bt1h_decode.c
int BTIC1H_ReadCommandCode(BTIC1H_Context *ctx);
int BTIC1H_ReadCommandCodeBase(BTIC1H_Context *ctx);
int BTIC1H_ReadCommandCodeSMTF(BTIC1H_Context *ctx);
int BTIC1H_ReadMaskCode(BTIC1H_Context *ctx);
void BTIC1H_DecodeDeltaYUV(BTIC1H_Context *ctx);
void BTIC1H_DecodeDeltaYUVD(BTIC1H_Context *ctx);
void BTIC1H_DecodeDeltaY(BTIC1H_Context *ctx);
void BTIC1H_DecodeDeltaUV(BTIC1H_Context *ctx);
void BTIC1H_DecodeDeltaYUVDyuv(BTIC1H_Context *ctx);
void BTIC1H_DecodeAbsYUV(BTIC1H_Context *ctx);
void BTIC1H_DecodeAbsY(BTIC1H_Context *ctx);
void BTIC1H_DecodeAbsUV(BTIC1H_Context *ctx);
void BTIC1H_DecodeAbsYUVD(BTIC1H_Context *ctx);
void BTIC1H_DecodeAbsYUVDyuv(BTIC1H_Context *ctx);
void BTIC1H_DecodeQfDeltaYUVD(BTIC1H_Context *ctx);
void BTIC1H_DecodeQfDeltaYUVDyuv(BTIC1H_Context *ctx);
void BTIC1H_DecodeQfAbsYUVD(BTIC1H_Context *ctx);
void BTIC1H_DecodeQfAbsYUVDyuv(BTIC1H_Context *ctx);
int BTIC1H_ReadPix8_2x2(BTIC1H_Context *ctx);
int BTIC1H_ReadPix8_2x1(BTIC1H_Context *ctx);
int BTIC1H_ReadPix8_1x2(BTIC1H_Context *ctx);
int BTIC1H_ReadPix16_4x4x1(BTIC1H_Context *ctx);
int BTIC1H_ReadPix16_2x2x1(BTIC1H_Context *ctx);
u32 BTIC1H_ReadPix32_4x4(BTIC1H_Context *ctx);
u32 BTIC1H_ReadPix32_4x2(BTIC1H_Context *ctx);
u32 BTIC1H_ReadPix32_2x4(BTIC1H_Context *ctx);
u32 BTIC1H_ReadPix24_2x4x3(BTIC1H_Context *ctx);
u64 BTIC1H_ReadPix48_4x4x3(BTIC1H_Context *ctx);
void BTIC1H_ReadPixDeltaY4x4(BTIC1H_Context *ctx, byte *yblk);
void BTIC1H_ReadPixDeltaUV2x2(BTIC1H_Context *ctx, byte *ublk, byte *vblk);
void BTIC1H_ReadPixDeltaYUV4x4(BTIC1H_Context *ctx,byte *yblk, byte *ublk, byte *vblk);
void BTIC1H_ReadPixDeltaYUV2x2(BTIC1H_Context *ctx,byte *yblk, byte *ublk, byte *vblk);
void BTIC1H_ReadPixDeltaYUVD2x2(BTIC1H_Context *ctx,byte *yblk, byte *ublk, byte *vblk, byte *dblk);
void BTIC1H_ReadPixAbsY4x4(BTIC1H_Context *ctx, byte *yblk);
void BTIC1H_ReadPixAbsUV2x2(BTIC1H_Context *ctx, byte *ublk, byte *vblk);
void BTIC1H_ReadPixAbsYUV4x4(BTIC1H_Context *ctx,byte *yblk, byte *ublk, byte *vblk);
byte *BTIC1H_FillBlockFlat(BTIC1H_Context *ctx, byte *ct, int stride);
byte *BTIC1H_FillBlock2x2(BTIC1H_Context *ctx,int px, byte *ct, int stride);
byte *BTIC1H_FillBlock4x4(BTIC1H_Context *ctx,int px, byte *ct, int stride);
byte *BTIC1H_FillBlock4x4x1(BTIC1H_Context *ctx,int px, byte *ct, int stride);
byte *BTIC1H_FillBlock4x4x3(BTIC1H_Context *ctx,u64 px, byte *ct, int stride);
byte *BTIC1H_FillBlock2x2B(BTIC1H_Context *ctx,int px, byte *ct, int stride);
byte *BTIC1H_FillBlock4x4B(BTIC1H_Context *ctx,int px, byte *ct, int stride);
byte *BTIC1H_FillBlock4x4x3B(BTIC1H_Context *ctx,u64 px, byte *ct, int stride);
byte *BTIC1H_FillBlock4x4B420(BTIC1H_Context *ctx,byte *ypix, byte *upix, byte *vpix, byte *dpix, int px, byte *ct, int stride);
byte *BTIC1H_FillBlock4x4YUV420(BTIC1H_Context *ctx,byte *ypix, byte *upix, byte *vpix, byte *ct, int stride);
byte *BTIC1H_FillBlock4x4YUV444(BTIC1H_Context *ctx,byte *ypix, byte *upix, byte *vpix, byte *ct, int stride);
byte *BTIC1H_FillBlock4x4B_UV2x2(BTIC1H_Context *ctx,int px, int pxu, int pxv, byte *ct, int stride);
byte *BTIC1H_FillBlock4x4x3B_UV4x4(BTIC1H_Context *ctx,u64 pxy, u32 pxu, u32 pxv, byte *ct, int stride);
byte *BTIC1H_FillBlock4x4x3B_UV2x2(BTIC1H_Context *ctx,u64 pxy, int pxu, int pxv, byte *ct, int stride);
byte *BTIC1H_FillBlock2x2B_UV2x2(BTIC1H_Context *ctx,int px, int pxu, int pxv, byte *ct, int stride);
byte *BTIC1H_FillBlock4x4x3B_UV2x4x3(BTIC1H_Context *ctx,u64 pxy, u32 pxu, u32 pxv, byte *ct, int stride);
byte *BTIC1H_FillBlock4x4B_UV4x4(BTIC1H_Context *ctx,u32 pxy, u32 pxu, u32 pxv, byte *ct, int stride);
u64 BTIC1H_FillBlockGr2x2_Repack(int px);
byte *BTIC1H_FillBlockGr2x2(BTIC1H_Context *ctx,int px, byte *ct, int stride);
byte *BTIC1H_FillBlockGr2x2B(BTIC1H_Context *ctx,int px, byte *ct, int stride);
byte *BTIC1H_FillBlock4x4AB(BTIC1H_Context *ctx,int px, byte *ct, int stride);
byte *BTIC1H_FillBlock2x2AB(BTIC1H_Context *ctx,int px, byte *ct, int stride);
int BTIC1H_DecodeCopyBlocks(BTIC1H_Context *ctx,byte *dblk, byte *sblk, int nblks, int stride);
void BTIC1H_DecodeDeltaA(BTIC1H_Context *ctx);
void BTIC1H_DecodeDeltaAD(BTIC1H_Context *ctx);
void BTIC1H_DecodeAbsA(BTIC1H_Context *ctx);
void BTIC1H_DecodeAbsAD(BTIC1H_Context *ctx);
void BTIC1H_DecodeQfDeltaAD(BTIC1H_Context *ctx);
void BTIC1H_DecodeQfAbsAD(BTIC1H_Context *ctx);
byte *BTIC1H_FillAlphaBlockNoAlpha(BTIC1H_Context *ctx, byte *ct, int stride);
byte *BTIC1H_FillAlphaBlockFlat(BTIC1H_Context *ctx, byte *ct, int stride);
byte *BTIC1H_FillAlphaBlock2x2(BTIC1H_Context *ctx,int px, byte *ct, int stride);
byte *BTIC1H_FillAlphaBlock4x4(BTIC1H_Context *ctx,int px, byte *ct, int stride);
byte *BTIC1H_FillAlphaBlock4x4x1(BTIC1H_Context *ctx,int px, byte *ct, int stride);
byte *BTIC1H_FillAlphaBlock4x4x3(BTIC1H_Context *ctx,u64 px, byte *ct, int stride);
int BTIC1H_DecodeCopyAlphaBlocks(byte *dblk, byte *sblk, int nblks, int stride);
int BTIC1H_DecodeBlocksCtx(BTIC1H_Context *ctx,byte *blks, byte *lblks, int nblks, int stride, int *rnblks);
int BTIC1H_DecodeAlphaBlocksCtx(BTIC1H_Context *ctx,byte *blks, byte *lblks, int nblks, int stride, int *rnblks);
int BTIC1H_DecodeBlocksBuffer(byte *ibuf, byte *blks, byte *lblks, int nblks, int stride, int xbsz, int ybsz, int ibsz);
int BTIC1H_DecodeWorkSliceCtx(BTIC1H_Context *ctx);
int BTIC1H_DecodeCtxI(BTIC1H_Context *ctx,byte *src, int ssz, int *rxy, int *rys);
int BTIC1H_DecodeCtxI(BTIC1H_Context *ctx,byte *src, int ssz, int *rxs, int *rys);
int BTIC1H_DecodeCtxPYUV(BTIC1H_Context *ctx,byte *src, int ssz, int xs, int ys, byte *ybuf, byte *ubuf, byte *vbuf, byte *abuf);
int BTIC1H_DecodeCtxBC7(BTIC1H_Context *ctx,byte *src, byte *dst, int ssz, int dsz, int xs, int ys);
//AHSRC:btic4b/bt4b_bitread.c
void BTIC4B_SetupReadBits(BTIC4B_Context *ctx, byte *buf, int sz);
byte *BTIC4B_EndReadBits(BTIC4B_Context *ctx);
int BTIC4B_ReadNBitsNM(BTIC4B_Context *ctx, int len);
int BTIC4B_ReadNBits(BTIC4B_Context *ctx, int len);
int BTIC4B_Read8BitsNM(BTIC4B_Context *ctx);
int BTIC4B_Read16BitsNM(BTIC4B_Context *ctx);
int BTIC4B_Read24BitsNM(BTIC4B_Context *ctx);
int BTIC4B_Read16Bits(BTIC4B_Context *ctx);
int BTIC4B_Read24Bits(BTIC4B_Context *ctx);
u32 BTIC4B_Read32Bits(BTIC4B_Context *ctx);
int BTIC4B_Read8BitsNM(BTIC4B_Context *ctx);
int BTIC4B_Read16BitsNM(BTIC4B_Context *ctx);
int BTIC4B_Read24BitsNM(BTIC4B_Context *ctx);
int BTIC4B_Read8Bits(BTIC4B_Context *ctx);
int BTIC4B_Read16Bits(BTIC4B_Context *ctx);
int BTIC4B_Read24Bits(BTIC4B_Context *ctx);
u32 BTIC4B_Read32Bits(BTIC4B_Context *ctx);
u32 BTIC4B_Read32Bits(BTIC4B_Context *ctx);
u64 BTIC4B_Read64Bits(BTIC4B_Context *ctx);
void BTIC4B_SkipNBits(BTIC4B_Context *ctx, int len);
void BTIC4B_Skip8Bits(BTIC4B_Context *ctx);
int BTIC4B_PeekNBitsNM(BTIC4B_Context *ctx, int len);
int BTIC4B_Peek8Bits(BTIC4B_Context *ctx);
int BTIC4B_ReadRiceQ(BTIC4B_Context *ctx);
int BTIC4B_ReadAdRiceILL(BTIC4B_Context *ctx, byte *rk);
int BTIC4B_ReadAdRiceLL(BTIC4B_Context *ctx, byte *rk);
int BTIC4B_ReadAdSRiceLL(BTIC4B_Context *ctx, byte *rk);
int BTIC4B_DecodeSymbolIndexSmtf(BTIC4B_Context *ctx,BTIC4B_SmtfState *st, int i);
int BTIC4B_ReadSymbolSmtf(BTIC4B_Context *ctx,BTIC4B_SmtfState *st);
//AHSRC:btic4b/bt4b_bitwrite.c
void BTIC4B_InitRice(void);
void BTIC4B_SetupWriteBits(BTIC4B_Context *ctx, byte *buf, int sz);
byte *BTIC4B_EndWriteBits(BTIC4B_Context *ctx);
void BTIC4B_WriteNBits(BTIC4B_Context *ctx,int bits, int len);
void BTIC4B_WriteNBitsNM(BTIC4B_Context *ctx,int bits, int len);
void BTIC4B_Write8BitsNM(BTIC4B_Context *ctx, int bits);
void BTIC4B_Write16BitsNM(BTIC4B_Context *ctx, int bits);
void BTIC4B_Write24BitsNM(BTIC4B_Context *ctx, int bits);
void BTIC4B_Write8BitsNM(BTIC4B_Context *ctx, int bits);
void BTIC4B_Write16BitsNM(BTIC4B_Context *ctx, int bits);
void BTIC4B_Write24BitsNM(BTIC4B_Context *ctx, int bits);
void BTIC4B_Write32Bits(BTIC4B_Context *ctx, u32 bits);
void BTIC4B_Write64Bits(BTIC4B_Context *ctx, u64 bits);
void BTIC4B_WriteAdRiceILL(BTIC4B_Context *ctx, int val, byte *rk);
void BTIC4B_WriteAdRiceLL(BTIC4B_Context *ctx, int val, byte *rk);
void BTIC4B_WriteAdRiceSymLL(BTIC4B_Context *ctx, int val, byte *rk);
void BTIC4B_WriteAdSRiceLL(BTIC4B_Context *ctx, int val, byte *rk);
void BTIC4B_WriteAdSRiceLLb(BTIC4B_Context *ctx, int val, byte *rk, int *rst);
void BTIC4B_ResetSmtfDefault(BTIC4B_Context *ctx, BTIC4B_SmtfState *st);
void BTIC4B_ResetSmtfReverse(BTIC4B_Context *ctx, BTIC4B_SmtfState *st);
int BTIC4B_EmitIndexSymbolSmtf(BTIC4B_Context *ctx,BTIC4B_SmtfState *st, int val);
void BTIC4B_WriteSymbolSmtfI(BTIC4B_Context *ctx,BTIC4B_SmtfState *st, int val);
void BTIC4B_WriteSymbolSmtf(BTIC4B_Context *ctx,BTIC4B_SmtfState *st, int val);
//AHSRC:btic4b/bt4b_blkdec.c
void BTIC4B_DecBlock0BGRA(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_DecBlockFlatBGRA(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_DecBlockFlatBGRA_FA(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr, int ca);
void BTIC4B_DecBlockFlatHalfBGRA_FA(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr, int ca);
void BTIC4B_DecBlock1BGRA(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_DecBlock2BGRA(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_DecBlock3BGRA(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_DecBlock4BGRA(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_DecBlock5BGRA(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_DecBlock7BGRA(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_DecBlock6BGRA(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_DecBlockGrad4BGRA(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_DecBlock8BGRA(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_DecBlock9BGRA(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_DecBlock10BGRA(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_DecBlockAlphaBGRA(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_DecBlockBGRA(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_DecBlockBGRX(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_DecBlockHalfBGRA(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_DecBlockHalfBGRX(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_DecBlockRGBA(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_DecBlockRGBX(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_DecBlockEdgeClrs(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr, int xf, int yf, int clrs);
u32 BTIC4B_DecImageClrPack1_LDR8(int cr, int cg, int cb);
u32 BTIC4B_DecImageClrPack1A_LDR8(int cr, int cg, int cb, int ca);
u32 BTIC4B_DecImageClrPack1_12R11F(int cr, int cg, int cb);
u32 BTIC4B_DecImageClrPack1A_12R11F(int cr, int cg, int cb, int ca);
u32 BTIC4B_DecImageClrPack1_16R11F(int cr, int cg, int cb);
u32 BTIC4B_DecImageClrPack1A_16R11F(int cr, int cg, int cb, int ca);
void BTIC4B_DecImageClrPack4_LDR8(int cr0, int cg0, int cb0, int cr3, int cg3, int cb3, int ca, u32 *tab);
void BTIC4B_DecImageClrPack4_12R11F(int cr0, int cg0, int cb0, int cr3, int cg3, int cb3, int ca, u32 *tab);
void BTIC4B_DecImageClrPack4_16R11F(int cr0, int cg0, int cb0, int cr3, int cg3, int cb3, int ca, u32 *tab);
u32 BTIC4B_DecImageClr1_GDbDr(int cy, int cu, int cv);
u32 BTIC4B_DecImageClr1A_GDbDr(int cy, int cu, int cv, int ca);
void BTIC4B_DecImageClrDec2T_GDbDr(int tag,int acy, int acu, int acv, int dcy, int dcu, int dcv, int *rr0, int *rg0, int *rb0, int *rr1, int *rg1, int *rb1);
void BTIC4B_DecImageClrDec4_GDbDr(int cy0, int cy1, int cy2, int cy3, int cu, int cv, u32 *rpx0, u32 *rpx1);
void BTIC4B_DecImageClrDec4B_GDbDr(int cy0, int cy1, int cy2, int cy3, int cu0, int cv0, int cu1, int cv1, u32 *rpx0, u32 *rpx1);
void BTIC4B_DecImageClrDec4C_GDbDr(int cy0, int cy1, int cy2, int cy3, int cu0, int cv0, int cu1, int cv1, int cu2, int cv2, int cu3, int cv3, u32 *rpx0, u32 *rpx1);
u32 BTIC4B_DecImageClr1_GDbDrSW(int cy, int cu, int cv);
u32 BTIC4B_DecImageClr1A_GDbDrSW(int cy, int cu, int cv, int ca);
void BTIC4B_DecImageClrDec2T_GDbDrSW(int tag,int acy, int acu, int acv, int dcy, int dcu, int dcv, int *rr0, int *rg0, int *rb0, int *rr1, int *rg1, int *rb1);
void BTIC4B_DecImageClrDec4_GDbDrSW(int cy0, int cy1, int cy2, int cy3, int cu, int cv, u32 *rpx0, u32 *rpx1);
void BTIC4B_DecImageClrDec4B_GDbDrSW(int cy0, int cy1, int cy2, int cy3, int cu0, int cv0, int cu1, int cv1, u32 *rpx0, u32 *rpx1);
void BTIC4B_DecImageClrDec4C_GDbDrSW(int cy0, int cy1, int cy2, int cy3, int cu0, int cv0, int cu1, int cv1, int cu2, int cv2, int cu3, int cv3, u32 *rpx0, u32 *rpx1);
u32 BTIC4B_DecImageClr1_RCT(int cy, int cu, int cv);
u32 BTIC4B_DecImageClr1A_RCT(int cy, int cu, int cv, int ca);
void BTIC4B_DecImageClrDec2T_RCT(int tag,int acy, int acu, int acv, int dcy, int dcu, int dcv, int *rr0, int *rg0, int *rb0, int *rr1, int *rg1, int *rb1);
void BTIC4B_DecImageClrDec4_RCT(int cy0, int cy1, int cy2, int cy3, int cu, int cv, u32 *rpx0, u32 *rpx1);
void BTIC4B_DecImageClrDec4B_RCT(int cy0, int cy1, int cy2, int cy3, int cu0, int cv0, int cu1, int cv1, u32 *rpx0, u32 *rpx1);
void BTIC4B_DecImageClrDec4C_RCT(int cy0, int cy1, int cy2, int cy3, int cu0, int cv0, int cu1, int cv1, int cu2, int cv2, int cu3, int cv3, u32 *rpx0, u32 *rpx1);
u32 BTIC4B_DecImageClr1_RCTSW(int cy, int cu, int cv);
u32 BTIC4B_DecImageClr1A_RCTSW(int cy, int cu, int cv, int ca);
void BTIC4B_DecImageClrDec2T_RCTSW(int tag,int acy, int acu, int acv, int dcy, int dcu, int dcv, int *rr0, int *rg0, int *rb0, int *rr1, int *rg1, int *rb1);
void BTIC4B_DecImageClrDec4_RCTSW(int cy0, int cy1, int cy2, int cy3, int cu, int cv, u32 *rpx0, u32 *rpx1);
void BTIC4B_DecImageClrDec4B_RCTSW(int cy0, int cy1, int cy2, int cy3, int cu0, int cv0, int cu1, int cv1, u32 *rpx0, u32 *rpx1);
void BTIC4B_DecImageClrDec4C_RCTSW(int cy0, int cy1, int cy2, int cy3, int cu0, int cv0, int cu1, int cv1, int cu2, int cv2, int cu3, int cv3, u32 *rpx0, u32 *rpx1);
u32 BTIC4B_DecImageClr1_RCT16F_11F(int cy, int cu, int cv);
u32 BTIC4B_DecImageClr1A_RCT16F_11F(int cy, int cu, int cv, int ca);
void BTIC4B_DecImageClrDec2T_RCT16F_11F(int tag,int acy, int acu, int acv, int dcy, int dcu, int dcv, int *rr0, int *rg0, int *rb0, int *rr1, int *rg1, int *rb1);
void BTIC4B_DecImageClrDec4_RCT16F_11F(int cy0, int cy1, int cy2, int cy3, int cu, int cv, u32 *rpx0, u32 *rpx1);
void BTIC4B_DecImageClrDec4B_RCT16F_11F(int cy0, int cy1, int cy2, int cy3, int cu0, int cv0, int cu1, int cv1, u32 *rpx0, u32 *rpx1);
void BTIC4B_DecImageClrDec4C_RCT16F_11F(int cy0, int cy1, int cy2, int cy3, int cu0, int cv0, int cu1, int cv1, int cu2, int cv2, int cu3, int cv3, u32 *rpx0, u32 *rpx1);
u32 btic4b_pxrgbx2rgb11f(u32 px);
u32 BTIC4B_DecImageClr1_RCT_11FB(int cy, int cu, int cv);
u32 BTIC4B_DecImageClr1A_RCT_11FB(int cy, int cu, int cv, int ca);
void BTIC4B_DecImageClrDec2T_RCT_11FB(int tag,int acy, int acu, int acv, int dcy, int dcu, int dcv, int *rr0, int *rg0, int *rb0, int *rr1, int *rg1, int *rb1);
void BTIC4B_DecImageClrDec4_RCT_11FB(int cy0, int cy1, int cy2, int cy3, int cu, int cv, u32 *rpx0, u32 *rpx1);
void BTIC4B_DecImageClrDec4B_RCT_11FB(int cy0, int cy1, int cy2, int cy3, int cu0, int cv0, int cu1, int cv1, u32 *rpx0, u32 *rpx1);
void BTIC4B_DecImageClrDec4C_RCT_11FB(int cy0, int cy1, int cy2, int cy3, int cu0, int cv0, int cu1, int cv1, int cu2, int cv2, int cu3, int cv3, u32 *rpx0, u32 *rpx1);
u32 BTIC4B_DecImageClr1_RCT12F_11F(int cy, int cu, int cv);
u32 BTIC4B_DecImageClr1A_RCT12F_11F(int cy, int cu, int cv, int ca);
void BTIC4B_DecImageClrDec2T_RCT12F_11F(int tag,int acy, int acu, int acv, int dcy, int dcu, int dcv, int *rr0, int *rg0, int *rb0, int *rr1, int *rg1, int *rb1);
void BTIC4B_DecImageClrDec4_RCT12F_11F(int cy0, int cy1, int cy2, int cy3, int cu, int cv, u32 *rpx0, u32 *rpx1);
void BTIC4B_DecImageClrDec4B_RCT12F_11F(int cy0, int cy1, int cy2, int cy3, int cu0, int cv0, int cu1, int cv1, u32 *rpx0, u32 *rpx1);
void BTIC4B_DecImageClrDec4C_RCT12F_11F(int cy0, int cy1, int cy2, int cy3, int cu0, int cv0, int cu1, int cv1, int cu2, int cv2, int cu3, int cv3, u32 *rpx0, u32 *rpx1);
void BTIC4B_DecImageSetupClrsI(BTIC4B_Context *ctx, int clrs);
void BTIC4B_DecImageClrsI(BTIC4B_Context *ctx,byte *blks, byte *ibuf, int xs, int ys, int clrs);
void BTIC4B_ConvImageBC7n(BTIC4B_Context *ctx,byte *iblock, int iblkstr, byte *oblock, int xs, int ys);
void BTIC4B_ConvImageBC7nMip(BTIC4B_Context *ctx,byte *iblock, int iblkstr, byte *oblock, int xs, int ys);
void BTIC4B_ConvImageBC1n(BTIC4B_Context *ctx,byte *iblock, int iblkstr, byte *oblock, int xs, int ys);
void BTIC4B_ConvImageBC1nMip(BTIC4B_Context *ctx,byte *iblock, int iblkstr, byte *oblock, int xs, int ys);
void BTIC4B_ConvImageBC3n(BTIC4B_Context *ctx,byte *iblock, int iblkstr, byte *oblock, int xs, int ys);
void BTIC4B_ConvImageBC3nMip(BTIC4B_Context *ctx,byte *iblock, int iblkstr, byte *oblock, int xs, int ys);
void BTIC4B_DecImageClrs(BTIC4B_Context *ctx,byte *blks, byte *ibuf, int xs, int ys, int clrs);
//AHSRC:btic4b/bt4b_blkenc.c
void BTIC4B_SplitIbufBGRA(byte *ibuf, int ystr,int *ybuf, int *ubuf, int *vbuf, int *abuf, int *mcyuv, int *ncyuv);
void BTIC4B_SplitIbufBGRX(byte *ibuf, int ystr,int *ybuf, int *ubuf, int *vbuf, int *mcyuv, int *ncyuv);
void BTIC4B_SplitIbufBGRA444(BTIC4B_Context *ctx,byte *ibuf, int ystr, int *ybuf, int *ubuf, int *vbuf, int *abuf, int *mcyuv, int *ncyuv);
void BTIC4B_SplitIbufRGB30(byte *ibuf, int ystr,int *ybuf, int *ubuf, int *vbuf, int *mcyuv, int *ncyuv);
void BTIC4B_SplitIbufRGB48(byte *ibuf, int ystr,int *ybuf, int *ubuf, int *vbuf, int *mcyuv, int *ncyuv);
void BTIC4B_SplitIbufRGB_12R11F(byte *ibuf, int ystr,int *ybuf, int *ubuf, int *vbuf, int *mcyuv, int *ncyuv);
void BTIC4B_SplitIbufRGB_16R11F(byte *ibuf, int ystr,int *ybuf, int *ubuf, int *vbuf, int *mcyuv, int *ncyuv);
void BTIC4B_SplitIbufRGB444_12R11F(BTIC4B_Context *ctx, byte *ibuf, int ystr, int *ybuf, int *ubuf, int *vbuf, int *mcyuv, int *ncyuv);
u32 btic4b_img_rgbevtor16(int fb, int eb);
void BTIC4B_SplitIbufRGB444_16RGB8E8(BTIC4B_Context *ctx, byte *ibuf, int ystr, int *ybuf, int *ubuf, int *vbuf, int *mcyuv, int *ncyuv);
void BTIC4B_InitScTables();
void BTIC4B_EncBlock0Inner(BTIC4B_Context *ctx, byte *blkbuf, int *ybuf, int *ubuf, int *vbuf, int *ubuf2, int *vbuf2, int *mcyuv, int *ncyuv);
void BTIC4B_EncBlockAInner(BTIC4B_Context *ctx, byte *blkbuf, int *abuf, int mca, int nca);
void BTIC4B_EncBlockBGRA(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_EncBlockBGRX(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_EncBlockRGBA(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_EncBlockRGBX(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_EncBlockRGB_12R11F(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_EncBlockRGB_16R11F(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_EncBlockRGB48F(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_EncBlockRGB_16RGB8E8(BTIC4B_Context *ctx,byte *blkbuf, byte *ibuf, int ystr);
void BTIC4B_EncImageBGRA(BTIC4B_Context *ctx,byte *blks, byte *ibuf, int xs, int ys);
void BTIC4B_EncImageClrs(BTIC4B_Context *ctx,byte *blks, byte *ibuf, int xs, int ys, int clrs);
//AHSRC:btic4b/bt4b_decode.c
int BTIC4B_DecodeUVLI(BTIC4B_Context *ctx);
int BTIC4B_DecReadCountVal(BTIC4B_Context *ctx);
int BTIC4B_DecReadGenericUVal(BTIC4B_Context *ctx);
int BTIC4B_DecReadGenericVal(BTIC4B_Context *ctx);
int BTIC4B_DecReadCommand(BTIC4B_Context *ctx);
void BTIC4B_DecColorYUV(BTIC4B_Context *ctx);
void BTIC4B_DecColorYUVD(BTIC4B_Context *ctx);
void BTIC4B_DecColorYUVDyuv(BTIC4B_Context *ctx);
int BTIC4B_DecReadCommand(BTIC4B_Context *ctx);
int BTIC4B_DecReadMask(BTIC4B_Context *ctx);
int BTIC4B_DecReadGenericUVal(BTIC4B_Context *ctx);
int BTIC4B_DecReadGenericVal(BTIC4B_Context *ctx);
int BTIC4B_DecReadCountVal(BTIC4B_Context *ctx);
int BTIC4B_DecReadValCy(BTIC4B_Context *ctx);
int BTIC4B_DecReadValCuv(BTIC4B_Context *ctx);
int BTIC4B_DecReadValDy(BTIC4B_Context *ctx);
int BTIC4B_DecReadValDuv(BTIC4B_Context *ctx);
void BTIC4B_DecColorYUV(BTIC4B_Context *ctx);
void BTIC4B_DecColorYUVD(BTIC4B_Context *ctx);
void BTIC4B_DecColorYUVDyuv(BTIC4B_Context *ctx);
void BTIC4B_DecColorY(BTIC4B_Context *ctx);
void BTIC4B_DecColorYD(BTIC4B_Context *ctx);
void BTIC4B_FillBlockHeadTag(BTIC4B_Context *ctx, byte *blk, int tag);
void BTIC4B_FillBlockHeadL8(BTIC4B_Context *ctx, byte *blk, int tag);
void BTIC4B_FillBlockHeadAlphaTag(BTIC4B_Context *ctx, byte *blk, int tag);
void BTIC4B_FillBlockHeadAlphaTagL8(BTIC4B_Context *ctx,byte *blk, int tag);
void BTIC4B_DecodeReadBytes(BTIC4B_Context *ctx, byte *blk, int len);
void BTIC4B_DecodeCopyBlocks(BTIC4B_Context *ctx,byte *dblks, byte *sblks, int cnt);
void BTIC4B_DecodeCopyAlphaBlocks(BTIC4B_Context *ctx,byte *dblks, byte *sblks, int cnt);
void BTIC4B_DecodeSetPredictor(BTIC4B_Context *ctx, int pred);
void BTIC4B_DecodeDirtyL8(BTIC4B_Context *ctx);
void BTIC4B_DecodeSetParm(BTIC4B_Context *ctx, int var, int val);
void BTIC4B_DecodeEnableFeature(BTIC4B_Context *ctx, int var);
void BTIC4B_DecodeDisableFeature(BTIC4B_Context *ctx, int var);
byte *BTIC4B_DecSetupDecBlockInner(BTIC4B_Context *ctx, byte *ct, int op);
void BTIC4B_DecGetBlkPredClrs3Gen(BTIC4B_Context *ctx,byte *blka, byte *blkb, byte *blkc, int *rcyuv);
void BTIC4B_DecGetBlkPredClrs3Fast(BTIC4B_Context *ctx,byte *blka, byte *blkb, byte *blkc, int *rcyuv);
int BTIC4B_Pred_Paeth(int a, int b, int c);
int BTIC4B_Pred_Paeth(int a, int b, int c);
void BTIC4B_DecUpdateCtxPred(BTIC4B_Context *ctx,byte *pba, byte *pbb, byte *pbc, byte pred);
void BTIC4B_DecUpdateCtxPredV(BTIC4B_Context *ctx,byte *pba, byte *pbb, byte *pbc, byte pred, int *rpyc);
void BTIC4B_DecUpdateCtxPred(BTIC4B_Context *ctx,byte *pba, byte *pbb, byte *pbc, byte pred);
void BTIC4B_DecUpdatePred_Generic(BTIC4B_Context *ctx,byte *ct, byte *blks);
void BTIC4B_DecUpdatePred_HalfAvg(BTIC4B_Context *ctx,byte *ct, byte *blks);
void BTIC4B_DecUpdatePred_Paeth3J(BTIC4B_Context *ctx,byte *ct, byte *blks);
void BTIC4B_DecUpdatePred_HalfAvgF(BTIC4B_Context *ctx,byte *ct, byte *blks);
void BTIC4B_DecUpdatePred_Paeth3JF(BTIC4B_Context *ctx,byte *ct, byte *blks);
void BTIC4B_DecUpdatePred_None(BTIC4B_Context *ctx,byte *ct, byte *blks);
void BTIC4B_DecodeSetPredictor(BTIC4B_Context *ctx, int pred);
void BTIC4B_DecodeDirtyL8(BTIC4B_Context *ctx);
int BTIC4B_DecImgBlocks(BTIC4B_Context *ctx,byte *cbuf, int cbsz, byte *blks, byte *lblks, int xs, int ys);
byte *BTIC4B_DecSetupDecAlphaBlockInner(BTIC4B_Context *ctx,byte *ct, int op);
int BTIC4B_DecImgAlphaBlocks(BTIC4B_Context *ctx,byte *cbuf, int cbsz, byte *blks, byte *lblks, int xs, int ys);
byte *BTIC4B_BufReadUVLI(byte *cs, u64 *rval);
BTIC4B_API int BTIC4B_DecodeImgHeaderDataCtx(BTIC4B_Context *ctx,byte *ics, int isz);
BTIC4B_API int BTIC4B_DecodeImgBufferCtx(BTIC4B_Context *ctx,byte *cbuf, int cbsz, byte *ibuf, int xs, int ys, int clrfl);
BTIC4B_API byte *BTIC4B_BufBmpGetImg(byte *buf,int *rxs, int *rys, u32 *rfcc, int *risz);
BTIC4B_API int BTIC4B_DecodeImgBmpBufferCtx(BTIC4B_Context *ctx,byte *cbuf, int cbsz, byte *ibuf, int *rxs, int *rys, int clrfl);
BTIC4B_API int BTIC4B_DecodeImgBmpBuffer(byte *cbuf, int cbsz,byte *ibuf, int *rxs, int *rys, int clrfl);
BTIC4B_API int BTIC4B_DecodeImgBmpBuffer2(byte *cbuf, int cbsz,byte *ibuf, int *rxs, int *rys, int *imgt, int *clrt);
//AHSRC:btic4b/bt4b_encode.c
void BTIC4B_EncEmitGenericUVal(BTIC4B_Context *ctx, int cv);
void BTIC4B_EncEmitGenericVal(BTIC4B_Context *ctx, int cv);
void BTIC4B_EncEmitCount(BTIC4B_Context *ctx, int cv);
void BTIC4B_EncEmitGenericUVal(BTIC4B_Context *ctx, int cv);
void BTIC4B_EncEmitGenericVal(BTIC4B_Context *ctx, int cv);
void BTIC4B_EncEmitCount(BTIC4B_Context *ctx, int cv);
void BTIC4B_EmitEnableMask(BTIC4B_Context *ctx);
void BTIC4B_EmitDisableMask(BTIC4B_Context *ctx);
void BTIC4B_EmitSetParm(BTIC4B_Context *ctx, int var, int val);
int BTIC4B_EncCheckEnableMask(BTIC4B_Context *ctx);
void BTIC4B_FastEncYUV(BTIC4B_Context *ctx, int cy, int cu, int cv);
void BTIC4B_FastEncYUVD(BTIC4B_Context *ctx,int cy, int cu, int cv, int dy);
void BTIC4B_FastEncYUVDyuv(BTIC4B_Context *ctx,int cy, int cu, int cv, int dy, int du, int dv);
void BTIC4B_FastEncY(BTIC4B_Context *ctx, int cy);
void BTIC4B_FastEncYD(BTIC4B_Context *ctx, int cy, int dy);
void BTIC4B_FastEncA(BTIC4B_Context *ctx, int cy);
void BTIC4B_FastEncAD(BTIC4B_Context *ctx, int cy, int dy);
int BTIC4B_SetupContextQf(BTIC4B_Context *ctx, int qf);
void BTIC4B_EncUpdatePredV(BTIC4B_Context *ctx,byte *ct, byte *blks, int *rpyc);
int BTIC4B_EncBlockPriorColorP(BTIC4B_Context *ctx,byte *blk, byte *blks);
int BTIC4B_EncEmitDbgCmdPfx(BTIC4B_Context *ctx);
void BTIC4B_DecUpdateCtxPred(BTIC4B_Context *ctx,byte *pba, byte *pbb, byte *pbc, byte pred);
void BTIC4B_DecUpdateCtxPredV(BTIC4B_Context *ctx,byte *pba, byte *pbb, byte *pbc, byte pred, int *rpyc);
void BTIC4B_EncUpdatePredV(BTIC4B_Context *ctx,byte *ct, byte *blks, int *rpyc);
int BTIC4B_EncImgBlocks(BTIC4B_Context *ctx,byte *cbuf, byte *blks, byte *lblks, int xs, int ys, int qf);
int BTIC4B_EncImgAlphaBlocks(BTIC4B_Context *ctx,byte *cbuf, byte *blks, byte *lblks, int xs, int ys, int qf);
byte *BTIC4B_EncEmitUVLI(byte *ct, u64 val);
BTIC4B_API byte *BTIC4B_EncodeBufEmitHeadCtx(BTIC4B_Context *ctx, byte *ict);
BTIC4B_API int BTIC4B_EncodeImgBufferCtx(BTIC4B_Context *ctx,byte *obuf, int cbsz, byte *ibuf, int xs, int ys, int qfl, int clrs);
BTIC4B_API int BTIC4B_DumpStatsCtx(BTIC4B_Context *ctx);
BTIC4B_API int BTIC4B_EncFlattenBmp(byte *obuf,int xs, int ys, int fcc, byte *ibuf, int isz);
BTIC4B_API int BTIC4B_EncodeImgBmpBufferCtx(BTIC4B_Context *ctx,byte *obuf, int cbsz, byte *ibuf, int xs, int ys, int qfl, int clrs);
BTIC4B_API BTIC4B_Context *BTIC4B_AllocContext(void);
BTIC4B_API void BTIC4B_FreeContext(BTIC4B_Context *ctx);
BTIC4B_API int BTIC4B_EncodeImgBmpBuffer(byte *obuf, int cbsz, byte *ibuf, int xs, int ys, int qfl, int clrs);
//AHSRC:btic4b/bt4b_grad16.c
int BTIC4B_Grad16_Init();
//AHSRC:btic4b/bt4b_shim_bc7.c
void BTIC4B_ConvBlockBC7_Init();
void BTIC4B_BitsLE_Clear(BTIC4B_BitStream *ctx);
void BTIC4B_BitsLE_SetupWrite(BTIC4B_BitStream *ctx, byte *ct, int sz);
void BTIC4B_BitsLE_ClearSetupWrite(BTIC4B_BitStream *ctx, byte *ct, int sz);
void BTIC4B_BitsLE_WriteLBits(BTIC4B_BitStream *ctx, int v, int n);
void BTIC4B_BitsLE_WriteBit(BTIC4B_BitStream *ctx, int v);
void BTIC4B_BitsLE_Write2Bits(BTIC4B_BitStream *ctx, int v);
void BTIC4B_BitsLE_Write3Bits(BTIC4B_BitStream *ctx, int v);
void BTIC4B_BitsLE_Write4Bits(BTIC4B_BitStream *ctx, int v);
void BTIC4B_BitsLE_Write5Bits(BTIC4B_BitStream *ctx, int v);
void BTIC4B_BitsLE_Write6Bits(BTIC4B_BitStream *ctx, int v);
void BTIC4B_BitsLE_Write7Bits(BTIC4B_BitStream *ctx, int v);
void BTIC4B_BitsLE_Write10Bits(BTIC4B_BitStream *ctx, int v);
void BTIC4B_BitsLE_Write11Bits(BTIC4B_BitStream *ctx, int v);
void BTIC4B_BitsLE_Write12Bits(BTIC4B_BitStream *ctx, int v);
void BTIC4B_BitsLE_Write14Bits(BTIC4B_BitStream *ctx, int v);
void BTIC4B_BitsLE_Write15Bits(BTIC4B_BitStream *ctx, int v);
void BTIC4B_BitsLE_Write8Bits(BTIC4B_BitStream *ctx, int v);
void BTIC4B_BitsLE_Write16Bits(BTIC4B_BitStream *ctx, int v);
void BTIC4B_BitsLE_Write24Bits(BTIC4B_BitStream *ctx, int v);
void BTIC4B_BitsLE_FlushBits(BTIC4B_BitStream *ctx);
void BTIC4B_BC7_EncodeBlock_VecSwapRGB(int *clra, int *clrb);
void BTIC4B_BC7_EncodeBlock_VecSwapRGBA(int *clra, int *clrb);
void BTIC4B_BC7_EncodeBlock_VecSwapA(int *clra, int *clrb);
void BTIC4B_BC7_EncodeBlock_VecInvertPixels(s16 *pxv, int n, int min, int max);
void BTIC4B_BC7_EncodeBlock_Mode4(byte *block,s16 *pxy, s16 *pxa, int *min, int *max, int mcy, int ncy, int mca, int nca);
void BTIC4B_BC7_EncodeBlock_Mode5(byte *block,s16 *pxy, s16 *pxa, int *min, int *max, int mcy, int ncy, int mca, int nca);
void BTIC4B_BC7_EncodeBlock_Mode6(byte *block,s16 *pxy, int *min, int *max, int mcy, int ncy);
void BTIC4B_BC7_EncodeBlock_AutoMode(byte *block,s16 *pxy, s16 *pxa, int *min, int *max, int mcy, int ncy, int mca, int nca);
void BTIC4B_BC7_EncodeBlockBits48_Mode5(byte *block,u64 pxy, u64 pxa, int *min, int *max);
void BTIC4B_BC7_EncodeBlockBits64_Mode5(byte *block,u64 pxy, int *min, int *max);
void BTIC4B_BC7_EncodeBlockBits64_Mode6(byte *block,u64 pxy, int *min, int *max);
void BTIC4B_BC7_EncodeBlockBits48_Mode4(byte *block,u64 pxy, u64 pxa, int *min, int *max);
void BTIC4B_BC7_EncodeBlockBits48_Mode6(byte *block,u64 pxy, int *min, int *max);
void BTIC4B_BC7_EncodeBlockBits48_AutoMode(byte *block,u64 pxy, u64 pxa, int *min, int *max);
void BTIC4B_BC7_EncodeBlockBits32_Mode5(byte *block,u32 pxy, u32 pxa, int *min, int *max);
void BTIC4B_BC7_EncodeBlockFlat_Mode5(byte *block, int *avg);
void BTIC4B_BC7_EncodeBlockFlatPx(BTIC4B_Context *ctx,byte *block, u32 px);
void BTIC4B_BC7_EncodeBlockBits32Px(BTIC4B_Context *ctx,byte *block, u32 pxy, u32 pxa, u32 pxmin, u32 pxmax);
void BTIC4B_BC7_EncodeBlockBits48Px(BTIC4B_Context *ctx,byte *block, u64 pxy, u64 pxa, u32 pxmin, u32 pxmax);
void BTIC4B_BC7_EncodeBlockBits64Px(BTIC4B_Context *ctx,byte *block, u64 pxy, u32 pxmin, u32 pxmax);
void BTIC4B_ConvBlockSpecialBC7_A(BTIC4B_Context *ctx, byte *iblock, byte *oblock, int obxstr, int obystr, int tfl);
void BTIC4B_ConvBlockSpecialBC7_B(BTIC4B_Context *ctx, byte *iblock, byte *oblock, byte *pblock, int tfl);
void BTIC4B_DecBlockTab1b(BTIC4B_Context *ctx,byte *blkbuf, u32 *tab);
void BTIC4B_DecBlockTab2b(BTIC4B_Context *ctx,byte *blkbuf, u32 *tab);
void BTIC4B_DecBlockTab1b4(BTIC4B_Context *ctx,byte *blkbuf, u32 *tab, byte pxu, byte pxv);
void BTIC4B_DecBlockYuvTab2b(BTIC4B_Context *ctx,byte *blkbuf, int *ytab, int *utab, int *vtab);
void BTIC4B_DecBlockYuvTab2b1b(BTIC4B_Context *ctx,byte *blkbuf, int *ytab, int *utab, int *vtab);
void BTIC4B_ConvBlockBC7_A(BTIC4B_Context *ctx, byte *iblock, byte *oblock, int obxstr, int obystr, int tfl);
void BTIC4B_ConvBlockBC7_B(BTIC4B_Context *ctx, byte *iblock, byte *oblock, byte *pblock, int tfl);
void BTIC4B_ConvBlockBC7_C(BTIC4B_Context *ctx, byte *ipblock, int ipystr, byte *oblock, byte *pblock, int tfl);
void BTIC4B_ConvImageBC7_AI(BTIC4B_Context *ctx,byte *iblock, int iblkstr, byte *oblock, int oblkstr, int xs, int ys);
void BTIC4B_ConvImageBC7_BI(BTIC4B_Context *ctx,byte *iblock, int iblkstr, byte *oblock, int oblkstr, byte *pblock, int xs, int ys);
void BTIC4B_ConvImageBC7_CI(BTIC4B_Context *ctx,byte *ipblock, byte *oblock, int oblkstr, byte *pblock, int xs, int ys);
void BTIC4B_ConvImageBC7n(BTIC4B_Context *ctx,byte *iblock, int iblkstr, byte *oblock, int xs, int ys);
void BTIC4B_ConvImageBC7nMip(BTIC4B_Context *ctx,byte *iblock, int iblkstr, byte *oblock, int xs, int ys);
void BTIC4B_BitsLE_SetupRead(BTIC4B_BitStream *ctx, byte *cs, int sz);
void BTIC4B_BitsLE_ClearSetupRead(BTIC4B_BitStream *ctx, byte *ct, int sz);
int BTIC4B_BitsLE_ReadBits(BTIC4B_BitStream *ctx, int n);
int BTIC4B_BitsLE_ReadBit(BTIC4B_BitStream *ctx);
int BTIC4B_BitsLE_Read2Bits(BTIC4B_BitStream *ctx);
int BTIC4B_BitsLE_Read3Bits(BTIC4B_BitStream *ctx);
int BTIC4B_BitsLE_Read4Bits(BTIC4B_BitStream *ctx);
int BTIC4B_BitsLE_Read5Bits(BTIC4B_BitStream *ctx);
int BTIC4B_BitsLE_Read6Bits(BTIC4B_BitStream *ctx);
int BTIC4B_BitsLE_Read7Bits(BTIC4B_BitStream *ctx);
int BTIC4B_BitsLE_Read8Bits(BTIC4B_BitStream *ctx);
int BTIC4B_BitsLE_Read14Bits(BTIC4B_BitStream *ctx);
int BTIC4B_BitsLE_Read16Bits(BTIC4B_BitStream *ctx);
int BTIC4B_BitsLE_Peek8Bits(BTIC4B_BitStream *ctx);
int btic4b_bc7_interpolate(int e0, int e1, int idx, int prec);
void BTIC4B_BC7_DecodeBlock_Mode4(BTIC4B_BitStream *bits, byte *rgba, int xstride, int ystride, int flags);
void BTIC4B_BC7_DecodeBlock_Mode5(BTIC4B_BitStream *bits, byte *rgba, int xstride, int ystride, int flags);
void BTIC4B_BC7_DecodeBlock_Mode6(BTIC4B_BitStream *bits, byte *rgba, int xstride, int ystride, int flags);
int BTIC4B_BC7_GetBlockMode(byte *block);
int BTIC4B_BC7_DecodeBlock_ReadMode(BTIC4B_BitStream *bits);
void BTIC4B_BC7_DecodeBlock(byte *block,byte *rgba, int xstride, int ystride, int flags);
void BTIC4B_BC7_DecodeImage(byte *block,byte *rgba, int xs, int ys, int stride, int pfb);
//AHSRC:btic4b/bt4b_shim_s2tc.c
void BTIC4B_ConvBlockS2TC_Init();
void BTIC4B_S2TC_DecodeBlockRGBA(byte *block,byte *rgba, int xstride, int ystride, int pfb);
void BTIC4B_S2TC_DecodeImage(byte *block, int blkstride,byte *rgba, int xs, int ys, int stride, int pfb);
void BTIC4B_ConvBlockAlphaS2TC(byte *iblock,byte *oblock, int flip);
void BTIC4B_S2TC_EncodeBlockI(byte *block,s16 *pxy, int *min, int *max, int mcy, int ncy);
void BTIC4B_S2TC_EncodeBlockAlphaI(byte *block,s16 *pxy, int mcy, int ncy);
void BTIC4B_BC1_EncodeBlock(byte *block,s16 *pxy, s16 *pxa, int *min, int *max, int mcy, int ncy, int mca, int nca);
void BTIC4B_BC3_EncodeBlock(byte *block,s16 *pxy, s16 *pxa, int *min, int *max, int mcy, int ncy, int mca, int nca);
void BTIC4B_S2TC_EncodeBlockBits32(byte *block,u32 pxy, int *min, int *max);
void BTIC4B_S2TC_EncodeBlockBits32T(byte *block,u32 pxy, u32 pxa, int *min, int *max);
void BTIC4B_BC1_EncodeBlockBits32(byte *block,u32 pxy, u32 pxa, int *min, int *max);
void BTIC4B_BC3_EncodeBlockBits32(byte *block,u32 pxy, u32 pxa, int *min, int *max);
void BTIC4B_BC1_EncodeBlockBits48(byte *block,u64 pxy, u64 pxa, int *min, int *max);
void BTIC4B_BC3_EncodeBlockBits48(byte *block,u64 pxy, u64 pxa, int *min, int *max);
void BTIC4B_BC1_EncodeBlockBits64(byte *block,u64 pxy, int *min, int *max);
void BTIC4B_BC3_EncodeBlockBits64(byte *block,u64 pxy, int *min, int *max);
void BTIC4B_BC1_EncodeBlockFlat(byte *block, int *avg);
void BTIC4B_BC3_EncodeBlockFlat(byte *block, int *avg);
void BTIC4B_ConvImageBC1n(BTIC4B_Context *ctx,byte *iblock, int iblkstr, byte *oblock, int xs, int ys);
void BTIC4B_ConvImageBC1nMip(BTIC4B_Context *ctx,byte *iblock, int iblkstr, byte *oblock, int xs, int ys);
void BTIC4B_ConvImageBC3n(BTIC4B_Context *ctx,byte *iblock, int iblkstr, byte *oblock, int xs, int ys);
void BTIC4B_ConvImageBC3nMip(BTIC4B_Context *ctx,byte *iblock, int iblkstr, byte *oblock, int xs, int ys);
void BTIC4B_DecodeBlockMB2B_RGBI(BTIC4B_Context *ctx, byte *block, byte *rgba, int xstride, int ystride, int tflip);
void BTIC4B_ConvBlockSpecialS2TC(byte *iblock,byte *oblock, int tfl);
void BTIC4B_ConvBlockS2TC(byte *iblock,byte *oblock, int flip);
void BTIC4B_ConvImageS2TC_I(byte *iblock, int iblkstr,byte *oblock, int oblkstr, int xs, int ys);
void BTIC4B_ConvImageAlphaS2TC_I(byte *iblock, int iblkstr,byte *oblock, int oblkstr, int xs, int ys);
void BTIC4B_ConvImageS2TCn(byte *iblock, int iblkstr,byte *oblock, int bcn, int xs, int ys);
//AHSRC:btic4b/bt4b_dump_hdr.c
int BTIC4B_Img_StoreHDR_RGBE(FILE *fd, byte *buf, int w, int h);
int BTIC4B_Img_SaveHDR_RGBE(char *name, byte *buf, int w, int h);
u32 btic4b_img_rgb48torgbe(u16 cr, u16 cg, u16 cb);
u32 btic4b_img_r11ftorgbe(u32 px);
u32 btic4b_img_rgbetor11f(u32 px);
int BTIC4B_Img_SaveHDR_R11F(char *name, byte *buf, int w, int h);
int BTIC4B_Img_SaveTGA_R11F(char *name, byte *buf, int w, int h);
int BTIC4B_Img_SaveTGA_R11F_RGB(char *name, byte *buf, int w, int h);
int BTIC4B_Img_SaveTGA_R11F_E(char *name, byte *buf, int w, int h);
char *btic4b_img_sgets(char *t, char *s);
char **btic4b_img_ssplit(char *s);
byte *BTIC4B_Img_ReadHDR_RGBE(FILE *fd, int *rw, int *rh);
byte *BTIC4B_Img_LoadHDR_RGBE(char *name, int *rw, int *rh);
byte *BTIC4B_Img_LoadHDR_R11F(char *name, int *rw, int *rh);
byte *BTIC4B_Img_LoadTGA_R11F(char *name, int *rw, int *rh);
byte *BTIC4B_Img_DecodeHDR_RGBE(byte *ibuf, int isz, int *rw, int *rh);
int BTIC4B_ImgRGBe_CheckValidUp(u32 px);
int BTIC4B_ImgRGBe_CheckValidSp(u32 px);
BTIC4B_API int BTIC4B_Img_CheckRGBeP(byte *buf, int w, int h);
//AHSRC:btlzh/btlza_fastdfl.c
void BTLZA_BitEncF_EncodeLZLength(BTLZA_Context *ctx, int l);
void BTLZA_BitEncF_EncodeLZDist(BTLZA_Context *ctx, int d);
void BTLZA_BitEncF_EncodeLZSpecial(BTLZA_Context *ctx, int d);
void BTLZA_BitEncF_EncodeLZRun(BTLZA_Context *ctx, int l, int d);
int BTLZA_BitEncF_LZEncodeBuffer(BTLZA_Context *ctx, byte *ibuf, int isz);
int BTLZA_BitEncF_EncodeBlockDynamic(BTLZA_Context *ctx,byte *ibuf, int isz, int last);
int BTLZA_BitEncF_EncodeBlockBTLZH(BTLZA_Context *ctx,byte *ibuf, int isz, int last);
int BTLZA_BitEncF_EncodeBlock(BTLZA_Context *ctx,byte *ibuf, int isz, int last);
int BTLZA_BitEncF_EncodeStream_I(BTLZA_Context *ctx,byte *ibuf, byte *obuf, int isz, int osz);
BTEIFGL_API int BTLZA_BitEncF_EncodeStream32Lvl(byte *ibuf, byte *obuf, int isz, int osz, int l);
BTEIFGL_API int BTLZA_BitEncF_EncodeStream32LvlZl(byte *ibuf, byte *obuf, int isz, int osz, int lvl);
BTEIFGL_API int BTLZA_BitEncF_EncodeStreamXLvl(byte *ibuf, byte *obuf, int isz, int osz, int l);
BTEIFGL_API int BTLZA_BitEncF_EncodeStreamXLvlZl(byte *ibuf, byte *obuf, int isz, int osz, int lvl);
BTEIFGL_API int BTLZA_BitEncF_EncodeStreamXLvlZlc(byte *ibuf, byte *obuf, int isz, int osz, int lvl);
//AHSRC:btlzh/btlza_bitdecode.c
int BTLZA_BitDec_TransposeByte(int v);
int BTLZA_BitDec_TransposeWord(int v);
int BTLZA_BitDec_DecodeSymbolPartBits(int bits, int nbits, u16 *tc, u16 *tm, byte *tl, u32 *ti, u16 *tn);
int BTLZA_BitDec_SetupTable(byte *cl, int ncl,u16 *tc, u16 *tm, byte *tl, u32 *ti, u16 *tn);
int BTLZA_BitDec_SetupTableI(byte *cl, int ncl,u16 *tc, u16 *tm, byte *tl, u32 *ti, u16 *tn, int flag);
int BTLZA_BitDec_SetupStatic(BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeSymbol(BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeDistanceSymbol(BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeClSymbol(BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeSymbolBasic(BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeDistanceSymbolBasic(BTLZA_Context *ctx);
int BTLZA_BitDec_ReadNBitsBasic2(BTLZA_Context *ctx, int n);
void BTLZA_BitDec_SkipNBitsBasic2(BTLZA_Context *ctx, int n);
int BTLZA_BitDec_DecodeSymbolBasic2(BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeDistanceSymbolBasic2(BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeSymbolRingHuff(BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeDistanceSymbolRingHuff(BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeSymbolReadBit(BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeDistanceSymbolReadBit(BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeDistance(BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeDistanceBasic2(BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeCodeLengths(BTLZA_Context *ctx,byte *cl, int ncl);
int BTLZA_BitDec_DecodeCodeLengthsRh(BTLZA_Context *ctx,byte *cl, byte *lcl, int ncl);
int BTLZA_BitDec_DecodeHeader(BTLZA_Context *ctx);
int BTLZA_BitDec_CheckSetupRingHuffTables(BTLZA_Context *ctx, int hnrh);
int BTLZA_BitDec_DecodeHeaderBTLZH(BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeStaticHeader2(BTLZA_Context *ctx);
void BTLZA_BitDec_MemCpy(byte *dst, byte *src, int len);
void BTLZA_BitDec_MemCpyLax(byte *dst, byte *src, int len);
int BTLZA_BitDec_DecodeRunLzMatch(BTLZA_Context *ctx, int sym);
int BTLZA_BitDec_DecodeRunLzMatchBasic2(BTLZA_Context *ctx, int sym);
int BTLZA_BitDec_DecodeRunExtMatch(BTLZA_Context *ctx, int sym);
int BTLZA_BitDec_DecodeRun(BTLZA_Context *ctx, int sym);
int BTLZA_BitDec_DecodeRunBasic2(BTLZA_Context *ctx, int sym);
int BTLZA_BitDec_DecodeBlockDataI(BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeBlockDataBasic2I(BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeBlockData(BTLZA_Context *ctx);
int BTLZA_BitDec_AlignBitsEnd(BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeHeaderBTArith(BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeBlock(BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeStream(BTLZA_Context *ctx,byte *ibuf, byte *obuf, int isz, int osz);
int BTLZA_BitDec_DecodeStreamSz(BTLZA_Context *ctx,byte *ibuf, byte *obuf, int isz, int osz, int *rosz, int flags);
//AHSRC:btlzh/btlza_bitencode.c
int BTLZA_BitEnc_BalanceTree_r(short *nodes, short *nlen, int root, int h, int ml);
void BTLZA_BitEnc_CalcLengths_r(short *nodes, byte *cl, int root, int h);
int BTLZA_BitEnc_BuildLengths(int *stat, int nc, byte *cl, int ml);
int BTLZA_BitEnc_BuildLengthsAdjust(int *stat, int nc, byte *cl, int ml);
void BTLZA_BitEnc_StatLZRun(BTLZA_Context *ctx,byte *cs, int *lstat, int *dstat);
void BTLZA_BitEnc_StatLZBuffer(BTLZA_Context *ctx,byte *tbuf, byte *mbuf, int n, int *lstat, int *dstat);
void BTLZA_BitEnc_StatLengths(BTLZA_Context *ctx,byte *cl, int nc, int *stat);
void BTLZA_BitEnc_StatLengthsRh(BTLZA_Context *ctx,byte *cl, byte *lcl, int nc, int *stat);
void BTLZA_BitEnc_EncodeSymbol(BTLZA_Context *ctx, int v);
void BTLZA_BitEnc_EncodeDistanceSymbol(BTLZA_Context *ctx, int v);
void BTLZA_BitEnc_EncodeClSymbol(BTLZA_Context *ctx, int v);
void BTLZA_BitEnc_EncodeSymbolBasic(BTLZA_Context *ctx, int v);
void BTLZA_BitEnc_EncodeDistanceSymbolBasic(BTLZA_Context *ctx, int v);
void BTLZA_BitEnc_EncodeSymbolRingHuff(BTLZA_Context *ctx, int v);
void BTLZA_BitEnc_EncodeDistanceSymbolRingHuff(BTLZA_Context *ctx, int v);
void BTLZA_BitEnc_EncodeLengths(BTLZA_Context *ctx, byte *cl, int nc);
void BTLZA_BitEnc_EncodeLengthsRh(BTLZA_Context *ctx, byte *cl, byte *lcl, int nc);
void BTLZA_BitEnc_EncodeLZRun(BTLZA_Context *ctx, byte *cs);
void BTLZA_BitEnc_EncodeLZBuffer(BTLZA_Context *ctx,byte *tbuf, byte *mbuf, int n);
int BTLZA_BitEnc_EncodeBlockStatic(BTLZA_Context *ctx,byte *ibuf, int isz, int last);
int BTLZA_BitEnc_EncodeBlock(BTLZA_Context *ctx,byte *ibuf, int isz, int last);
int BTLZA_BitEnc_EncodeBlockDynamic(BTLZA_Context *ctx,byte *ibuf, int isz, int last);
int bgbrasw_log2f8(int val);
int bgbrasw_exp2f8(int val);
int bgbrasw_log2f12(int val);
int bgbrasw_exp2f12(int val);
int BTLZA_BitEnc_EncodeBlockBTLZH(BTLZA_Context *ctx,byte *ibuf, int isz, int last);
int BTLZA_BitEnc_EncodeBeginArithmetic(BTLZA_Context *ctx);
int BTLZA_BitEnc_EncodeStream_I(BTLZA_Context *ctx,byte *ibuf, byte *obuf, int isz, int osz);
BTEIFGL_API int BTLZA_BitEnc_EncodeStream32Lvl(byte *ibuf, byte *obuf, int isz, int osz, int l);
BTEIFGL_API int BTLZA_BitEnc_EncodeStream64Lvl(byte *ibuf, byte *obuf, int isz, int osz, int lvl);
BTEIFGL_API int BTLZA_BitEnc_EncodeXLvlWinSize(int lvl);
BTEIFGL_API int BTLZA_BitEnc_GetLastMaxExp(int tok);
BTEIFGL_API int BTLZA_BitEnc_EncodeStreamXLvl(byte *ibuf, byte *obuf, int isz, int osz, int lvl);
BTEIFGL_API int BTLZA_BitEnc_EncodeStream32LvlZl(byte *ibuf, byte *obuf, int isz, int osz, int lvl);
BTEIFGL_API int BTLZA_BitEnc_EncodeStream64LvlZl(byte *ibuf, byte *obuf, int isz, int osz, int lvl);
BTEIFGL_API int BTLZA_BitEnc_EncodeStreamXLvlZl(byte *ibuf, byte *obuf, int isz, int osz, int lvl);
BTEIFGL_API int BTLZA_BitEnc_EncodeStreamXLvlZlc(byte *ibuf, byte *obuf, int isz, int osz, int lvl);
BTEIFGL_API int BTLZA_BitEnc_EncodeStreamXLvlZlTest(byte *ibuf, byte *obuf, int isz, int osz, int lvl);
//AHSRC:btlzh/btlza_bitrange.c
void BTLZA_Lock();
void BTLZA_Unlock();
void BTLZA_Lock();
void BTLZA_Unlock();
void BTLZA_BitArith_Init();
BTEIFGL_API BTLZA_Context *BTLZA_AllocContext(void);
BTEIFGL_API void BTLZA_FreeContext(BTLZA_Context *ctx);
int BTLZA_BitArith_InputByte(BTLZA_Context *ctx);
void BTLZA_BitArith_OutputByte(BTLZA_Context *ctx, int i);
void BTLZA_BitArith_NormalizeOutput(BTLZA_Context *ctx);
void BTLZA_BitArith_NormalizeInput(BTLZA_Context *ctx);
void BTLZA_BitArith_FlushWBits(BTLZA_Context *ctx);
void BTLZA_BitArith_OutputFixedBit(BTLZA_Context *ctx, int i);
int BTLZA_BitArith_InputFixedBit(BTLZA_Context *ctx);
void BTLZA_BitArith_OutputBit(BTLZA_Context *ctx,int i, u32 w);
int BTLZA_BitArith_InputBit(BTLZA_Context *ctx, u32 w);
void BTLZA_BitArith_OutputModelBit(BTLZA_Context *ctx,int i, byte *mctx);
int BTLZA_BitArith_InputModelBit(BTLZA_Context *ctx, byte *mctx);
void BTLZA_BitArith_OutputFixedBits(BTLZA_Context *ctx,int v, int n);
int BTLZA_BitArith_InputFixedBits(BTLZA_Context *ctx, int n);
int BTLZA_BitArith_InputContextFixedBits(BTLZA_Context *ctx, int n);
int BTLZA_BitArith_InputContextFixedBitsLE(BTLZA_Context *ctx, int n);
void BTLZA_BitArith_OutputContextModelBits(BTLZA_Context *ctx,int v, int n, btlza_prob *mdl, int ctxmask);
int BTLZA_BitArith_InputContextModelBits(BTLZA_Context *ctx,int n, btlza_prob *mdl, int ctxmask);
void BTLZA_BitArith_OutputExtraBits(BTLZA_Context *ctx,int v, int n, btlza_prob *mdl, int ctxmask);
void BTLZA_BitArith_OutputContextModelBitsLE(BTLZA_Context *ctx,int v, int n, btlza_prob *mdl, int ctxmask);
int BTLZA_BitArith_InputContextModelBitsLE(BTLZA_Context *ctx,int n, btlza_prob *mdl, int ctxmask);
int BTLZA_BitArith_InputExtraBits(BTLZA_Context *ctx,int n, btlza_prob *mdl, int ctxmask);
int BTLZA_BitArith_SetupEncode(BTLZA_Context *ctx, byte *out, int sz);
int BTLZA_BitArith_SetupDecode(BTLZA_Context *ctx, byte *in, int sz);
int BTLZA_BitArith_SetupBeginEncode(BTLZA_Context *ctx);
int BTLZA_BitArith_SetupBeginDecode(BTLZA_Context *ctx);
int BTLZA_BitArith_SetupEndDecode(BTLZA_Context *ctx);
int btlza_ctxindex(int ctx, int mask);
void BTLZA_BitArith_EncodeSymbol6(BTLZA_Context *ctx, int v,btlza_prob *mdl, int ctxmask);
void BTLZA_BitArith_EncodeSymbol8(BTLZA_Context *ctx, int v,btlza_prob *mdl, int ctxmask);
void BTLZA_BitArith_EncodeSymbol9(BTLZA_Context *ctx, int v,btlza_prob *mdl, int ctxmask);
void BTLZA_BitArith_EncodeSymbol8LE(BTLZA_Context *ctx, int v,btlza_prob *mdl, int ctxmask);
int BTLZA_BitArith_DecodeSymbol6(BTLZA_Context *ctx,btlza_prob *mdl, int ctxmask);
int BTLZA_BitArith_DecodeSymbol8(BTLZA_Context *ctx,btlza_prob *mdl, int ctxmask);
int BTLZA_BitArith_DecodeSymbol9(BTLZA_Context *ctx,btlza_prob *mdl, int ctxmask);
int BTLZA_BitArith_DecodeSymbol8LE(BTLZA_Context *ctx,btlza_prob *mdl, int ctxmask);
void BTLZA_BitArith_ResetContextWeights(BTLZA_Context *ctx);
void BTLZA_BitArith_SetupContextBits(BTLZA_Context *ctx, int bits);
void BTLZA_BitArith_ResetRawContextWeights(BTLZA_Context *ctx);
void BTLZA_BitArith_SetupRawContextBits(BTLZA_Context *ctx, int bits);
BTEIFGL_API int BTLZA_BitArith_EncodeDataCtx(BTLZA_Context *ctx, byte *ibuf, int isz, byte *obuf, int osz, int flags);
BTEIFGL_API int BTLZA_BitArith_DecodeDataCtx(BTLZA_Context *ctx, byte *ibuf, int isz, byte *obuf, int osz);
BTEIFGL_API int BTLZA_BitArith_EncodeData(byte *ibuf, int isz, byte *obuf, int osz);
BTEIFGL_API int BTLZA_BitArith_DecodeData(byte *ibuf, int isz, byte *obuf, int osz);
BTEIFGL_API int BTLZA_BitArith_EncodeTestData(byte *ibuf, int isz, byte *obuf, int osz);
//AHSRC:btlzh/btlza_bitrange3.c
int btlza_ar3_ctxindex(int ctx, int mask);
void BTLZA_BitArith3_Init();
int BTLZA_BitArith3_InputByte(BTLZA_Context *ctx);
void BTLZA_BitArith3_OutputByte(BTLZA_Context *ctx, int i);
void BTLZA_BitArith3_NormalizeOutput(BTLZA_Context *ctx);
void BTLZA_BitArith3_NormalizeInput(BTLZA_Context *ctx);
void BTLZA_BitArith3_FlushWBits(BTLZA_Context *ctx);
void BTLZA_BitArith3_OutputFixedBit(BTLZA_Context *ctx, int i);
int BTLZA_BitArith3_InputFixedBit(BTLZA_Context *ctx);
void BTLZA_BitArith3_OutputBit(BTLZA_Context *ctx,int i, u32 w);
int BTLZA_BitArith3_InputBit(BTLZA_Context *ctx, u32 w);
void BTLZA_BitArith3_OutputModelBit(BTLZA_Context *ctx,int i, byte *mctx);
int BTLZA_BitArith3_InputModelBit(BTLZA_Context *ctx, byte *mctx);
void BTLZA_BitArith3_OutputFixedBits(BTLZA_Context *ctx,int v, int n);
int BTLZA_BitArith3_InputFixedBits(BTLZA_Context *ctx, int n);
int BTLZA_BitArith3_InputContextFixedBits(BTLZA_Context *ctx, int n);
int BTLZA_BitArith3_InputContextFixedBitsLE(BTLZA_Context *ctx, int n);
void BTLZA_BitArith3_OutputContextModelBits(BTLZA_Context *ctx,int v, int n, byte *mdl, int ctxmask);
int BTLZA_BitArith3_InputContextModelBits(BTLZA_Context *ctx,int n, byte *mdl, int ctxmask);
void BTLZA_BitArith3_OutputExtraBits(BTLZA_Context *ctx,int v, int n, byte *mdl, int ctxmask);
void BTLZA_BitArith3_OutputContextModelBitsLE(BTLZA_Context *ctx,int v, int n, byte *mdl, int ctxmask);
int BTLZA_BitArith3_InputContextModelBitsLE(BTLZA_Context *ctx,int n, byte *mdl, int ctxmask);
int BTLZA_BitArith3_InputExtraBits(BTLZA_Context *ctx,int n, byte *mdl, int ctxmask);
int BTLZA_BitArith3_SetupEncode(BTLZA_Context *ctx, byte *out, int sz);
int BTLZA_BitArith3_SetupDecode(BTLZA_Context *ctx, byte *in, int sz);
int BTLZA_BitArith3_SetupBeginEncode(BTLZA_Context *ctx);
int BTLZA_BitArith3_SetupBeginDecode(BTLZA_Context *ctx);
int BTLZA_BitArith3_SetupEndDecode(BTLZA_Context *ctx);
void BTLZA_BitArith3_EncodeSymbolN(BTLZA_Context *ctx, int v, int n,byte *mdl, int ctxmask);
void BTLZA_BitArith3_EncodeSymbol6(BTLZA_Context *ctx, int v,byte *mdl, int ctxmask);
void BTLZA_BitArith3_EncodeSymbol8(BTLZA_Context *ctx, int v,byte *mdl, int ctxmask);
void BTLZA_BitArith3_EncodeSymbol9(BTLZA_Context *ctx, int v,byte *mdl, int ctxmask);
void BTLZA_BitArith3_EncodeSymbol8LE(BTLZA_Context *ctx, int v,byte *mdl, int ctxmask);
void BTLZA_BitArith3_EncodeSymbolNLE(BTLZA_Context *ctx,int v, int n, byte *mdl, int ctxmask);
int BTLZA_BitArith3_DecodeSymbol6(BTLZA_Context *ctx,byte *mdl, int ctxmask);
int BTLZA_BitArith3_DecodeSymbol8(BTLZA_Context *ctx,byte *mdl, int ctxmask);
int BTLZA_BitArith3_DecodeSymbol9(BTLZA_Context *ctx,byte *mdl, int ctxmask);
int BTLZA_BitArith3_DecodeSymbol8LE(BTLZA_Context *ctx,byte *mdl, int ctxmask);
void BTLZA_BitArith3_ResetContextWeights(BTLZA_Context *ctx);
void BTLZA_BitArith3_SetupContextBits(BTLZA_Context *ctx, int bits);
void BTLZA_BitArith3_ResetRawContextWeights(BTLZA_Context *ctx);
void BTLZA_BitArith3_SetupRawContextBits(BTLZA_Context *ctx, int bits);
BTEIFGL_API int BTLZA_BitArith3_EncodeDataCtx(BTLZA_Context *ctx, byte *ibuf, int isz, byte *obuf, int osz, int flags);
BTEIFGL_API int BTLZA_BitArith3_DecodeDataCtx(BTLZA_Context *ctx, byte *ibuf, int isz, byte *obuf, int osz);
BTEIFGL_API int BTLZA_BitArith3_EncodeData(byte *ibuf, int isz, byte *obuf, int osz);
BTEIFGL_API int BTLZA_BitArith3_DecodeData(byte *ibuf, int isz, byte *obuf, int osz);
BTEIFGL_API int BTLZA_BitArith3_EncodeTestData(byte *ibuf, int isz, byte *obuf, int osz);
//AHSRC:btlzh/btlza_bitstream.c
void BTLZA_BitEnc_WriteByteBasic(BTLZA_Context *ctx, int v);
void BTLZA_BitEnc_WriteByteEscape(BTLZA_Context *ctx, int v);
void BTLZA_BitDec_WriteByteArithLE(BTLZA_Context *ctx, int v);
void BTLZA_BitDec_WriteByteArithBE(BTLZA_Context *ctx, int v);
void BTLZA_BitEnc_WriteByte(BTLZA_Context *ctx, int v);
void BTLZA_BitEnc_WriteBit(BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_Write2Bits(BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_Write3Bits(BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_Write4Bits(BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_Write5Bits(BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_Write6Bits(BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_Write7Bits(BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_Write2Bits(BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_Write3Bits(BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_Write4Bits(BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_Write5Bits(BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_Write6Bits(BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_Write7Bits(BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_WriteNBits(BTLZA_Context *ctx, int i, int n);
void BTLZA_BitEnc_FlushBits(BTLZA_Context *ctx);
int BTLZA_BitDec_ReadByteBasic(BTLZA_Context *ctx);
int BTLZA_BitDec_ReadByteEscape(BTLZA_Context *ctx);
int BTLZA_BitDec_ReadByteArithLE(BTLZA_Context *ctx);
int BTLZA_BitDec_ReadByteArithBE(BTLZA_Context *ctx);
int BTLZA_BitDec_ReadBitBasic(BTLZA_Context *ctx);
int BTLZA_BitDec_Read2Bits(BTLZA_Context *ctx);
int BTLZA_BitDec_Read3Bits(BTLZA_Context *ctx);
int BTLZA_BitDec_Read4Bits(BTLZA_Context *ctx);
int BTLZA_BitDec_Read5Bits(BTLZA_Context *ctx);
void BTLZA_BitDec_ReadAdjust(BTLZA_Context *ctx);
int BTLZA_BitDec_ReadNBitsBasic(BTLZA_Context *ctx, int n);
void BTLZA_BitDec_SkipNBitsBasic(BTLZA_Context *ctx, int n);
int BTLZA_BitDec_ReadByte(BTLZA_Context *ctx);
int BTLZA_BitDec_ReadBit(BTLZA_Context *ctx);
int BTLZA_BitDec_ReadNBits(BTLZA_Context *ctx, int n);
void BTLZA_BitDec_SkipNBits(BTLZA_Context *ctx, int n);
int BTLZA_BitDec_Read2Bits(BTLZA_Context *ctx);
int BTLZA_BitDec_Read3Bits(BTLZA_Context *ctx);
int BTLZA_BitDec_Read4Bits(BTLZA_Context *ctx);
int BTLZA_BitDec_Read5Bits(BTLZA_Context *ctx);
int BTLZA_BitDec_Read6Bits(BTLZA_Context *ctx);
int BTLZA_BitDec_Read7Bits(BTLZA_Context *ctx);
int BTLZA_BitDec_ReadExtraNBits(BTLZA_Context *ctx, int n);
int BTLZA_BitDec_ReadRawNBits(BTLZA_Context *ctx, int n);
int BTLZA_BitDec_ReadExtraNBitsBasic(BTLZA_Context *ctx, int n);
int BTLZA_BitArith_ReadExtraNBitsModel(BTLZA_Context *ctx, int n);
int BTLZA_BitDec_ReadLiteralBit(BTLZA_Context *ctx);
int BTLZA_BitDec_ReadDistanceBit(BTLZA_Context *ctx);
int BTLZA_BitDec_ReadRawBit(BTLZA_Context *ctx);
int BTLZA_BitDec_PeekWord(BTLZA_Context *ctx);
void BTLZA_BitDec_AlignByte(BTLZA_Context *ctx);
int BTLZA_BitDec_ReadAlignedByte(BTLZA_Context *ctx);
int BTLZA_BitDec_ReadAlignedWord(BTLZA_Context *ctx);
//AHSRC:btlzh/btlza_decode.c
int BTLZA_Decode_DecodeDistance(BTLZA_Context *ctx);
int BTLZA_Decode_DecodeRun(BTLZA_Context *ctx, int sym);
int BTLZA_Decode_DecodeSymbol(BTLZA_Context *ctx);
int BTLZA_Decode_DecodeBlockData(BTLZA_Context *ctx);
int BTLZA_Decode_DecodeBlock(BTLZA_Context *ctx);
BTEIFGL_API int BTLZA_Decode_DecodeStreamSz(byte *ibuf, byte *obuf, int isz,int osz, int *rosz, int flags);
BTEIFGL_API int BTLZA_DecodeStreamSzZl(byte *ibuf, byte *obuf, int isz,int osz, int *rosz, int flags);
BTEIFGL_API int BTLZA_DecodeStreamZl(byte *ibuf, byte *obuf, int isz, int osz);
//AHSRC:btlzh/btlza_encode.c
void BTLZA_Encode_UpdateWindowByte(BTLZA_Context *ctx,byte *s);
void BTLZA_Encode_UpdateWindowString(BTLZA_Context *ctx,byte *s, int l);
int BTLZA_Encode_LookupString(BTLZA_Context *ctx,byte *cs, byte *ce, int *rl, int *rd);
int BTLZA_Encode_LZCompressBuffer(BTLZA_Context *ctx,byte *ibuf, byte *obuf, byte *mbuf, int sz);
int BTLZA_Encode_LZCompressBufferRLE(BTLZA_Context *ctx,byte *ibuf, byte *obuf, byte *mbuf, int sz);
void BTLZA_Encode_StatLZRun(BTLZA_Context *ctx,byte *cs, int *lstat, int *dstat);
void BTLZA_Encode_StatLZBuffer(BTLZA_Context *ctx,byte *tbuf, byte *mbuf, int n, int *lstat, int *dstat);
void BTLZA_Encode_EncodeSymbol(BTLZA_Context *ctx, int v);
void BTLZA_Encode_EncodeDistSymbol(BTLZA_Context *ctx, int v);
void BTLZA_Encode_EncodeLZRun(BTLZA_Context *ctx, byte *cs);
void BTLZA_Encode_EncodeLZBuffer(BTLZA_Context *ctx,byte *tbuf, byte *mbuf, int n);
int BTLZA_Encode_EncodeBlock(BTLZA_Context *ctx,byte *ibuf, int isz);
int BTLZA_Encode_CheckAllocWindow(BTLZA_Context *ctx);
int BTLZA_Encode_EncodeStream_I(BTLZA_Context *ctx,byte *ibuf, byte *obuf, int isz, int osz);
int BTLZA_Encode_EncodeStreamLvl(byte *ibuf, byte *obuf,int isz, int osz, int l);
int BTLZA_Encode_EncodeStreamLvlTest(byte *ibuf, byte *obuf,int isz, int osz, int lvl);
