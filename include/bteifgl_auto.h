//AHSRC:base/frgl_concmds.c
FRGL_ConCmd *FRGL_LookupConCmd(char *name);
FRGL_ConCmd *FRGL_GetConCmd(char *name);
FRGL_ConCmd *FRGL_LookupConCmdPrefix(char *name);
BTEIFGL_API char *FRGL_ConCmdComplete(char *name);
//AHSRC:base/frgl_console.c
BTEIFGL_API int GfxFont_SetFont(char *name, int mode);
BTEIFGL_API int GfxFont_DrawChar(int c, int x, int y, int w, int h,int r, int g, int b, int a);
BTEIFGL_API int Con_HandleKey(int num, int down);
int Con_DefaultHandler(FRGL_ConsoleInfo *con, char *str);
char *Con_DefaultComplete(FRGL_ConsoleInfo *con, char *str);
BTEIFGL_API int Con_DoExecCmds(void);
BTEIFGL_API int Con_Update(float dt);
BTEIFGL_API int Con_UpdateInfo(FRGL_ConsoleInfo *con, float dt);
BTEIFGL_API int Con_StuffCmdInfo(FRGL_ConsoleInfo *con, char *str);
BTEIFGL_API int Con_StuffCmd(char *str);
BTEIFGL_API int Con_StuffCmdBuf(char *buf);
BTEIFGL_API int Con_ExecCmdBuf(char *name);
BTEIFGL_API int Con_IsDown();
BTEIFGL_API int Con_SetDown(int down);
BTEIFGL_API int Con_Clear();
BTEIFGL_API int Con_ClearInfo(FRGL_ConsoleInfo *con);
BTEIFGL_API FRGL_ConsoleInfo *FRGL_Console_AllocConsoleInfo();
BTEIFGL_API int Con_Init();
BTEIFGL_API int Con_ReInit();
BTEIFGL_API int Con_RenderBackground();
BTEIFGL_API int Con_RenderBackgroundInfo(FRGL_ConsoleInfo *con);
BTEIFGL_API int Con_Render();
BTEIFGL_API int Con_RenderInfo(FRGL_ConsoleInfo *con);
BTEIFGL_API int Con_RenderBackgroundVBO(FRGL_ConsoleInfo *con, FRGL_TextVBO *vbo);
BTEIFGL_API int Con_RenderTextVBO(FRGL_ConsoleInfo *con, FRGL_TextVBO *vbo);
BTEIFGL_API int Con_RenderInfo2(FRGL_ConsoleInfo *con);
void cb_scrollup();
void con_memcpy(short *dst, short *src, int cnt);
void con_memset(short *dst, int val, int cnt);
void con_strcpy(short *dst, short *src);
int con_strlen(short *src);
void con_strcpy16to8(char *dst, short *src);
void con_strcpy8to16(short *dst, char *src);
void Con_ScrollUpInfo(FRGL_ConsoleInfo *con);
void Con_HandleAnsi(char **rstr);
void Con_HandleAnsiInfo(FRGL_ConsoleInfo *con, char **rstr);
BTEIFGL_API void Con_WriteStringBase(char *str);
BTEIFGL_API void Con_WriteString(char *str);
BTEIFGL_API void Con_WriteString2(FRGL_ConsoleInfo *con, char *str);
BTEIFGL_API int Con_HandleKey(int num, int down);
BTEIFGL_API int Con_HandleKeyInfo(FRGL_ConsoleInfo *con, int num, int down);
BTEIFGL_API int Con_KeyDown(FRGL_ConsoleInfo *con, int key);
BTEIFGL_API int Con_Printf(char *s, ...);
BTEIFGL_API int Con_Printf2(FRGL_ConsoleInfo *con, char *s, ...);
//AHSRC:base/frgl_cvar.c
FRGL_Cvar *FRGL_LookupCvar(char *name);
FRGL_Cvar *FRGL_GetCvar(char *name);
FRGL_Cvar *FRGL_LookupCvarPrefix(char *name);
BTEIFGL_API char *FRGL_CvarComplete(char *name);
BTEIFGL_API char *FRGL_CvarGet(char *name);
BTEIFGL_API bool FRGL_CvarSet(char *name, char *val);
BTEIFGL_API bool FRGL_CvarSetDefault(char *name, char *val);
BTEIFGL_API double FRGL_CvarGetNum(char *name);
BTEIFGL_API bool FRGL_CvarSetNum(char *name, double val);
BTEIFGL_API int FRGL_CvarGetInt(char *name);
//AHSRC:base/frgl_draw.c
BTEIFGL_API int Draw_SetSolid_2D(float aspect, int xo, int yo, int xs, int ys);
BTEIFGL_API int Draw_SetSolid2_2D(float aspect, float size,float *org, float *angles, int xo, int yo, int xs, int ys);
BTEIFGL_API int Draw_SetOrtho_3D(float aspect, float size,float *org, float *angles, int x, int y, int w, int h);
BTEIFGL_API int Draw_SetSolid3_2D(float lxs, float lys,float *org, int xo, int yo, int xs, int ys);
BTEIFGL_API int Draw_SetSolid4_2D(float *mins, float *maxs, float *org, float *ang, int xo, int yo, int xs, int ys);
BTEIFGL_API int Draw_SetPerspective_3D(float aspect, float fov, float d, float *org, float *angles, int xo, int yo, int xs, int ys);
BTEIFGL_API int Draw_SetPerspective2_3D(float aspect, float fov, float width, float *org, float *rot, int xo, int yo, int xs, int ys);
BTEIFGL_API void FRGL_Setup2D();
BTEIFGL_API void FRGL_Setup3D(float *org, float *rot);
//AHSRC:base/frgl_drawarr.c
BTEIFGL_API void FRGL_DrawPrim_DrawArraysSimpleFlat(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz);
BTEIFGL_API void FRGL_DrawPrim_DrawArraysNormalFlat(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int normsize, int normtype, int normstep, void *norm);
BTEIFGL_API void FRGL_DrawPrim_DrawArraysNormalFlatRGB(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int normsize, int normtype, int normstep, void *norm, int rgbsize, int rgbtype, int rgbstep, void *rgb);
BTEIFGL_API void FRGL_DrawPrim_DrawArraysNormalTex(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int normsize, int normtype, int normstep, void *norm);
BTEIFGL_API void FRGL_DrawPrim_DrawArraysNormalTexRGB(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int normsize, int normtype, int normstep, void *norm, int rgbsize, int rgbtype, int rgbstep, void *rgb);
BTEIFGL_API void FRGL_DrawPrim_DrawArraysTexRGB(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int rgbsize, int rgbtype, int rgbstep, void *rgb);
BTEIFGL_API void FRGL_DrawPrim_DrawElementsNormalTexRGB(int prim, int base, int nxyz, int *indices, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int normsize, int normtype, int normstep, void *norm, int rgbsize, int rgbtype, int rgbstep, void *rgb);
//AHSRC:base/frgl_drawstub.c
BTEIFGL_API void frglBegin(int prim);
BTEIFGL_API void frglEnd(void);
BTEIFGL_API void frglVertex2fv(float *v);
BTEIFGL_API void frglVertex3fv(float *v);
BTEIFGL_API void frglVertex3dv(double *v);
BTEIFGL_API void frglTexCoord2fv(float *v);
BTEIFGL_API void frglNormal3fv(float *v);
BTEIFGL_API void frglNormal3sbv(sbyte *v);
BTEIFGL_API void frglNormal3bv(sbyte *v);
BTEIFGL_API void frglColor3fv(float *v);
BTEIFGL_API void frglColor4fv(float *v);
BTEIFGL_API void frglColor4ubv(byte *v);
BTEIFGL_API void frglColor3f(float r, float g, float b);
BTEIFGL_API void frglColor4f(float r, float g, float b, float a);
BTEIFGL_API void frglColor4ub(int r, int g, int b, int a);
BTEIFGL_API void frglTexCoord2f(float s, float t);
BTEIFGL_API void frglVertex2f(float x, float y);
BTEIFGL_API void frglVertex3f(float x, float y, float z);
BTEIFGL_API void frglNormal3f(float x, float y, float z);
BTEIFGL_API void frglColorMask(bool r, bool g, bool b, bool a);
BTEIFGL_API void frglEnableTexture2D(void);
BTEIFGL_API void frglDisableTexture2D(void);
BTEIFGL_API void frglBindTexture2D(int tex);
BTEIFGL_API void frglEnableLighting(void);
BTEIFGL_API void frglDisableLighting(void);
BTEIFGL_API void frglModelviewMatrix(void);
BTEIFGL_API void frglProjectionMatrix(void);
BTEIFGL_API void frglLoadIdentity(void);
BTEIFGL_API void frglPushMatrix(void);
BTEIFGL_API void frglPopMatrix(void);
BTEIFGL_API void frglMultMatrixf(float *mat);
BTEIFGL_API void frglTranslatef(float x, float y, float z);
BTEIFGL_API void frglScalef(float x, float y, float z);
BTEIFGL_API void frglRotatef(float th, float nx, float ny, float nz);
BTEIFGL_API void frglGetModelviewMatrix(float *v);
BTEIFGL_API void frglOrtho(float mx, float nx, float my, float ny, float mz, float nz);
//AHSRC:base/frgl_fonts.c
BTEIFGL_API int GfxFont_Register(char *name, char *buf, int w, int h, int s, int e);
BTEIFGL_API FRGL_FontInfo *GfxFont_FindFont(char *name);
BTEIFGL_API byte *GfxFont_FetchChar(FRGL_FontInfo *font,int c, int *w, int *h);
BTEIFGL_API int GfxFont_GetCellBit(byte *cell,int w, int h, int x, int y, int rw, int rh);
BTEIFGL_API int GfxFont_RenderCell(FRGL_FontInfo *font,FRGL_FontFrag *frag, int c);
BTEIFGL_API FRGL_FontFrag *GfxFont_TryFetchFrag(FRGL_FontInfo *font, int c);
BTEIFGL_API FRGL_FontFrag *GfxFont_FetchFrag(FRGL_FontInfo *font, int c);
BTEIFGL_API int GfxFont_DrawChar(int c, int x, int y, int w, int h,int r, int g, int b, int a);
BTEIFGL_API int GfxFont_DrawCharMode(int c,int x, int y, int w, int h, int r, int g, int b, int a, int m);
BTEIFGL_API int GfxFont_DrawCharModeQI(int c,int x, int y, int w, int h, int r, int g, int b, int a, int m);
BTEIFGL_API int GfxFont_DrawString(char *str,int x, int y, int w, int h, int r, int g, int b, int a);
BTEIFGL_API int GfxFont_DrawString2(char *str, int x, int y, int w, int h,int r, int g, int b, int a);
BTEIFGL_API int GfxFont_DrawFormatString(char *str, int x, int y, int w, int h, int r, int g, int b, int a);
BTEIFGL_API int GfxFont_SetTime(int time);
BTEIFGL_API int GfxFont_SetFont(char *name, int mode);
BTEIFGL_API int GfxFont_SetFontSize(char *name, int mode, int size);
BTEIFGL_API int GfxFont_LoadFont(char *name, char *fname);
BTEIFGL_API int GfxFont_LoadFontBase(char *name, char *fname, int base);
BTEIFGL_API int GfxFont_AddFontSearch(char *name, char *cname);
BTEIFGL_API int GfxFont_Init();
//AHSRC:base/frgl_fonts_qi2.c
int frgl_clampi(int v, int m, int n);
BTEIFGL_API FRGL_TextVBO *FRGL_TextVBO_Create(void);
BTEIFGL_API void FRGL_TextVBO_Reset(FRGL_TextVBO *ctx);
BTEIFGL_API void FRGL_TextVBO_Upload(FRGL_TextVBO *ctx);
BTEIFGL_API void FRGL_TextVBO_Draw(FRGL_TextVBO *ctx);
BTEIFGL_API void FRGL_TextVBO_Color4fv(FRGL_TextVBO *ctx, float *fv);
BTEIFGL_API void FRGL_TextVBO_Color4f(FRGL_TextVBO *ctx,float r, float g, float b, float a);
BTEIFGL_API void FRGL_TextVBO_TexCoord2fv(FRGL_TextVBO *ctx, float *fv);
BTEIFGL_API void FRGL_TextVBO_TexCoord2f(FRGL_TextVBO *ctx,float s, float t);
BTEIFGL_API void FRGL_TextVBO_VertexCheckExpand(FRGL_TextVBO *ctx);
BTEIFGL_API void FRGL_TextVBO_Vertex3fv(FRGL_TextVBO *ctx, float *fv);
BTEIFGL_API void FRGL_TextVBO_Vertex2f(FRGL_TextVBO *ctx, float x, float y);
BTEIFGL_API void FRGL_TextVBO_CheckExpandPrim(FRGL_TextVBO *ctx);
BTEIFGL_API void FRGL_TextVBO_Begin(FRGL_TextVBO *ctx, int prim);
BTEIFGL_API void FRGL_TextVBO_End(FRGL_TextVBO *ctx);
BTEIFGL_API void FRGL_TextVBO_BindTexture(FRGL_TextVBO *ctx, int tex);
BTEIFGL_API int FRGL_TextVBO_DrawCharModeQI2(FRGL_TextVBO *ctx,int c, int x, int y, int w, int h, int r, int g, int b, int a, int m);
//AHSRC:base/frgl_input.c
BTEIFGL_API int frgl_printf(char *str, ...);
BTEIFGL_API void *frgl_malloc(int sz);
BTEIFGL_API void frgl_free(void *ptr);
BTEIFGL_API void *frgl_talloc(char *ty, int sz);
BTEIFGL_API void *frgl_tatomic(char *ty, int sz);
BTEIFGL_API void *frgl_realloc(void *ptr, int sz);
VFILE *frgl_fopen(char *name, char *mode);
void thLockFastMutex(void *ptr);
void thUnlockFastMutex(void *ptr);
void *thFastMutex();
BTEIFGL_API void *vf_bufferin_sz(VFILE *fd, int *rsz);
BTEIFGL_API void *vf_bufferin(VFILE *fd);
BTEIFGL_API void *vf_loadfile(char *name, int *rsz);
BTEIFGL_API void vf_storefile(char *name, void *buf, int sz);
BTEIFGL_API void vf_freefdbuf(void *buf);
int FRGL_ParseChar(char **rs);
int FRGL_PeekChar(char **rs);
int FRGL_EmitChar(char **rs, int v);
BTEIFGL_API void *FRGL_GetState(void);
BTEIFGL_API void FRGL_SetupFrame(void);
BTEIFGL_API void FRGL_SetupMain(void);
BTEIFGL_API void FRGL_StartMain(void);
BTEIFGL_API void FRGL_FinishMain(void);
BTEIFGL_API void FRGL_FinishFrame(void);
BTEIFGL_API int FRGL_AddKeyHandler(int (*fcn)(int key, int down));
BTEIFGL_API int FRGL_KeyDown(int key);
BTEIFGL_API int FRGL_LastKeyDown(int key);
BTEIFGL_API int FRGL_GetKeyMap(byte *map);
BTEIFGL_API int GfxDev_Key_Event(int key, int down);
void FRGL_EndInputFrame();
BTEIFGL_API short *FRGL_GetKeybuf();
BTEIFGL_API int FRGL_TimeMS();
BTEIFGL_API int FRGL_DeltaMS(int *l);
BTEIFGL_API void FRGL_RegisterShutdown(void (*fcn)());
BTEIFGL_API void FRGL_Shutdown();
//AHSRC:base/frgl_shader.c
void *frglGetProcAddress(char *name);
BTEIFGL_API int FRGL_InitShader();
BTEIFGL_API int FRGL_LookupShaderSource(char *name, int ty);
BTEIFGL_API int FRGL_LoadShaderSource(char *name, int ty);
BTEIFGL_API int FRGL_LookupShader(char *name);
BTEIFGL_API int FRGL_LoadShader(char *name);
BTEIFGL_API int FRGL_BindShader(int num);
BTEIFGL_API int FRGL_UnbindShader();
BTEIFGL_API int FRGL_CheckGlExtension(char *str);
BTEIFGL_API int FRGL_GetFreeVideoMemory();
BTEIFGL_API int frglGetUniformLocation(int shader, char *name);
BTEIFGL_API int frglGetUniformLocationF(int shader, char *name);
BTEIFGL_API void FRGL_ErrorStatusUniform(char *name);
BTEIFGL_API int FRGL_CheckForUniform(char *name);
BTEIFGL_API int FRGL_Uniform1f(char *name, float x);
BTEIFGL_API int FRGL_Uniform2f(char *name, float x, float y);
BTEIFGL_API int FRGL_Uniform3f(char *name, float x, float y, float z);
BTEIFGL_API int FRGL_Uniform4f(char *name, float x, float y, float z, float w);
BTEIFGL_API int FRGL_Uniform1i(char *name, int x);
BTEIFGL_API int FRGL_Uniform2i(char *name, int x, int y);
BTEIFGL_API int FRGL_Uniform3i(char *name, int x, int y, int z);
BTEIFGL_API int FRGL_Uniform4i(char *name, int x, int y, int z, int w);
BTEIFGL_API int FRGL_Uniform1fv(char *name, int cnt, float *pf);
BTEIFGL_API int FRGL_Uniform2fv(char *name, int cnt, float *pf);
BTEIFGL_API int FRGL_Uniform3fv(char *name, int cnt, float *pf);
BTEIFGL_API int FRGL_Uniform4fv(char *name, int cnt, float *pf);
BTEIFGL_API void frglUniform1f(int var, float x);
BTEIFGL_API void frglUniform2f(int var, float x, float y);
BTEIFGL_API void frglUniform3f(int var, float x, float y, float z);
BTEIFGL_API void frglUniform4f(int var, float x, float y, float z, float w);
BTEIFGL_API void frglUniform1i(int var, int x);
BTEIFGL_API void frglUniform2i(int var, int x, int y);
BTEIFGL_API void frglUniform3i(int var, int x, int y, int z);
BTEIFGL_API void frglUniform4i(int var, int x, int y, int z, int w);
BTEIFGL_API void frglUniform1fv(int var, int cnt, float *pf);
BTEIFGL_API void frglUniform2fv(int var, int cnt, float *pf);
BTEIFGL_API void frglUniform3fv(int var, int cnt, float *pf);
BTEIFGL_API void frglUniform4fv(int var, int cnt, float *pf);
BTEIFGL_API int frglVertexAttrib1f(int index, float v0);
BTEIFGL_API int frglVertexAttrib2f(int index, float v0, float v1);
BTEIFGL_API int frglVertexAttrib3f(int index, float v0, float v1, float v2);
BTEIFGL_API int frglVertexAttrib4f(int index,float v0, float v1, float v2, float v3);
BTEIFGL_API int frglVertexAttrib1fv(int index, float *v);
BTEIFGL_API int frglVertexAttrib2fv(int index, float *v);
BTEIFGL_API int frglVertexAttrib3fv(int index, float *v);
BTEIFGL_API int frglVertexAttrib4fv(int index, float *v);
BTEIFGL_API int frglGetAttribLocation(int program, char *name);
BTEIFGL_API int FRGL_GetAttribLocation(char *name);
BTEIFGL_API int frglVertexAttribPointer(int index, int size, int type, int normalized, int stride, void *pointer);
BTEIFGL_API int frglEnableVertexAttribArray(int idx);
BTEIFGL_API int frglDisableVertexAttribArray(int idx);
BTEIFGL_API int frglActiveTexture(int idx);
BTEIFGL_API int frglMultiTexCoord1f(int idx, float s);
BTEIFGL_API int frglMultiTexCoord2f(int idx, float s, float t);
BTEIFGL_API int frglMultiTexCoord3f(int idx, float s, float t, float p);
BTEIFGL_API int frglMultiTexCoord4f(int idx, float s, float t, float p, float q);
BTEIFGL_API int frglMultiTexCoord1fv(int idx, float *v);
BTEIFGL_API int frglMultiTexCoord2fv(int idx, float *v);
BTEIFGL_API int frglMultiTexCoord3fv(int idx, float *v);
BTEIFGL_API int frglMultiTexCoord4fv(int idx, float *v);
BTEIFGL_API int frglBeginQuery(int tgt, int id);
BTEIFGL_API int frglEndQuery(int tgt);
BTEIFGL_API int frglGetQueryObjectiv(int id, int pname, int *params);
BTEIFGL_API int frglGetQueryObjectuiv(int id, int pname,unsigned int *params);
BTEIFGL_API int frglGenFramebuffers(int n, int *ids);
BTEIFGL_API int frglGenRenderbuffers(int n, int *ids);
BTEIFGL_API int frglBindFramebuffer(int target, int framebuffer);
BTEIFGL_API int frglBindRenderbuffer(int target, int framebuffer);
BTEIFGL_API int frglRenderbufferStorage(int target,int internalformat, int width, int height);
BTEIFGL_API int frglFramebufferTexture2D(int target, int attachment, int textarget, int texture, int level);
BTEIFGL_API int frglFramebufferRenderbuffer(int target, int attachment, int textarget, int texture);
BTEIFGL_API int frglCheckFramebufferStatus(int target);
BTEIFGL_API int frglDrawBuffers(int n, int *ids);
BTEIFGL_API int frglGenBuffers(int n, int *ids);
BTEIFGL_API int frglDeleteBuffers(int n, int *ids);
BTEIFGL_API int frglBindBuffer(int target, int buffer);
BTEIFGL_API int frglBufferData(int target, int size, const void *data, int usage);
BTEIFGL_API int frglBufferSubData(int target, int offset, int size, const void *data);
BTEIFGL_API void *frglMapBuffer(int target, int access);
BTEIFGL_API bool frglUnmapBuffer(int target);
BTEIFGL_API int frglCompressedTexImage2D(int		target, int		level, int		internalformat, int		width, int		height, int		border, int		imageSize, const void *data);
//AHSRC:base/frgl_texture.c
BTEIFGL_API int Tex_GetModeinfo(int *min, int *mag);
void tex_lock();
void tex_unlock();
BTEIFGL_API int Tex_Init2();
BTEIFGL_API int Tex_AllocTexnum();
BTEIFGL_API int Tex_FreeTexnum(int n);
BTEIFGL_API int Tex_MarkTexnum(int n);
BTEIFGL_API int Tex_DeleteTexture(int n);
BTEIFGL_API int Tex_FindFragment(int xs, int ys, int *x, int *y, int *z);
BTEIFGL_API int Tex_LockFragment(int x, int y, int z, int xs, int ys);
BTEIFGL_API int Tex_AllocFragment(int xs, int ys, int *x, int *y, int *z);
BTEIFGL_API int Tex_LoadTextureFragment(int xs, int ys, byte *buf,float *stmin, float *stmax);
BTEIFGL_API int Tex_Resample(byte *src, int iw, int ih, byte *dst, int ow, int oh);
BTEIFGL_API int Tex_ResampleMono(byte *src, int iw, int ih,byte *dst, int ow, int oh);
BTEIFGL_API int Tex_PadResample(int *src, int iw, int ih,int *dst, int ow, int oh);
BTEIFGL_API int Tex_HalfSample(byte *src, int w, int h);
BTEIFGL_API int Tex_HalfSample2(byte *src, int w, int h);
BTEIFGL_API double Tex_Sinc(double x);
BTEIFGL_API double Tex_Lanczos(double x, double a);
BTEIFGL_API int Tex_SincPolateRGBA8(byte *src, int w, int h,float x, float y, float *rgba, int n);
BTEIFGL_API int Tex_ResampleSinc(byte *src, int iw, int ih,byte *dst, int ow, int oh);
BTEIFGL_API int Tex_SplinePolateRGBA8(byte *src, int w, int h,float x, float y, float *rgba);
BTEIFGL_API int Tex_ResampleSpline(byte *src, int iw, int ih,byte *dst, int ow, int oh);
BTEIFGL_API int Tex_FilterBlur2(byte *src, byte *dst, int w, int h);
BTEIFGL_API int Tex_FilterHBlur(byte *src, byte *dst,int w, int h, float bf);
BTEIFGL_API int Tex_FilterVBlur(byte *src, byte *dst, int w, int h, float bf);
BTEIFGL_API int Tex_FilterBlurHV(byte *src, byte *dst,int w, int h, float xf, float yf);
BTEIFGL_API int Tex_FilterBlur(byte *src, byte *dst, int w, int h, int rad);
BTEIFGL_API int Tex_ResampleSpline2(byte *src, int iw, int ih,byte *dst, int ow, int oh);
BTEIFGL_API int Tex_SetUseColorFormat(int clrfmt);
BTEIFGL_API int Tex_GetLastColorFormat();
BTEIFGL_API int Tex_LoadTexture(int w, int h, byte *buf, int calcmip);
BTEIFGL_API int Tex_LoadTexture(int w, int h, byte *buf, int calcmip);
BTEIFGL_API int Tex_LoadTexture2(int w, int h, byte *buf,int mip, int rnum, int enc);
BTEIFGL_API int Tex_LoadTexture3A(int *wp, int *hp, byte *buf,int num, int clrs);
BTEIFGL_API int Tex_LoadTexture3B(int *wp, int *hp, byte *buf,int num, int clrs, int mip);
BTEIFGL_API int Tex_LoadTexture3(int *wp, int *hp, byte *buf, int num);
BTEIFGL_API int Tex_LoadTextureMono(int w, int h, byte *buf);
BTEIFGL_API byte *Img_LoadTGA(VFILE *fd, int *w, int *h);
BTEIFGL_API int Img_StoreTGA(VFILE *fd, byte *buf, int w, int h);
BTEIFGL_API byte *Img_LoadBMP(VFILE *fd, int *w, int *h);
BTEIFGL_API byte *Img_FlattenDIB(byte *img, int w, int h);
BTEIFGL_API byte *Img_UnFlattenDIB(byte *img, int *w, int *h);
BTEIFGL_API byte *Img_FlattenBPX(byte *img, int w, int h, int clrs, int *rsz);
BTEIFGL_API byte *Img_LoadBPX(VFILE *fd, int *w, int *h, int *rtxc);
BTEIFGL_API byte *Img_TryLoadTextureBPX(char *name, int *w, int *h, int *rtxc);
BTEIFGL_API int Img_SaveTextureCacheBPX(char *name, int w, int h, byte *buf, int calcmip);
BTEIFGL_API byte *Img_LoadPNG(VFILE *fd, int *w, int *h);
BTEIFGL_API int Tex_LoadFile(char *name, int *w, int *h);
BTEIFGL_API byte *Tex_GetBuffer(int n);
BTEIFGL_API void Tex_FreeRaw(void *p);
BTEIFGL_API byte *Tex_LoadFileRaw(char *name, int *w, int *h);
BTEIFGL_API byte *Tex_LoadFileExtAlphaRaw(char *name, char *ext, int *w, int *h);
BTEIFGL_API byte *Tex_LoadFileExtBaseSuffixRaw(char *name, char *ext, char *base, char *suff, int *w, int *h);
BTEIFGL_API byte *Tex_LoadFileJpegAlphaRaw(char *name, int *w, int *h);
BTEIFGL_API int Tex_LoadFileExtAlpha(char *name, char *ext, int *w, int *h);
BTEIFGL_API int Tex_LoadFileJpegAlpha(char *name, int *w, int *h);
BTEIFGL_API int Tex_LoadFileExtBaseSuffix(char *name, char *ext, char *base, char *suff, int *w, int *h);
BTEIFGL_API int Tex_LoadFileBaseSuffix(char *name, char *base, char *suff, int *w, int *h);
BTEIFGL_API byte *Tex_LoadImageBufferRaw(char *name, char *type,byte *imgbuf, int imgsz, int *rw, int *rh);
BTEIFGL_API int Tex_StoreFile(char *name, byte *buf, int w, int h);
BTEIFGL_API int Tex_Screenshot_Clipboard();
BTEIFGL_API int Tex_Screenshot(char *name);
BTEIFGL_API int Tex_Screenshot2(char *name);
BTEIFGL_API int Tex_DoScreenshot();
BTEIFGL_API int Tex_DoScreenshotFrame();
BTEIFGL_API int Tex_ScreenshotTexture();
BTEIFGL_API int Tex_ScreenshotDepthTexture();
BTEIFGL_API int Tex_FillTextureScreenshot(int texnum);
BTEIFGL_API int Tex_FillTextureScreenshotDepth(int texnum);
BTEIFGL_API int Tex_EmptyTexture(int xs, int ys);
BTEIFGL_API int Tex_EmptyTextureRGB(int xs, int ys);
BTEIFGL_API int Tex_ScreenshotBuffer(byte *buf,int xo, int yo, int xs, int ys);
BTEIFGL_API int Tex_ScreenshotBufferYUV(byte *obuf,int xo, int yo, int xs, int ys);
//AHSRC:base/frgl_util.c
BTEIFGL_API char *frgl_strdup(char *str);
BTEIFGL_API void *frgl_ralloc(int sz);
BTEIFGL_API char *frgl_rstrdup(char *str);
BTEIFGL_API char *frgl_rsprint(char *str, ...);
BTEIFGL_API char *frgl_rsprints(char *buf, char *str, ...);
BTEIFGL_API char **frgl_rsplit(char *s);
BTEIFGL_API char *frgl_rsgets(char *buf, int lim, char *str);
BTEIFGL_API char *frgl_rgets(char **str);
BTEIFGL_API char *frgl_rgettoken(char **str);
BTEIFGL_API char *frgl_rlltoa(s64 v);
BTEIFGL_API char *frgl_rdtoa(double v);
BTEIFGL_API char *frgl_rdtoa1p(double v);
BTEIFGL_API char *frgl_rdtoa2p(double v);
BTEIFGL_API char *frgl_rdtoa3p(double v);
BTEIFGL_API char *frgl_rdtoa4p(double v);
BTEIFGL_API s64 frgl_ratoi(char *str);
//AHSRC:base/frgl_texmat.c
int frgl_texmat_hashname(char *name);
BTEIFGL_API FRGL_TextureMaterial *FRGL_TexMat_LookupInfo(char *name);
BTEIFGL_API FRGL_TextureMaterial *FRGL_TexMat_GetInfo(char *name);
BTEIFGL_API int FRGL_TexMat_GetLoadIndex(char *name);
BTEIFGL_API int FRGL_TexMat_BindBasic(int idx);
//AHSRC:base/math_m3.c
BTEIFGL_API void Mat3F_Copy(float *a, float *b);
BTEIFGL_API void Mat3F_Transpose(float *a, float *b);
BTEIFGL_API void Mat3F_Identity(float *a);
BTEIFGL_API void Mat3F_Mat3Mult(float *a, float *b, float *c);
BTEIFGL_API void Mat3F_Mat3MultT(float *a, float *b, float *c);
BTEIFGL_API void Mat3F_Mat3TMult(float *a, float *b, float *c);
BTEIFGL_API void Mat3F_TransformVector(float *a, float *xform, float *c);
BTEIFGL_API void Mat3F_Inverse(float *a, float *b);
BTEIFGL_API void Mat3F_AxisTo3Matrix(float *a, float th, float *b);
BTEIFGL_API void Mat3F_Filter3Matrix(float *a, float *b);
BTEIFGL_API void Mat3F_Rotate3Matrix(float *a, float *v, float th, float *b);
BTEIFGL_API int Mat3F_ArcPolate(float *v0, float *v1, float *v2, float t,float *rnv);
BTEIFGL_API void Mat3F_LinePolate(float *v0, float *v1, float *v2, float t,float *n);
BTEIFGL_API void Mat3F_Interpolate(float *m0, float *m1, float *m2, float t);
//AHSRC:base/math_m4.c
BTEIFGL_API void Mat4F_Identity(float *a);
BTEIFGL_API void Mat4F_Copy(float *a, float *b);
BTEIFGL_API int Mat4F_Equal(float *a, float *b);
BTEIFGL_API void Mat4F_MatMult(float *a, float *b, float *c);
BTEIFGL_API void Mat4F_Transpose(float *a, float *b);
BTEIFGL_API void Mat4F_Inverse(float *a, float *b);
BTEIFGL_API void Mat4F_Inverse(float *a, float *b);
BTEIFGL_API void Mat4F_InverseTransform(float *a, float *b);
BTEIFGL_API void Mat4F_InterpolateTransform(float *m0, float *m1, float *m2, float t);
BTEIFGL_API void Mat4F_TransformVector(float *dir, float *xform, float *v);
BTEIFGL_API void Mat4F_TransformVectorT(float *dir, float *xform, float *v);
BTEIFGL_API void Mat4F_TransformNormal(float *dir, float *xform, float *norm);
BTEIFGL_API void Mat4F_TransformNormalT(float *dir, float *xform, float *norm);
BTEIFGL_API void Mat4F_TransformNormalN(float *dir, float *xform, float *norm);
BTEIFGL_API void Mat4F_TransformNormalNT(float *dir, float *xform, float *norm);
BTEIFGL_API void Mat4F_TransformPoint(float *point, float *xform, float *org);
BTEIFGL_API void Mat4F_TransformPointT(float *point, float *xform, float *org);
BTEIFGL_API void Mat4F_TransformPointN(float *point, float *xform, float *org);
BTEIFGL_API void Mat4F_TransformPointNT(float *point, float *xform, float *org);
BTEIFGL_API void Mat4F_TransformPointLocal(float *point, float *xform, float *org);
BTEIFGL_API void Mat4F_TransformPointLocalT(float *point, float *xform, float *org);
BTEIFGL_API void Mat4F_AxisTo4Matrix(float *a, float th, float *b);
BTEIFGL_API void Mat4F_Filter4Matrix(float *a, float *b);
BTEIFGL_API void Mat4F_Rotate4Matrix(float *a, float *v, float th, float *b);
BTEIFGL_API void Mat4F_Set4MatrixRotXY(float *a, float th);
BTEIFGL_API void Mat4F_Set4MatrixRotXZ(float *a, float th);
BTEIFGL_API void Mat4F_Set4MatrixRotYZ(float *a, float th);
BTEIFGL_API void Mat4F_Set4MatrixRotXW(float *a, float th);
BTEIFGL_API void Mat4F_Set4MatrixRotYW(float *a, float th);
BTEIFGL_API void Mat4F_Set4MatrixRotZW(float *a, float th);
BTEIFGL_API void Mat4F_Rotate4MatrixXY(float *a, float th, float *b);
BTEIFGL_API void Mat4F_Rotate4MatrixXZ(float *a, float th, float *b);
BTEIFGL_API void Mat4F_Rotate4MatrixYZ(float *a, float th, float *b);
BTEIFGL_API void Mat4F_Rotate4MatrixXW(float *a, float th, float *b);
BTEIFGL_API void Mat4F_Rotate4MatrixYW(float *a, float th, float *b);
BTEIFGL_API void Mat4F_Rotate4MatrixZW(float *a, float th, float *b);
BTEIFGL_API void Mat4F_Rotate4MatrixAngles(float *a, float *ang, float *b);
//AHSRC:base/gpio_rdtsc.c
void BGBRPI_Sched_DoSomeNops();
void BGBRPI_Sched_DelayLoop(int usec);
BTEIFGL_API void BGBRPI_Sched_Delay(int usec);
BTEIFGL_API void GPIO_InitRdtsc();
s64 GPIO_CyclesPerSecond();
s64 GPIO_Rdtsc();
BTEIFGL_API double GPIO_GetDeltaRdtsc(s64 *rt0);
BTEIFGL_API s64 GPIO_GetTimeUS(void);
BTEIFGL_API double GPIO_GetDeltaTimeUS(s64 *rt0);
BTEIFGL_API double GPIO_GetTimeRtcUS();
BTEIFGL_API double GPIO_GetDeltaTimeRtcUS(s64 *rt0);
BTEIFGL_API s64 GPIO_GetTimeRtcUS2(void);
//AHSRC:base/gpio_dummy_w32.c
s64 GPIO_WavGetTimeUS_FakeUS(void);
BTEIFGL_API void GPIO_DummySetTimeFakeUS(s64 us);
void GPIO_DummyInitPin(int pin);
void GPIO_DummyClosePin(int pin);
void GPIO_DummyUpdatePins();
void GPIO_DummyUpdatePinI(int pin, s64 dt);
BTEIFGL_API void GPIO_SetPinInput(int pin);
BTEIFGL_API void GPIO_SetPinOutput(int pin);
BTEIFGL_API void GPIO_SetPinMode(int pin, int mode);
BTEIFGL_API void GPIO_SetPinModeAlt(int pin, int mode);
BTEIFGL_API void GPIO_InputPinSetValue(int pin, int val);
BTEIFGL_API int GPIO_PinGetValue(int pin);
BTEIFGL_API void GPIO_PinSetValue(int pin, int val);
BTEIFGL_API int GPIO_PinGetOutMask(void);
BTEIFGL_API int GPIO_PinSetOutMask(int bits);
BTEIFGL_API int GPIO_PinSetOutMask8(int bits);
BTEIFGL_API int GPIO_PinSetOutMask8A(int bits);
BTEIFGL_API int GPIO_PinSetOutMask8B(int bits);
BTEIFGL_API int GPIO_PinGetInBits(void);
BTEIFGL_API void GPIO_Init();
BTEIFGL_API void GPIO_DeInit();
BTEIFGL_API void GPIO_I2C_Init();
BTEIFGL_API int GPIO_I2C_PollDone();
BTEIFGL_API void GPIO_I2C_WaitDone();
BTEIFGL_API void GPIO_I2C_CmdReadDevice(int dev, int len,byte *data);
BTEIFGL_API void GPIO_I2C_CmdWriteDevice(int dev, int len,byte *data);
//AHSRC:base/net_btemsg.c
BTEIFGL_API int BTEIFGL_NET_AddrEqual(VADDR *a, VADDR *b);
BTEIFGL_API BTEIFGL_PeerInfo *BTEIFGL_NET_LookupPeerAddr(VADDR *addr);
BTEIFGL_API BTEIFGL_PeerInfo *BTEIFGL_NET_LookupPeerGuid(VGUID *nodeid);
BTEIFGL_API int BTEIFGL_NET_RegisterPeer(VADDR *addr, VGUID *id, int nodefl);
BTEIFGL_API int BTEIFGL_NET_Init(void);
char *frgl_twocc2str(u16 tcc);
char *frgl_fourcc2str(u32 fcc);
int FRGL_ParseU16(byte **rcs);
u32 FRGL_ParseU24(byte **rcs);
u32 FRGL_ParseU32(byte **rcs);
void FRGL_ParseGUID(byte **rcs, VGUID *rval);
void FRGL_EmitU16(byte **rct, u16 val);
void FRGL_EmitU24(byte **rct, u32 val);
void FRGL_EmitU32(byte **rct, u32 val);
void FRGL_EmitGUID(byte **rct, VGUID guid);
int BTEIFGL_NET_ProcessSubMsgTWOCC(byte *msg, int sz, u32 fcc, VADDR *addr);
int BTEIFGL_NET_ProcessSubMsgFOURCC(byte *msg, int sz, u32 fcc, VADDR *addr);
int BTEIFGL_NET_CheckSync(byte *cs, byte *cse);
int BTEIFGL_NET_ProcessMsg(byte *msg, int sz, VADDR *addr);
BTEIFGL_API int BTEIFGL_NET_Update(double dt);
BTEIFGL_API int BTEIFGL_NET_SetImpulse(u32 imp1, u32 imp2);
BTEIFGL_API u32 BTEIFGL_NET_GetPinsMask(void);
BTEIFGL_API u32 BTEIFGL_NET_GetPinsActive(void);
BTEIFGL_API int BTEIFGL_NET_GetPinsTarget(int pin);
BTEIFGL_API u32 BTEIFGL_NET_GetPinsInMask(void);
BTEIFGL_API u32 BTEIFGL_NET_GetPinsOutMask(void);
BTEIFGL_API int BTEIFGL_NET_SetupSync(byte *cs);
BTEIFGL_API int BTEIFGL_NET_SendProbe(u32 ipv4);
BTEIFGL_API int BTEIFGL_NET_SendSimpleFcc(VADDR *addr,byte *data, int szData, u32 fcc);
//AHSRC:base/deflate.c
void PDZ2_WriteBit(int i);
void PDZ2_Write2Bits(int i);
void PDZ2_Write3Bits(int i);
void PDZ2_Write4Bits(int i);
void PDZ2_Write5Bits(int i);
void PDZ2_WriteNBits(int i, int n);
void PDZ2_FlushBits();
int PDZ2_BalanceTree_r(short *nodes, short *nlen, int root, int h, int ml);
void PDZ2_CalcLengths_r(short *nodes, byte *cl, int root, int h);
int PDZ2_BuildLengths(int *stat, int nc, byte *cl, int ml);
int PDZ2_BuildLengthsAdjust(int *stat, int nc, byte *cl, int ml);
void PDZ2_UpdateWindowByte(byte *s);
void PDZ2_UpdateWindowString(byte *s, int l);
int PDZ2_LookupString(byte *cs, byte *ce, int *rl, int *rd);
int PDZ2_LZCompressBuffer(byte *ibuf, byte *obuf, byte *mbuf, int sz);
int PDZ2_LZCompressBufferRLE(byte *ibuf, byte *obuf, byte *mbuf, int sz);
void PDZ2_StatLZRun(byte *cs, int *lstat, int *dstat);
void PDZ2_StatLZBuffer(byte *tbuf, byte *mbuf, int n,int *lstat, int *dstat);
void PDZ2_StatLengths(byte *cl, int nc, int *stat);
void PDZ2_EncodeSymbol(int v);
void PDZ2_EncodeLengths(byte *cl, int nc);
void PDZ2_EncodeLZRun(byte *cs);
void PDZ2_EncodeLZBuffer(byte *tbuf, byte *mbuf, int n);
int PDZ2_EncodeBlockStatic(byte *ibuf, int isz, int last);
int PDZ2_EncodeBlock(byte *ibuf, int isz, int last);
int PDZ2_EncodeStream_I(byte *ibuf, byte *obuf, int isz, int osz);
int PDZ2_EncodeStream(byte *ibuf, byte *obuf, int isz, int osz);
int PDZ2_EncodeStream64(byte *ibuf, byte *obuf, int isz, int osz);
int PDZ2_EncodeStreamLvl(byte *ibuf, byte *obuf, int isz, int osz, int l);
int PDZ2_EncodeStream64Lvl(byte *ibuf, byte *obuf,int isz, int osz, int lvl);
int PDZ2_EncodeStreamLvlZl(byte *ibuf, byte *obuf,int isz, int osz, int lvl);
int PDZ2_EncodeStream64LvlZl(byte *ibuf, byte *obuf,int isz, int osz, int lvl);
int PDZ2_EncodeStream64LvlZlTest(byte *ibuf, byte *obuf,int isz, int osz, int lvl);
//AHSRC:base/inflate.c
int PDUNZ_ReadByteBasic();
int PDUNZ_ReadByteEscape();
int PDUNZ_ReadBit();
int PDUNZ_Read2Bits();
int PDUNZ_Read3Bits();
int PDUNZ_Read4Bits();
int PDUNZ_Read5Bits();
int PDUNZ_ReadNBits(int n);
void PDUNZ_SkipNBits(int n);
int PDUNZ_PeekWord();
void PDUNZ_AlignByte();
int PDUNZ_ReadAlignedByte();
int PDUNZ_ReadAlignedWord();
int PDUNZ_TransposeByte(int v);
int PDUNZ_TransposeWord(int v);
int PDUNZ_SetupTable(byte *cl, int ncl,u16 *tc, u16 *tm, byte *tl, u16 *ti, u16 *tn);
int PDUNZ_SetupStatic();
int PDUNZ_DecodeSymbol();
int PDUNZ_DecodeDistance();
int PDUNZ_DecodeCodeLengths(byte *cl, int ncl);
int PDUNZ_DecodeHeader();
int PDUNZ_DecodeHeaderBTLZH();
int PDUNZ_DecodeRun(int sym);
int PDUNZ_DecodeBlockData();
int PDUNZ_DecodeBlock();
BTEIFGL_API int PDUNZ_DecodeStream(byte *ibuf, byte *obuf, int isz, int osz);
BTEIFGL_API int PDUNZ_DecodeStreamSz(byte *ibuf, byte *obuf, int isz, int osz, int *rosz, int flags);
BTEIFGL_API int PDUNZ_DecodeStreamSzZl(byte *ibuf, byte *obuf, int isz, int osz, int *rosz, int flags);
BTEIFGL_API int PDUNZ_DecodeStreamZl(byte *ibuf, byte *obuf, int isz, int osz);
//AHSRC:base/bufpng.c
u32 BGBBTJ_BufPNG_DataAdler32(void *buf, int sz, u32 lcrc);
void BGBBTJ_BufPNG_DataAdler32_Step16(byte *buf, int *rs1, int *rs2);
u32 BGBBTJ_BufPNG_DataAdler32(void *buf, int sz, u32 lcrc);
u32 BGBBTJ_BufPNG_CRC32(void *buf, int sz, u32 lcrc);
char *BGBBTJ_BufPNG_Fourcc2String(u32 fcc);
int BGBBTJ_BufPNG_Paeth(int a, int b, int c);
int BGBBTJ_BufPNG_Paeth(int a, int b, int c);
u32 BGBBTJ_BufPNG_ReadInt32BE(byte **rct);
u32 BGBBTJ_BufPNG_ReadFourcc(byte **rct);
BTEIFGL_API int BGBBTJ_BufPNG_DecodeOBuf(byte *csbuf, int cssz, byte *obuf, int *w, int *h);
void BGBBTJ_BufPNG_DecodeScan24_0(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan32_0(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan24_1(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan32_1(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan24_2(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan32_2(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan24_3(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan32_3(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan24_4(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan32_4(byte *s, byte *sca, byte *scb, int xs);
bool BGBBTJ_BufPNG_DecodeScan(byte *s, byte *sca, byte *scb, int xs, int ssz, int fm);
BTEIFGL_API byte *BGBBTJ_BufPNG_Decode(byte *csbuf, int cssz, int *w, int *h);
void BGBBTJ_BufPNG_WriteInt32LE(byte **rct, u32 v);
void BGBBTJ_BufPNG_WriteInt32BE(byte **rct, u32 v);
void BGBBTJ_BufPNG_WriteFourcc(byte **rct, u32 v);
void BGBBTJ_BufPNG_WriteChunk(byte **rct, u32 fcc, byte *buf, int len);
BTEIFGL_API int BGBBTJ_BufPNG_Encode(byte *ctbuf, int ctsz, byte *buf, int xs, int ys);
BTEIFGL_API int BGBBTJ_BufPNG_EncodeFast(byte *ctbuf, int ctsz, byte *buf, int xs, int ys);
//AHSRC:base/w32_glw.c
void gfxdrv_lock();
void gfxdrv_unlock();
void gfxdrv_sleep(int ms);
BTEIFGL_API void GfxDrv_GetWindowSize(int *xs, int *ys);
BTEIFGL_API void GfxDrv_GetWindowTexSize(int *xs, int *ys);
BTEIFGL_API void GfxDrv_GetWindowMaxSize(int *xs, int *ys);
BTEIFGL_API void GfxDrv_GetWindowMaxTexSize(int *xs, int *ys);
BTEIFGL_API bool GfxDrv_WindowIsActiveP(void);
BTEIFGL_API bool GfxDrv_WindowIsFullActiveP(void);
BTEIFGL_API bool GfxDrv_WindowIsFullscreenP(void);
BTEIFGL_API void GfxDrv_BeginDrawing();
BTEIFGL_API void GfxDrv_KeyEvent(int key, int down);
BTEIFGL_API void GfxDrv_EndDrawing(void);
void GfxDrv_V_HandleMessages();
int GfxDrv_V_SetWindowedMode();
int GfxDrv_V_GetDesktopSize();
int GfxDrv_V_SetFullscreenMode();
void GfxDrv_UpdateMode();
int GfxDrv_V_SetupWindow();
void GfxDrv_InitGL();
void GfxDrv_InitGL2();
BTEIFGL_API void GfxDrv_Shutdown();
int GfxDrv_MapKey(int key);
void GfxDrv_AppActivate(bool active, bool minimized);
BTEIFGL_API void GfxDrv_SetDefaults(char *label, int width, int height);
BTEIFGL_API void GfxDrv_SetDefaultFullscreen(int fs);
BTEIFGL_API void GfxDrv_SetFullscreenResolution(int width, int height);
BTEIFGL_API int GfxDrv_SetupMainDC();
BTEIFGL_API int GfxDrv_Start();
BTEIFGL_API int GfxDrv_SetupThreadShareLists();
BTEIFGL_API int GfxDrv_TeardownThreadShareLists();
BTEIFGL_API int GfxDrv_Init(void *hInstance, int nCmdShow, int *rkill);
BTEIFGL_API int GfxDrv_SetInstance(void *hInstance, int nCmdShow);
BTEIFGL_API int GfxDrv_SetKill(int *rkill);
//AHSRC:base/w32_mouse.c
BTEIFGL_API int GfxDrv_MouseGetRelPos(int *dx, int *dy, int *mb);
BTEIFGL_API int GfxDrv_MouseGetPos(int *mx, int *my, int *mb);
BTEIFGL_API int GfxDrv_MouseSetPos(int mx, int my);
//AHSRC:base/w32_sound.c
BTEIFGL_API int SoundDev_DeInit();
BTEIFGL_API int SoundDev_Init();
BTEIFGL_API int SoundDev_GetDMAPos();
BTEIFGL_API void SoundDev_Submit();
BTEIFGL_API int SoundDev_PaintSamples(short *buffer, int cnt);
BTEIFGL_API int SoundDev_WriteSamples(short *buffer, int cnt);
//AHSRC:base/w32_guid.c
int NET_CreateGuid(VGUID *buf);
int NET_GuidEqualP(VGUID *a, VGUID *b);
char *NET_Guid2String(VGUID *guid);
char *NET_String2Guid(VGUID *guid, char *s);
int NET_GuidIsSixteencc(VGUID *guid);
int NET_GuidFromName(VGUID *guid, char *name);
//AHSRC:base/w32_net.c
char *ipv4tostr(unsigned long addr);
char *ipv6tostr(byte *addr);
char *NET_Addr2Str(VADDR *addr);
VADDR *NET_Str2Addr(char *str, int proto);
BTEIFGL_API int NET_InitLow(void);
BTEIFGL_API VADDR *NET_LookupHost(char *name);
BTEIFGL_API VADDR *NET_LookupHost2(char *name, char *serv, int proto);
BTEIFGL_API VADDR *NET_DecodeHostnamePort(char *name, int defport);
BTEIFGL_API VADDR *NET_DecodeHostname(char *name);
//AHSRC:base/w32_udpip.c
char *ipv4tostr(unsigned long addr);
char *ipv6tostr(byte addr[16]);
BTEIFGL_API int NET_InitLow(void);
int __UDP_OpenSocket(int port);
int __UDP_OpenSocket(int port);
BTEIFGL_API int UDP_GetSocketAddr(int socket, VADDR *addrbuf);
int UDP_SockGet(void *buf, int lim, VADDR *from, int sock);
int UDP_SockSend(int sock, VADDR *targ, void *msg, int len, int flags);
BTEIFGL_API int UDP_OpenSocket(int port);
//AHSRC:mm/mm_cell.c
int BGBDT_MM_AllocSObjChk();
int BGBDT_MM_AllocMObjChk();
int BGBDT_FindFreeCellsChk(BGBDT_MM_ChunkInfo *chk, int cells);
int BGBDT_MM_AllocCellsChk(BGBDT_MM_ChunkInfo *chk, int cells);
int BGBDT_FreeCellsChk(BGBDT_MM_ChunkInfo *chk, int idx, int cells);
int BGBDT_MM_LookupSObjChunkPtr(byte *ptr);
int BGBDT_MM_LookupMObjChunkPtr(byte *ptr);
int BGBDT_MM_LookupSObjChunkCellPtr(byte *ptr, int *rcell);
int BGBDT_MM_LookupMObjChunkCellPtr(byte *ptr, int *rcell);
int BGBDT_MM_LookupSObjChunkCellBasePtr(byte *ptr, int *rcell);
int BGBDT_MM_LookupMObjChunkCellBasePtr(byte *ptr, int *rcell);
byte *BGBDT_MM_LookupSObjPtrBase(byte *ptr);
byte *BGBDT_MM_LookupMObjPtrBase(byte *ptr);
void BGBDT_MM_FreeSObjPtr(byte *ptr);
void BGBDT_MM_FreeMObjPtr(byte *ptr);
byte *BGBDT_MM_AllocSObjCells(int cells);
byte *BGBDT_MM_AllocMObjCells(int cells);
byte *BGBDT_MM_AllocObjectInner(int size);
void BGBDT_MM_FreeObjectInner(byte *ptr);
byte *BGBDT_MM_GetObjectPtrBase(byte *ptr);
BTEIFGL_API void *BGBDT_MM_GetPtrForObjId(int objid);
BTEIFGL_API int BGBDT_MM_GetObjIdForPtr(void *ptr);
BTEIFGL_API void *BGBDT_MM_GetDataPtrForObjId(int objid);
//AHSRC:mm/mm_clsobj.c
BGBDTC_ClassInfo *BGBDTC_AllocClass();
BGBDTC_ClassInfo *BGBDTC_LookupClassQName(char *qname);
BGBDTC_ClassInfo *BGBDTC_GetClassQName(char *qname);
BGBDTC_ClassInfo *BGBDTC_LookupClassSqGix(int sqid, int gix);
BGBDTC_ClassInfo *BGBDTC_GetClassSqGix(int sqid, int gix);
BGBDTC_SlotInfo *BGBDTC_FetchClassSlotIndex(BGBDTC_ClassInfo *cls, int idx);
int BGBDTC_CheckExpandClassSlotIndex(BGBDTC_ClassInfo *cls, int idx);
BGBDTC_SlotInfo *BGBDTC_GetClassSlotIndex(BGBDTC_ClassInfo *cls, int idx);
BGBDTC_SlotInfo *BGBDTC_LookupClassSlotName(BGBDTC_ClassInfo *cls, char *name);
BGBDTC_SlotInfo *BGBDTC_GetClassSlotName(BGBDTC_ClassInfo *cls, char *name);
//AHSRC:mm/mm_lobj.c
int BGBDT_MM_AllocLObjInfo(void);
void BGBDT_MM_FreeLObjInfo(int cni);
int BGBDT_MM_LObjInfoToIndex(BGBDT_MM_LObjInfo *inf);
int BGBDT_MM_LObjRebalNode(int cni);
int BGBDT_MM_InsertLObjR(int cni, int lni);
int BGBDT_MM_InsertLObj(int lni);
int BGBDT_MM_AllocLObj(int sz);
byte *BGBDT_MM_AllocLObjPtr(int sz);
int BGBDT_MM_UnlinkLObjR(int cni, int lni);
int BGBDT_MM_UnlinkLObj(int lni);
int BGBDT_MM_LookupLObjR(int cni, byte *ptr);
int BGBDT_MM_LookupLObj(byte *ptr);
byte *BGBDT_MM_LookupLObjBase(byte *ptr);
void BGBDT_MM_FreeLObjPtr(byte *ptr);
byte *BGBDT_MM_GetLObjPtrForIndex(int lni);
//AHSRC:mm/mm_mapobj.c
int BGBDT_MapObj_HashNameSig(char *name, char *sig, char *flsig);
int BGBDT_MapObj_CheckStrMatch(char *str, char *ref);
int BGBDT_MapObj_CheckStrMatch2(char *str, char *ref);
BGBDT_MapObjFieldInfo *BGBDT_MapObj_GetFieldInfoForIndex(int sli);
int BGBDT_MapObj_LookupFieldIndex(char *name, char *sig, char *flsig);
int BGBDT_MapObj_GetFieldIndex(char *name, char *sig, char *flsig);
char *BGBDT_MapObj_GetFieldIndexName(int fidx);
char *BGBDT_MapObj_GetFieldIndexSig(int fidx);
char *BGBDT_MapObj_GetFieldIndexFlSig(int fidx);
BGBDT_MapObjHead *BGBDT_MapObj_AllocObj();
BGBDT_MapObjNode *BGBDT_MapObj_AllocNode();
void BGBDT_MapObj_FreeObjNodes(BGBDT_MapObjNode *no);
void BGBDT_MapObj_FreeObj(BGBDT_MapObjHead *obj);
int BGBDT_MapObj_SlotSoftMatch(int sli, int sref);
dtVal *BGBDT_MapObj_LookupNodeSlotSoftRef(BGBDT_MapObjHead *obj,BGBDT_MapObjNode *no, int sli);
dtVal *BGBDT_MapObj_LookupObjSlotSoftRef(BGBDT_MapObjHead *obj, int sli);
dtVal *BGBDT_MapObj_LookupNodeSlotRef(BGBDT_MapObjHead *obj,BGBDT_MapObjNode *no, int sli);
dtVal *BGBDT_MapObj_LookupObjSlotRef(BGBDT_MapObjHead *obj, int sli);
void BGBDT_MapObj_InsertOrSplitNode(BGBDT_MapObjHead *obj,BGBDT_MapObjNode *no, BGBDT_MapObjNode *cno1, BGBDT_MapObjNode *cno2);
dtVal *BGBDT_MapObj_GetNodeSlotRef(BGBDT_MapObjHead *obj,BGBDT_MapObjNode *no, int sli);
dtVal *BGBDT_MapObj_GetObjSlotRef(BGBDT_MapObjHead *obj, int sli);
dtVal BGBDT_MapObj_LookupObjSlotValueName(BGBDT_MapObjHead *obj, char *name);
int BGBDT_MapObj_SetObjSlotValueName(BGBDT_MapObjHead *obj, char *name, dtVal val);
int BGBDT_MapObj_BindObjSlotValueName(BGBDT_MapObjHead *obj, char *name, dtVal val);
BTEIFGL_API dtVal BGBDT_MapObj_AllocObjv();
BTEIFGL_API int BGBDT_MapObj_BindObjvSlotValueName(dtVal objv, char *name, dtVal val);
BTEIFGL_API dtVal BGBDT_MapObj_GetObjvSlotValue(dtVal objv, int sli);
BTEIFGL_API dtVal BGBDT_MapObj_GetObjvSlotValueName(dtVal objv, char *name);
BTEIFGL_API int BGBDT_MapObj_IsObjectP(dtVal objv);
int BGBDT_MapObj_QueryNodeSlotList(BGBDT_MapObjHead *obj,BGBDT_MapObjNode *no, int *slis, int mslis);
BTEIFGL_API int BGBDT_MapObj_GetObjSlotCount(dtVal objv);
BTEIFGL_API int BGBDT_MapObj_QueryObjSlotList(dtVal objv, int *slis, int mslis);
//AHSRC:mm/mm_objty.c
int BGBDT_MM_QHashName(char *name);
int BGBDT_MM_LookupIndexObjTypeName(char *name);
int BGBDT_MM_GetIndexObjTypeName(char *name);
char *BGBDT_MM_GetObjTypeNameForIndex(int idx);
int BGBDT_MM_GetIndexObjLLn(char *fn, int ln);
int BGBDT_MM_QHashBytes(byte *buf, int sz);
byte *BGBDT_MM_AllocObject(int tyid, int size, int lln);
void *BGBDT_MM_AllocLLn(char *type, int size, char *fn, int ln);
void *BGBDT_MM_ReallocLLn(void *ptr, int size, char *fn, int ln);
int BGBDT_MM_GetSize(void *ptr);
int BGBDT_MM_GetTypeID(void *ptr);
char *BGBDT_MM_GetTypeName(void *ptr);
void *BGBDT_MM_GetBase(void *ptr);
void BGBDT_MM_FreeAny(void *ptr);
void BGBDT_MM_Free(void *ptr);
void BGBDT_MM_Destroy(void *ptr);
dtVal BGBDT_MM_DtvWrapObjPtrF(void *ptr);
dtVal BGBDT_MM_DtvWrapObjPtr(void *ptr);
//AHSRC:mm/mm_tagarith.c
dtVal BGBDT_TagAri_Add(dtVal a, dtVal b);
dtVal BGBDT_TagAri_Sub(dtVal a, dtVal b);
dtVal BGBDT_TagAri_Mul(dtVal a, dtVal b);
dtVal BGBDT_TagAri_Div(dtVal a, dtVal b);
dtVal BGBDT_TagAri_Mod(dtVal a, dtVal b);
dtVal BGBDT_TagAri_And(dtVal a, dtVal b);
dtVal BGBDT_TagAri_Or(dtVal a, dtVal b);
dtVal BGBDT_TagAri_Xor(dtVal a, dtVal b);
dtVal BGBDT_TagAri_Shl(dtVal a, dtVal b);
dtVal BGBDT_TagAri_Shr(dtVal a, dtVal b);
dtVal BGBDT_TagAri_Sar(dtVal a, dtVal b);
dtVal BGBDT_TagAri_Neg(dtVal a);
dtVal BGBDT_TagAri_Not(dtVal a);
dtVal BGBDT_TagAri_LNot(dtVal a);
int BGBDT_TagAri_Compare(dtVal a, dtVal b);
//AHSRC:mm/mm_tagarr.c
int BGBDT_TagArr_BaseTypeSize(int bty);
BTEIFGL_API dtVal BGBDT_TagArr_NewArray(int size, int bty);
int BGBDT_TagArr_IsArrayP(dtVal objv);
BTEIFGL_API dtVal BGBDT_TagTy_EncodeRotLong(s64 value);
BTEIFGL_API s64 BGBDT_TagTy_DecodeRotLong(dtVal val);
//AHSRC:mm/mm_tagprint.c
BTEIFGL_API BGBDT_MM_ParsePrintInfo *BGBDT_MM_AllocParsePrintInfo();
BTEIFGL_API int BGBDT_MM_FreeParsePrintInfo(BGBDT_MM_ParsePrintInfo *inf);
int bgbdt_mm_strprint_putstr(BGBDT_MM_ParsePrintInfo *inf, char *str);
BTEIFGL_API BGBDT_MM_ParsePrintInfo *BGBDT_MM_NewStringPrinter(char *strbuf, int szbuf);
int BGBDT_MM_PrintPutStr(BGBDT_MM_ParsePrintInfo *inf, char *str);
int BGBDT_MM_PrintPutInt(BGBDT_MM_ParsePrintInfo *inf, s64 v);
int BGBDT_MM_PrintPutIntHex64(BGBDT_MM_ParsePrintInfo *inf, s64 v);
int BGBDT_MM_PrintPutIntHex64B(BGBDT_MM_ParsePrintInfo *inf, s64 v);
int BGBDT_MM_PrintPutFloat(BGBDT_MM_ParsePrintInfo *inf, double v);
int BGBDT_MM_PrintPutPrintf(BGBDT_MM_ParsePrintInfo *inf, char *str, ...);
int BGBDT_MM_PrintPutString(BGBDT_MM_ParsePrintInfo *inf, char *str);
int BGBDT_MM_PrintObjValue(BGBDT_MM_ParsePrintInfo *inf, dtVal val);
int BGBDT_MM_PrintMapObjValue(BGBDT_MM_ParsePrintInfo *inf, dtVal val);
int BGBDT_MM_PrintTagArr(BGBDT_MM_ParsePrintInfo *inf, dtVal val);
BTEIFGL_API int BGBDT_MM_PrintValue(BGBDT_MM_ParsePrintInfo *inf, dtVal val);
BTEIFGL_API int BGBDT_MM_PrintValueToStrBuf(char *strbuf, int szbuf, dtVal val);
BTEIFGL_API int BGBDT_MM_FormatPrintTabs(BGBDT_MM_ParsePrintInfo *inf, int ntab);
int BGBDT_MM_FormatObjValue(BGBDT_MM_ParsePrintInfo *inf, dtVal val);
int BGBDT_MM_FormatMapObjValue(BGBDT_MM_ParsePrintInfo *inf, dtVal val);
int BGBDT_MM_FormatTagArr(BGBDT_MM_ParsePrintInfo *inf, dtVal val);
BTEIFGL_API int BGBDT_MM_FormatValue(BGBDT_MM_ParsePrintInfo *inf, dtVal val);
BTEIFGL_API int BGBDT_MM_FormatValueToStrBuf(char *strbuf, int szbuf, dtVal val);
//AHSRC:mm/mm_tagstr.c
void BGBDT_TagStr_InitTypes(void);
char *BGBDT_TagStr_TabStrdup(struct BGBDT_TagStrTab_s *tab, char *str);
int bgbdt_strcmp16(u16 *s1, u16 *s2);
int bgbdt_strlen16(u16 *str);
void bgbdt_strcpy16(u16 *sdst, u16 *ssrc);
u16 *BGBDT_TagStr_TabStrdup16(struct BGBDT_TagStrTab16_s *tab, u16 *str);
BTEIFGL_API char *BGBDT_TagStr_Strdup(char *str);
BTEIFGL_API char *BGBDT_TagStr_StrdupL1(char *str);
BTEIFGL_API u16 *BGBDT_TagStr_Strdup16(u16 *str);
BTEIFGL_API char *BGBDT_TagStr_StrSymbol(char *str);
BTEIFGL_API char *BGBDT_TagStr_StrKeyword(char *str);
BTEIFGL_API u16 *BGBDT_TagStr_Strdup16u8(char *str);
BTEIFGL_API dtVal BGBDT_TagStr_String(char *str);
BTEIFGL_API dtVal BGBDT_TagStr_StringAsc(char *str);
BTEIFGL_API dtVal BGBDT_TagStr_String16(u16 *str);
BTEIFGL_API dtVal BGBDT_TagStr_String16u8(byte *str);
BTEIFGL_API dtVal BGBDT_TagStr_Symbol(char *str);
BTEIFGL_API dtVal BGBDT_TagStr_Keyword(char *str);
BTEIFGL_API int BGBDT_TagStr_IsStringP(dtVal val);
BTEIFGL_API int BGBDT_TagStr_IsSymbolP(dtVal val);
BTEIFGL_API int BGBDT_TagStr_IsKeywordP(dtVal val);
BTEIFGL_API char *BGBDT_TagStr_GetUtf8(dtVal val);
BTEIFGL_API dtVal BGBDT_TagStr_StringAdjustOffset(dtVal val, int idx);
//AHSRC:mm/mm_thread.c
thContext *thGetContext();
void *BIPRO_LookupLabelOS(char *name);
void bipro_thread_markctx(thContext *inf);
void bipro_thread_mark();
void bipro_thread_init();
int thAllocTls();
int thAllocTlsName(char *name, int sz);
void thFreeTls(int idx);
void *thGetTlsValue(int idx);
void thSetTlsValue(int idx, void *val);
void *thGetTlsPtr(int idx);
void *thThread(int (*fcn)(void *ptr), void *ptr);
void BIPRO_SuspendThreads();
void BIPRO_ResumeThreads();
void BIPRO_HandleThreadStates(void (*fcn)(thContext *inf));
void BIPRO_GetThreadRegisterState(thContext *inf, BIPRO_RegisterState *regs);
void *thMutex();
void thLockMutex(void *p);
int thTryLockMutex(void *p);
void thUnlockMutex(void *p);
void thFreeMutex(void *p);
void *thFastMutex();
void thLockFastMutex(void *p);
int thTryLockFastMutex(void *p);
void thLockFastMutexLLn(void *p, char *fn, int ln);
int thTryLockFastMutexLLn(void *p, char *fn, int ln);
void thUnlockFastMutex(void *p);
void thFreeFastMutex(void *p);
void thSleep(int ms);
thContext *thGetContext();
int thGetTlsTlsW32();
void thWaitPtr(void *ptr);
void thSignalPtr(void *ptr);
void BIPRO_SuspendThreads();
void BIPRO_ResumeThreads();
void *BIPRO_ThreadProcLnx(void *parm);
void *thThread(int (*fcn)(void *ptr), void *ptr);
void *thMutexLL();
void *thMutex();
void thLockMutex(void *p);
int thTryLockMutex(void *p);
void thUnlockMutex(void *p);
void thFreeMutex(void *p);
void *thFastMutex();
void thLockFastMutex(void *p);
int thTryLockFastMutex(void *p);
void thUnlockFastMutex(void *p);
void thFreeFastMutex(void *p);
void thSleep(int ms);
thContext *thGetContext();
void thWaitPtr(void *ptr);
void thSignalPtr(void *ptr);
char *bipro_strdup(char *str);
void BIPRO_AddExeSection(char *name, s64 va, s64 sz, int fl);
char *BIPRO_LookupExeSectionPtrName(void *ptr);
void BIPRO_AddSym(char *name, void *ptr);
void *BIPRO_LookupLabel(char *name);
int BIPRO_GetModuleListOS(char **buf, int max);
char **BIPRO_GetEnvironOS();
void BIPRO_ProbeTst(byte *buf, int sz);
void BIPRO_UpdateDllsOS(void *hmod);
int BIPRO_InitDllsOS();
int BIPRO_LoadDynamicOS(char *name);
void *BIPRO_LoadModuleFileDataOS(char *name, int *rsz);
void BIPRO_FreeModuleDataOS(void *buf);
void BIPRO_UpdateProxyOS(char *name, void *ptr);
void *BIPRO_LookupLabelOS_1(char *name);
void *BIPRO_LookupLabelOS_2(char *name, int *rfl);
void *BIPRO_LookupLabelOS(char *name);
int BIPRO_InitDbgHelpOS();
char *BIPRO_NameOS(void *addr, void **addr2);
int BIPRO_ProcessMAP(char *name);
int BIPRO_ProcessEXE(char *name);
void *BIPRO_LookupLabelOS(char *name);
char *BIPRO_LookupAddrNameOS(void *ptr, void **rbase);
char *BIPRO_GetNamePtr(void *ptr);
char *BIPRO_GetLastNamePtr(void *ptr, void **rbp);
char *BIPRO_GetAddrName(void *ptr);
char *BIPRO_GetAddrLastName(void *ptr, void **rbp);
char *BIPRO_LookupSectionAddrName(void *ptr);
//AHSRC:bsvm2c/bs2p_astnode.c
char *BS2P_StrSym(BS2CC_CompileContext *ctx, char *str);
dtVal BS2P_NewAstNode(BS2CC_CompileContext *ctx, char *tag);
void BS2P_SetAstNodeAttr(dtVal obj, char *attr, dtVal val);
void BS2P_SetAstNodeAttrS(dtVal obj, char *attr, char *val);
void BS2P_SetAstNodeAttrStr(dtVal obj, char *attr, char *val);
void BS2P_SetAstNodeAttrI(dtVal obj, char *attr, s64 val);
dtVal BS2P_GetAstNodeAttr(dtVal obj, char *attr);
char *BS2P_GetAstNodeAttrS(dtVal obj, char *attr);
s64 BS2P_GetAstNodeAttrI(dtVal obj, char *attr);
int BS2P_CheckAstNodeTag(dtVal obj, char *tag);
char *BS2P_GetAstNodeTag(dtVal obj);
dtVal BS2P_NewAstArray(BS2CC_CompileContext *ctx, int sz);
int BS2P_GetAstArraySize(dtVal obj);
dtVal BS2P_GetAstArrayIdx(dtVal obj, int idx);
void BS2P_SetAstArrayIdx(dtVal obj, int idx, dtVal val);
dtVal BS2P_NewAstWrapArray(BS2CC_CompileContext *ctx, dtVal *arrd, int sz);
dtVal BS2P_ParseWrapString(BS2CC_CompileContext *ctx, char *str);
dtVal BS2P_ParseWrapIdentifier(BS2CC_CompileContext *ctx, char *str);
dtVal BS2P_ParseWrapQName(BS2CC_CompileContext *ctx, char *str);
dtVal BS2P_ParseWrapSimpleCmd(BS2CC_CompileContext *ctx, char *str);
dtVal BS2P_ParseWrapSimpleCmdInt(BS2CC_CompileContext *ctx,char *str, int val);
dtVal BS2P_ParseWrapSimpleCmdVal(BS2CC_CompileContext *ctx,char *str, dtVal val);
dtVal BS2P_ParseWrapSimpleCmdStr(BS2CC_CompileContext *ctx,char *str, char *sval);
dtVal BS2P_ParseWrapSimpleTag(BS2CC_CompileContext *ctx, char *tag);
dtVal BS2P_ParseWrapSimpleTagInt(BS2CC_CompileContext *ctx,char *tag, int val);
dtVal BS2P_ParseWrapSimpleTagVal(BS2CC_CompileContext *ctx,char *tag, dtVal val);
dtVal BS2P_ParseWrapSimpleTagStr(BS2CC_CompileContext *ctx,char *tag, char *sval);
dtVal BS2P_ParseWrapUnTag(BS2CC_CompileContext *ctx,char *op, dtVal ln);
dtVal BS2P_ParseWrapBinTag(BS2CC_CompileContext *ctx,char *op, dtVal ln, dtVal rn);
dtVal BS2P_ParseWrapUnary(BS2CC_CompileContext *ctx,char *op, dtVal ln);
dtVal BS2P_ParseWrapBinary(BS2CC_CompileContext *ctx,char *op, dtVal ln, dtVal rn);
dtVal BS2P_ParseWrapTern(BS2CC_CompileContext *ctx,dtVal cc, dtVal ln, dtVal rn);
dtVal BS2P_ParseWrapTagIf(BS2CC_CompileContext *ctx,char *tag, dtVal cc, dtVal ln);
dtVal BS2P_ParseWrapTagIfElse(BS2CC_CompileContext *ctx,char *tag, dtVal cc, dtVal ln, dtVal rn);
dtVal BS2P_ParseWrapTagFor(BS2CC_CompileContext *ctx,char *tag, dtVal in, dtVal cc, dtVal st, dtVal th);
dtVal BS2P_ParseWrapTagBinary(BS2CC_CompileContext *ctx,char *tag, char *op, dtVal ln, dtVal rn);
dtVal BS2P_ParseWrapArray(BS2CC_CompileContext *ctx, dtVal lst);
dtVal BS2P_ParseWrapObject(BS2CC_CompileContext *ctx, dtVal lst);
//AHSRC:bsvm2c/bs2p_decl.c
dtVal BS2P_ParseModifierList(BS2CC_CompileContext *ctx);
dtVal BS2P_ParseQName(BS2CC_CompileContext *ctx);
dtVal BS2P_ParseQNameList(BS2CC_CompileContext *ctx);
dtVal BS2P_ParseTypeExpr(BS2CC_CompileContext *ctx);
dtVal BS2P_TryParseDeclList(BS2CC_CompileContext *ctx,dtVal modif, dtVal tyexp);
dtVal BS2P_TryParseDecl(BS2CC_CompileContext *ctx);
dtVal BS2P_TryParseDeclSingle(BS2CC_CompileContext *ctx,dtVal modif, dtVal tyexp);
dtVal BS2P_TryParseArgDecl(BS2CC_CompileContext *ctx);
dtVal BS2P_ParseFunVars(BS2CC_CompileContext *ctx);
//AHSRC:bsvm2c/bs2p_litexpr.c
void BS2P_RaiseError(BS2CC_CompileContext *ctx, char *errn);
void BS2P_RaiseError1(BS2CC_CompileContext *ctx, char *errn,char *parm0);
dtVal BS2P_ParseWrapStringL(BS2CC_CompileContext *ctx, char *str);
dtVal BS2P_ParseStringMulti(BS2CC_CompileContext *ctx);
dtVal BS2P_ParseStringTriple(BS2CC_CompileContext *ctx);
void BS2P_ParseExpectToken(BS2CC_CompileContext *ctx, char *tok);
int BS2P_ParseExpectOptToken(BS2CC_CompileContext *ctx, char *tok);
dtVal BS2P_ParseLitExpr(BS2CC_CompileContext *ctx);
dtVal BS2P_ParseExprPostfix(BS2CC_CompileContext *ctx);
dtVal BS2P_ParseExprPrefixCast(BS2CC_CompileContext *ctx);
dtVal BS2P_ParseExprPrefix(BS2CC_CompileContext *ctx);
dtVal BS2P_ParseExprMulDiv(BS2CC_CompileContext *ctx);
dtVal BS2P_ParseExprAddSub(BS2CC_CompileContext *ctx);
dtVal BS2P_ParseExprShlr(BS2CC_CompileContext *ctx);
dtVal BS2P_ParseExprRelCmp(BS2CC_CompileContext *ctx);
dtVal BS2P_ParseExprEqCmp(BS2CC_CompileContext *ctx);
dtVal BS2P_ParseExprBitOp(BS2CC_CompileContext *ctx);
dtVal BS2P_ParseExprLogOp(BS2CC_CompileContext *ctx);
dtVal BS2P_ParseExprTern(BS2CC_CompileContext *ctx);
dtVal BS2P_ParseExprAssignOp(BS2CC_CompileContext *ctx);
dtVal BS2P_ParseExpr(BS2CC_CompileContext *ctx);
dtVal BS2P_ParseOptExpr(BS2CC_CompileContext *ctx);
dtVal BS2P_ParseExprList(BS2CC_CompileContext *ctx);
dtVal BS2P_ParseNameExpr(BS2CC_CompileContext *ctx);
dtVal BS2P_ParseNameExprList(BS2CC_CompileContext *ctx);
//AHSRC:bsvm2c/bs2p_stmt.c
dtVal BS2P_ParseInnerStatement(BS2CC_CompileContext *ctx);
dtVal BS2P_ParseStatementBlock(BS2CC_CompileContext *ctx);
dtVal BS2P_ParseBlockStatement(BS2CC_CompileContext *ctx);
dtVal BS2P_ParsePackageStatement(BS2CC_CompileContext *ctx);
dtVal BS2P_ParsePackageStatementBlock(BS2CC_CompileContext *ctx);
BTEIFGL_API dtVal BS2P_ParseBuffer(BS2CC_CompileContext *ctx,char *srcbuf, int szsrcbuf);
BTEIFGL_API BS2CC_CompileContext *BS2CC_AllocCompileContext();
//AHSRC:bsvm2c/bs2p_token.c
char *BS2P_EatWhiteOnly(char *s);
char *BS2P_EatWhite(char *s);
int BS2P_ParseHexN(char *s, int n);
char *BS2P_ReadUtf8(char *sb, int *rv);
char *BS2P_EmitUtf8(char *t, int v);
char *BS2P_ParseTokenBasic(char *s, char *tb);
int BS2P_LexBuffer(BS2CC_CompileContext *ctx, char *ibuf, int szbuf);
char *BS2P_PeekToken(BS2CC_CompileContext *ctx, int idx);
void BS2P_NextTokenN(BS2CC_CompileContext *ctx, int cnt);
void BS2P_NextToken(BS2CC_CompileContext *ctx);
char *BS2P_GetCurSrcPosition(BS2CC_CompileContext *ctx, int idx);
void BS2P_SetCurSrcPosition(BS2CC_CompileContext *ctx, char *pos);
int BS2P_GetCurPosition(BS2CC_CompileContext *ctx);
void BS2P_SetCurPosition(BS2CC_CompileContext *ctx, int tok);
int BS2P_GetCurSourceLine(BS2CC_CompileContext *ctx,char **rlfn, int *rlln);
//AHSRC:bsvm2c/bs2c_compile.c
int BS2C_CompileErrorGetSourceLine(BS2CC_CompileContext *ctx);
void BS2C_CompileError(BS2CC_CompileContext *ctx, int errn);
void BS2C_CaseError(BS2CC_CompileContext *ctx);
void BS2C_StubError(BS2CC_CompileContext *ctx);
void BS2C_WarnConstRange(BS2CC_CompileContext *ctx);
void BS2C_ErrDivZero(BS2CC_CompileContext *ctx);
void BS2C_ErrNoDecl(BS2CC_CompileContext *ctx, char *name);
void BS2C_ErrTooFewArgs(BS2CC_CompileContext *ctx);
void BS2C_ErrTooManyArgs(BS2CC_CompileContext *ctx);
void BS2C_ErrStackMisalign(BS2CC_CompileContext *ctx);
void BS2C_ErrStackUnderflow(BS2CC_CompileContext *ctx);
void BS2C_CompileFuncBodyCleanupVar(BS2CC_CompileContext *ctx, BS2CC_VarInfo *vi, int ix);
void BS2C_CompileFuncBodyCleanup(BS2CC_CompileContext *ctx);
void BS2C_CompileFuncBody(BS2CC_CompileContext *ctx, BS2CC_VarInfo *func);
void BS2C_CompileRebuildVarType(BS2CC_CompileContext *ctx, BS2CC_VarInfo *vari);
void BS2C_CompileRebuildFuncType(BS2CC_CompileContext *ctx, BS2CC_VarInfo *vari);
void BS2C_CompileRebuildStructType(BS2CC_CompileContext *ctx, BS2CC_VarInfo *vari);
BTEIFGL_API void BS2C_CompileFuncs(BS2CC_CompileContext *ctx);
BTEIFGL_API void BS2C_DumpErrors(BS2CC_CompileContext *ctx);
BTEIFGL_API int BS2C_CompileModuleBuffer(BS2CC_CompileContext *ctx, char *buf, int szbuf);
BTEIFGL_API int BS2C_CompileModuleList(BS2CC_CompileContext *ctx, char *base, char **names);
//AHSRC:bsvm2c/bs2c_disasm.c
int bs2c_disasm_decnbl(char *ps);
int bs2c_disasm_decbyte(char *ps);
int bs2c_disasm_matchPrefix(byte *cs, char *pat,byte **rcs1, char **rpa1);
byte *bs2c_disasm_ReadVLI(byte *cs, int *rv);
byte *bs2c_disasm_ReadVLI2(byte *cs, s64 *rv);
byte *bs2c_disasm_ReadVLI_Inner(byte *cs, u64 *rv, int *rl);
byte *bs2c_disasm_ReadSplitVLI(byte *cs, int *rvh, int *rvl);
byte *bs2c_disasm_ReadSplit2VLI(byte *cs, int *rvh, s64 *rvl);
byte *bs2c_disasm_ReadFxVLI(byte *cs, double *rv);
byte *bs2c_disasm_ReadZxVLI(byte *cs, int *rz, int *rv);
byte *bs2c_disasm_ReadZxVLI(byte *cs, int *rz, int *rv);
int bs2c_disasm_matchItem(BS2CC_CcFrame *frm, byte *cs, char *pat, byte **rcs1, char **rpa1);
int bs2c_disasm_PrintItem(BGBDT_MM_ParsePrintInfo *prn, BS2CC_CcFrame *frm, byte *cs, char *pat, byte **rcs1, char **rpa1);
int BS2C_DisAsmOp(BGBDT_MM_ParsePrintInfo *prn, BS2CC_CompileContext *ctx, BS2CC_CcFrame *frm);
void BS2C_DisAsmFuncBody(BGBDT_MM_ParsePrintInfo *prn, BS2CC_CompileContext *ctx, BS2CC_CcFrame *frm);
void BS2C_DisAsmStruct(BGBDT_MM_ParsePrintInfo *prn, BS2CC_CompileContext *ctx, BS2CC_VarInfo *vari);
BTEIFGL_API void BS2C_DisAsmFuncs(BGBDT_MM_ParsePrintInfo *prn, BS2CC_CompileContext *ctx);
//AHSRC:bsvm2c/bs2c_emit.c
void BS2C_EmitCheckExpand(BS2CC_CompileContext *ctx, int sz);
void BS2C_EmitByte(BS2CC_CompileContext *ctx, int op);
void BS2C_EmitWord(BS2CC_CompileContext *ctx, int op);
void BS2C_EmitOpcode(BS2CC_CompileContext *ctx, int op);
void BS2C_EmitOpcodeIdx(BS2CC_CompileContext *ctx, int ix);
void BS2C_EmitOpcodeUCx(BS2CC_CompileContext *ctx, u64 ix);
void BS2C_EmitOpcodeSCx(BS2CC_CompileContext *ctx, s64 ix);
void BS2C_EmitOpcodeSuCx(BS2CC_CompileContext *ctx, int z, s64 ix);
void BS2C_EmitOpcodeSuCxD(BS2CC_CompileContext *ctx, int z, double v);
void BS2C_EmitOpcodeFxD(BS2CC_CompileContext *ctx, double f);
void BS2C_EmitOpcodeJx(BS2CC_CompileContext *ctx, int vi, int vj);
void BS2C_EmitOpcodeUKx(BS2CC_CompileContext *ctx, int vi, u64 vj);
void BS2C_EmitOpcodeSKx(BS2CC_CompileContext *ctx, int i, s64 ix);
void BS2C_EmitOpcodeSuKx(BS2CC_CompileContext *ctx, int z, int vi, s64 ix);
void BS2C_EmitOpcodeFKxD(BS2CC_CompileContext *ctx, int vi, double f);
void BS2C_EmitOpcodeUZx(BS2CC_CompileContext *ctx, int z, u64 ix);
void BS2C_EmitOpcodeUZx(BS2CC_CompileContext *ctx, int z, u64 ix);
void BS2C_EmitOpcodeSZx(BS2CC_CompileContext *ctx, int z, s64 ix);
void BS2C_EmitOpcodeUZy(BS2CC_CompileContext *ctx, int z, u64 ix);
void BS2C_EmitOpcodeSZy(BS2CC_CompileContext *ctx, int z, s64 ix);
void BS2C_EmitOpcodeZyStr(BS2CC_CompileContext *ctx, char *str);
void BS2C_EmitOpcodeZxF(BS2CC_CompileContext *ctx, double f);
void BS2C_EmitOpcodeZxFI(BS2CC_CompileContext *ctx, double f, int z);
void BS2C_EmitOpcodeZxD(BS2CC_CompileContext *ctx, double f);
int BS2C_GenTempLabel(BS2CC_CompileContext *ctx);
void BS2C_EmitTempLabel(BS2CC_CompileContext *ctx, int tid);
void BS2C_EmitTempReloc(BS2CC_CompileContext *ctx, int tid);
void BS2C_EmitTempJump(BS2CC_CompileContext *ctx, int tid);
void BS2C_EmitTempJAddr(BS2CC_CompileContext *ctx, int tid);
void BS2C_EmitTempLabelB(BS2CC_CompileContext *ctx, int tid);
int BS2C_GetNamedLabel(BS2CC_CompileContext *ctx, char *name);
void BS2C_FixupLabels(BS2CC_CompileContext *ctx);
int BS2C_ImgLookupString(BS2CC_CompileContext *ctx, char *str);
int BS2C_ImgGetString(BS2CC_CompileContext *ctx, char *str);
void BS2C_EmitReturnV(BS2CC_CompileContext *ctx);
void BS2C_EmitReturnVal(BS2CC_CompileContext *ctx);
void BS2C_EmitReturnCleanupV(BS2CC_CompileContext *ctx, int last);
//AHSRC:bsvm2c/bs2c_expr.c
void BS2C_CompileConvType(BS2CC_CompileContext *ctx, int dty);
void BS2C_CompileLoadNameAsType(BS2CC_CompileContext *ctx,char *name, int ty);
void BS2C_CompileExprPushType(BS2CC_CompileContext *ctx, int dty);
int BS2C_CompileExprPopType(BS2CC_CompileContext *ctx);
void BS2C_CompileExprPopType1(BS2CC_CompileContext *ctx);
void BS2C_CompileExprPopType2(BS2CC_CompileContext *ctx);
void BS2C_CompileExprPopType3(BS2CC_CompileContext *ctx);
void BS2C_CompileExprPopType4(BS2CC_CompileContext *ctx);
void BS2C_CompilePop(BS2CC_CompileContext *ctx);
void BS2C_CompileNoexPop(BS2CC_CompileContext *ctx);
void BS2C_CompileNoexPop2(BS2CC_CompileContext *ctx);
void BS2C_CompileNoexPop3(BS2CC_CompileContext *ctx);
void BS2C_CompileNoexPopN(BS2CC_CompileContext *ctx, int n);
void BS2C_CompileNoexPushI(BS2CC_CompileContext *ctx);
void BS2C_CompileNoexPush(BS2CC_CompileContext *ctx, int dty);
void BS2C_CompilePushDummy(BS2CC_CompileContext *ctx, int dty);
void BS2C_CompileDup(BS2CC_CompileContext *ctx);
void BS2C_CompileBinaryOpSS(BS2CC_CompileContext *ctx, char *op, int dty);
void BS2C_CompileCallArg(BS2CC_CompileContext *ctx,BS2CC_VarInfo *vai, dtVal expr);
void BS2C_CompileCall(BS2CC_CompileContext *ctx, dtVal expr, int dty);
void BS2C_CompileObjMethodCall(BS2CC_CompileContext *ctx,int clsty, char *name, dtVal args, int dty);
void BS2C_CompileObjMethodCallB(BS2CC_CompileContext *ctx,int clsty, char *name, dtVal args, int dty, int flag);
void BS2C_CompileCallSuper(BS2CC_CompileContext *ctx, dtVal expr, int dty);
void BS2C_CompileExprNew(BS2CC_CompileContext *ctx, dtVal expr, int dty);
void BS2C_CompileStoreExpr(BS2CC_CompileContext *ctx, dtVal expr);
void BS2C_CompileExprBinary(BS2CC_CompileContext *ctx,char *op, dtVal ln, dtVal rn, int dty);
void BS2C_CompileExprPushConstInt(BS2CC_CompileContext *ctx, s64 val, int dty);
void BS2C_CompileExpr(BS2CC_CompileContext *ctx,dtVal expr, int dty);
//AHSRC:bsvm2c/bs2c_image.c
byte *BS2C_Image_EmitTag(byte *ct, u64 tag, s64 sz);
byte *BS2C_Image_EmitTagData(byte *ct, u32 tag, int sz,byte *data);
byte *BS2C_Image_EmitUVLI(byte *ct, u64 v);
byte *BS2C_Image_EmitSVLI(byte *ct, s64 v);
byte *BS2C_Image_EmitTagUVLI(byte *ct, u32 tag, u64 val);
byte *BS2C_Image_EmitTagSVLI(byte *ct, u32 tag, s64 val);
byte *BS2C_Image_FlattenGlobalInfo_GblDefI(BS2CC_CompileContext *ctx, BS2CC_VarInfo *vari, byte *ct);
byte *BS2C_Image_FlattenGlobalInfo_GblVar(BS2CC_CompileContext *ctx, BS2CC_VarInfo *vari, byte *ct);
byte *BS2C_Image_FlattenGlobalInfo_GblFunc(BS2CC_CompileContext *ctx, BS2CC_VarInfo *vari, byte *ct);
byte *BS2C_Image_FlattenGlobalInfo_StrVar(BS2CC_CompileContext *ctx, BS2CC_VarInfo *vari, byte *ct);
byte *BS2C_Image_FlattenGlobalInfo_StrFunc(BS2CC_CompileContext *ctx, BS2CC_VarInfo *vari, byte *ct);
byte *BS2C_Image_FlattenGlobalInfo_StructI(BS2CC_CompileContext *ctx, BS2CC_VarInfo *vari, byte *ct);
byte *BS2C_Image_FlattenGlobalInfo_StructDef(BS2CC_CompileContext *ctx, BS2CC_VarInfo *vari, byte *ct);
byte *BS2C_Image_FlattenGlobalInfo_ClassDef(BS2CC_CompileContext *ctx, BS2CC_VarInfo *vari, byte *ct);
byte *BS2C_Image_FlattenGlobalInfo_IfaceDef(BS2CC_CompileContext *ctx, BS2CC_VarInfo *vari, byte *ct);
byte *BS2C_Image_FlattenGlobalInfo_Package(BS2CC_CompileContext *ctx, BS2CC_VarInfo *vari, byte *obuf);
byte *BS2C_Image_FlattenGlobalInfo(BS2CC_CompileContext *ctx, BS2CC_VarInfo *vari, byte *ct);
byte *BS2C_Image_FlattenGlobals(BS2CC_CompileContext *ctx, byte *obuf, int *gix);
byte *BS2C_Image_FlattenGixArray(BS2CC_CompileContext *ctx, byte *obuf, int *gix);
BTEIFGL_API void BS2C_TouchReachable_TouchReachDef(BS2CC_CompileContext *ctx, BS2CC_VarInfo *vari);
BTEIFGL_API void BS2C_TouchReachable_TouchPublicDef(BS2CC_CompileContext *ctx, BS2CC_VarInfo *vari);
BTEIFGL_API int BS2C_TouchReachable(BS2CC_CompileContext *ctx);
int BS2C_Image_CompareMains(BS2CC_CompileContext *ctx, BS2CC_VarInfo *vi1, BS2CC_VarInfo *vi2);
byte *BS2C_Image_FlattenMains(BS2CC_CompileContext *ctx, byte *obuf);
BTEIFGL_API int BS2C_FlattenImage(BS2CC_CompileContext *ctx, byte *obuf, int obmsz);
//AHSRC:bsvm2c/bs2c_infer.c
int BS2C_InferName(BS2CC_CompileContext *ctx, char *name);
int BS2C_InferRetTypeName(BS2CC_CompileContext *ctx, char *name);
int BS2C_InferExprLocalIndex(BS2CC_CompileContext *ctx, dtVal expr);
int BS2C_InferExpr(BS2CC_CompileContext *ctx, dtVal expr);
//AHSRC:bsvm2c/bs2c_jcond.c
int BS2C_CompileGetCondBool(BS2CC_CompileContext *ctx, dtVal cc);
void BS2C_CompileTempJmpIfElse(BS2CC_CompileContext *ctx,dtVal cc, int tt, int tf);
void BS2C_CompileTempJmpThen(BS2CC_CompileContext *ctx,dtVal cc, int tt);
void BS2C_CompileTempJmpElse(BS2CC_CompileContext *ctx,dtVal cc, int tf);
//AHSRC:bsvm2c/bs2c_reduce.c
s64 BS2C_ReduceClampConstRangeL(BS2CC_CompileContext *ctx, s64 iv, int dty);
dtVal BS2C_ReduceExpr(BS2CC_CompileContext *ctx, dtVal expr);
//AHSRC:bsvm2c/bs2c_scope.c
int BS2C_LookupLocal(BS2CC_CompileContext *ctx, char *name);
int BS2C_LookupGlobal(BS2CC_CompileContext *ctx, char *name);
int BS2C_IndexFrameGlobal(BS2CC_CompileContext *ctx, int gix);
int BS2C_IndexFrameLiteral(BS2CC_CompileContext *ctx, int gix);
int BS2C_LookupFrameGlobal(BS2CC_CompileContext *ctx, char *name);
int BS2C_LookupPkgGlobal(BS2CC_CompileContext *ctx, BS2CC_PkgFrame *pkg, char *name);
int BS2C_LookupPkgImpGlobal(BS2CC_CompileContext *ctx, BS2CC_PkgFrame *pkg, char *name);
int BS2C_LookupVariGlobal(BS2CC_CompileContext *ctx, BS2CC_VarInfo *vari, char *name);
BS2CC_VarInfo *BS2C_GetFrameGlobalInfo(BS2CC_CompileContext *ctx, int idx);
BS2CC_VarInfo *BS2C_LookupObjectFieldName(BS2CC_CompileContext *ctx, BS2CC_VarInfo *obj, char *name);
BS2CC_VarInfo *BS2C_LookupObjectFuncName(BS2CC_CompileContext *ctx, BS2CC_VarInfo *obj, char *name);
BS2CC_VarInfo *BS2C_LookupObjectFuncNameB(BS2CC_CompileContext *ctx, BS2CC_VarInfo *obj, char *name);
BS2CC_VarInfo *BS2C_LookupObjectFuncNameArgs(BS2CC_CompileContext *ctx,  BS2CC_VarInfo *obj, char *name, int *aty, int na);
int BS2C_CompileLoadName(BS2CC_CompileContext *ctx, char *name);
int BS2C_CompileStoreName(BS2CC_CompileContext *ctx, char *name);
int BS2C_CompileLoadRefName(BS2CC_CompileContext *ctx, char *name);
int BS2C_CompileLoadDerefName(BS2CC_CompileContext *ctx, char *name);
int BS2C_CompileStoreDerefName(BS2CC_CompileContext *ctx, char *name);
int BS2C_LookupDynamicSlotName(BS2CC_CompileContext *ctx, char *name);
int BS2C_GetDynamicSlotName(BS2CC_CompileContext *ctx, char *name);
int BS2C_GetFrameDynamicSlotName(BS2CC_CompileContext *ctx, char *name);
//AHSRC:bsvm2c/bs2c_stmt.c
void BS2C_CompileStmtVarInit(BS2CC_CompileContext *ctx, BS2CC_VarInfo *vi, dtVal expr);
void BS2C_CompileStmtVar(BS2CC_CompileContext *ctx, dtVal expr);
void BS2C_CompileStmtSwitchDiR(BS2CC_CompileContext *ctx,int *swtgt, int *swval, int swn, int swdfl);
void BS2C_CompileStmtSwitch(BS2CC_CompileContext *ctx, dtVal expr);
void BS2C_CompileStatement(BS2CC_CompileContext *ctx, dtVal expr);
BS2CC_VarInfo *BS2C_AllocVarInfo(BS2CC_CompileContext *ctx);
BS2CC_CcFrame *BS2C_AllocCcFrame(BS2CC_CompileContext *ctx);
BS2CC_PkgFrame *BS2C_AllocPkgFrame(BS2CC_CompileContext *ctx);
BS2CC_PkgFrame *BS2C_LookupPkgFrame(BS2CC_CompileContext *ctx, char *qname);
BS2CC_PkgFrame *BS2C_GetPkgFrame(BS2CC_CompileContext *ctx, char *qname);
BS2CC_PkgFrame *BS2C_EnterPkgFrame(BS2CC_CompileContext *ctx, char *name);
void BS2C_ExitPkgFrame(BS2CC_CompileContext *ctx);
void BS2C_CompileSetupVarInfo(BS2CC_CompileContext *ctx, BS2CC_VarInfo *vi, dtVal expr);
void BS2C_CompileFunVar(BS2CC_CompileContext *ctx, dtVal expr);
void BS2C_CompileFunVarStatement(BS2CC_CompileContext *ctx, dtVal expr);
void BS2C_CompileStructVar(BS2CC_CompileContext *ctx, dtVal expr);
void BS2C_CompileStructFunc(BS2CC_CompileContext *ctx, dtVal expr);
void BS2C_CompileStructVarStatement(BS2CC_CompileContext *ctx, dtVal expr);
void BS2C_CompileSetupTopVarInfo(BS2CC_CompileContext *ctx, BS2CC_VarInfo *vi, dtVal expr);
void BS2C_CompileTopVar(BS2CC_CompileContext *ctx, dtVal expr);
void BS2C_CompileTopFuncArg(BS2CC_CompileContext *ctx,BS2CC_VarInfo *func, dtVal expr);
void BS2C_CompileTopFunc(BS2CC_CompileContext *ctx, dtVal expr);
void BS2C_CompileTopStruct(BS2CC_CompileContext *ctx, dtVal expr);
BTEIFGL_API void BS2C_CompileTopStatement(BS2CC_CompileContext *ctx, dtVal expr);
//AHSRC:bsvm2c/bs2c_type.c
int BS2C_GetTypeBaseZ(BS2CC_CompileContext *ctx, int ty);
char *BS2C_GetTypeSig(BS2CC_CompileContext *ctx, int ty);
BS2CC_VarInfo *BS2C_GetTypeObject(BS2CC_CompileContext *ctx, int ty);
int BS2C_TypeSmallIntP(BS2CC_CompileContext *ctx, int ty);
int BS2C_TypeSmallLongP(BS2CC_CompileContext *ctx, int ty);
int BS2C_TypeSmallFloatP(BS2CC_CompileContext *ctx, int ty);
int BS2C_TypeSmallDoubleP(BS2CC_CompileContext *ctx, int ty);
int BS2C_TypeSignedP(BS2CC_CompileContext *ctx, int ty);
int BS2C_TypeUnsignedP(BS2CC_CompileContext *ctx, int ty);
int BS2C_TypeAddressP(BS2CC_CompileContext *ctx, int ty);
int BS2C_TypeArrayP(BS2CC_CompileContext *ctx, int ty);
int BS2C_TypeVarRefP(BS2CC_CompileContext *ctx, int ty);
int BS2C_TypePointerP(BS2CC_CompileContext *ctx, int ty);
int BS2C_TypeFloatP(BS2CC_CompileContext *ctx, int ty);
int BS2C_TypeDoubleP(BS2CC_CompileContext *ctx, int ty);
int BS2C_TypeSizedArrayP(BS2CC_CompileContext *ctx, int ty);
int BS2C_TypeVoidP(BS2CC_CompileContext *ctx, int ty);
int BS2C_TypeVariantP(BS2CC_CompileContext *ctx, int ty);
int BS2C_TypeDerefType(BS2CC_CompileContext *ctx, int ty);
int BS2C_TypeRefType(BS2CC_CompileContext *ctx, int ty);
int BS2C_TypeGetArraySize(BS2CC_CompileContext *ctx, int ty);
int BS2C_InferSuperType(BS2CC_CompileContext *ctx, int lty, int rty);
int BS2C_TypeAssignSuperType(BS2CC_CompileContext *ctx, int lty, int rty);
int BS2C_TypeBinarySuperType(BS2CC_CompileContext *ctx, char *op, int lty, int rty);
int BS2C_TypeCompatibleP(BS2CC_CompileContext *ctx, int dty, int sty);
int BS2C_TypeBaseType(BS2CC_CompileContext *ctx, dtVal expr);
int BS2C_TypeExtType(BS2CC_CompileContext *ctx, dtVal expr);
int BS2C_TypeRefinedType(BS2CC_CompileContext *ctx, BS2CC_VarInfo *vari, dtVal expr);
//AHSRC:bsvm2i/bs2i_fcnblock.c
BSVM2_Opcode *BSVM2_Interp_AllocOpcode(BSVM2_CodeBlock *cblk);
BSVM2_TailOpcode *BSVM2_Interp_AllocTailOpcode(BSVM2_CodeBlock *cblk);
BSVM2_Trace *BSVM2_Interp_AllocTrace(BSVM2_CodeBlock *cblk);
void BSVM2_Interp_FreeOpcode(BSVM2_CodeBlock *cblk, BSVM2_Opcode *tmp);
void BSVM2_Interp_FreeTailOpcode(BSVM2_CodeBlock *cblk,BSVM2_TailOpcode *tmp);
int BSVM2_Interp_ReadOpcodeNumber(BSVM2_CodeBlock *cblk);
int BSVM2_Interp_DecodeBlockNoexOp(BSVM2_CodeBlock *cblk, int opn);
BSVM2_Trace *BSVM2_Interp_DecodeBlockTraces(BSVM2_CodeBlock *cblk);
//AHSRC:bsvm2i/bs2i_interp.c
BTEIFGL_API int bsvm2_natfib(int x);
BTEIFGL_API void bsvm2_natsorttst(int n);
BTEIFGL_API BSVM2_Context *BSVM2_Interp_AllocContext(void);
BTEIFGL_API BSVM2_Frame *BSVM2_Interp_AllocFrame(BSVM2_Context *ctx);
BTEIFGL_API BSVM2_Trace *BSVM2_Interp_SetupCallVM(BSVM2_Context *ctx, BSVM2_ImageGlobal *vi, BSVM2_Value *args);
BTEIFGL_API int BSVM2_Interp_RunContext(BSVM2_Context *ctx, int lim);
//AHSRC:bsvm2i/bs2i_load.c
byte *BS2I_ReadTag(byte *cs, u64 *rtag, s64 *rlen);
byte *BS2I_ReadTag2(byte *cs, u32 *rtag, int *rlen);
byte *BS2I_ReadVLI_I(byte *cs, u64 *rv, int *rl);
byte *BS2I_ReadUVLI(byte *cs, s64 *rv);
byte *BS2I_ReadSVLI(byte *cs, s64 *rv);
BSVM2_CodeImage *BS2I_AllocImage(void);
BSVM2_ImageGlobal *BS2I_AllocImageGlobal(BSVM2_CodeImage *img);
BSVM2_CodeBlock *BS2I_AllocImageCodeBlock(BSVM2_CodeImage *img);
int BS2I_ImageTagCharMustUnderstand2P(BSVM2_CodeImage *img, byte tagh);
int BS2I_ImageTagCharMustUnderstandP(BSVM2_CodeImage *img, byte tagh);
int BS2I_ImageTagMustUnderstandP(BSVM2_CodeImage *img, u64 tag);
void BS2I_ImageErrorCorruptTag(BSVM2_CodeImage *img);
void BS2I_ImageCheckUnknownTag(BSVM2_CodeImage *img, u64 tag);
int BS2I_ImageGetGlobalOfs(BSVM2_CodeImage *img, int gix);
byte *BS2I_ImageGetGlobalLump(BSVM2_CodeImage *img, int gix);
int BS2I_ImageDecodeGlobalFunc(BSVM2_CodeImage *img, BSVM2_ImageGlobal *gbl, u32 dtag, byte *data, byte *edata);
char *BS2I_ImageTryGetGlobalQName(BSVM2_CodeImage *img, BSVM2_ImageGlobal *gbl);
int BS2I_ImageDecodeGlobalVar(BSVM2_CodeImage *img, BSVM2_ImageGlobal *gbl, u32 dtag, byte *data, byte *edata);
int BS2I_ImageDecodeGlobal(BSVM2_CodeImage *img, BSVM2_ImageGlobal *gbl, byte *gdat);
BSVM2_ImageGlobal *BS2I_ImageGetGlobal(BSVM2_CodeImage *img, int gix);
BTEIFGL_API BSVM2_ImageGlobal *BS2I_ImageGetMain(BSVM2_CodeImage *img, char *qnpkg);
BTEIFGL_API BSVM2_Trace *BS2I_ImageGetFuncTrace(BSVM2_ImageGlobal *vi);
BTEIFGL_API BSVM2_Trace *BS2I_ImageGetMainTrace(BSVM2_CodeImage *img, char *qnpkg);
BTEIFGL_API BSVM2_CodeImage *BS2I_DecodeImageBuffer(byte *ibuf, int isz);
//AHSRC:bsvm2i/bs2i_natcall.c
void *BSVM2_NatCall_GetProcAddress(char *name);
void BSVM2_NatCall_Call_0_V(void *fptr,BSVM2_Value *rv, BSVM2_Value *av);
void BSVM2_NatCall_Call_0_I(void *fptr,BSVM2_Value *rv, BSVM2_Value *av);
void BSVM2_NatCall_Call_0_L(void *fptr,BSVM2_Value *rv, BSVM2_Value *av);
void BSVM2_NatCall_Call_0_F(void *fptr,BSVM2_Value *rv, BSVM2_Value *av);
void BSVM2_NatCall_Call_0_D(void *fptr,BSVM2_Value *rv, BSVM2_Value *av);
void BSVM2_NatCall_Call_0_P(void *fptr,BSVM2_Value *rv, BSVM2_Value *av);
void BSVM2_NatCall_Call_0_A(void *fptr,BSVM2_Value *rv, BSVM2_Value *av);
BSVM2_Trace *BSVM2_TrOp_NatCallGFx(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
void BSVM2_NatCall_Call_N(void *fcn, int nc,BSVM2_Value *rv, BSVM2_Value *av);
BSVM2_Trace *BSVM2_TrOp_NatCallG0(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
char *BSVM2_NatCall_SigNext(char *sig);
char *BSVM2_NatCall_SigGetRet(char *sig);
int BSVM2_NatCall_GetSigOpZ(char *sig);
int BSVM2_NatCall_GetSigBType(char *sig);
int BSVM2_NatCall_GetSigIndexG0(char *sig);
int BSVM2_NatCall_GetSigIndexG1(char *sig,BSVM2_Value *iav, BSVM2_Value *oav);
BSVM2_Trace *BSVM2_TrOp_NatCallG1(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
//AHSRC:bsvm2i/bs2i_oparith.c
void BSVM2_Op_ADDI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SUBI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MULI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_ADDL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SUBL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MULL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_ANDI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_ORI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_XORI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_ANDL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_ORL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_XORL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SHLI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SARI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SHRI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SHLL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SARL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SHRL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_DIVI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MODI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_DIVL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MODL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_ADDF(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SUBF(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MULF(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_DIVF(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_ADDD(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SUBD(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MULD(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_DIVD(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEGI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEGL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEGF(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEGD(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NOTI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NOTL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LNTI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LNTL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CMPI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CMPL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CMPF(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CMPD(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CMP2F(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CMP2D(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CMPA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CMP2A(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_UCMPI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_UCMPL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CMPIC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CMPIL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CMPLC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CMPLL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CMPILL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CMPILC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_DCMPIC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_ADDIC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SUBIC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MULIC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_ADDLC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SUBLC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MULLC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_ANDIC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_ORIC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_XORIC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_ANDLC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_ORLC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_XORLC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SHLIC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SARIC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SHRIC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SHLLC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SARLC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SHRLC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_DIVIC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MODIC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_DIVLC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MODLC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_ADDFC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SUBFC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MULFC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_DIVFC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_ADDDC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SUBDC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MULDC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_DIVDC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_ADDIL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SUBIL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MULIL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_ANDIL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_ORIL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_XORIL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SHLIL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SARIL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_INCI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_DECI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_INCIL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_DECIL(BSVM2_Frame *frm, BSVM2_Opcode *op);
//AHSRC:bsvm2i/bs2i_oparr.c
void BSVM2_Op_LDIXI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDIXL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDIXF(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDIXD(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDIXA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDIXSB(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDIXUB(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDIXSS(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDIXUS(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STIXI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STIXL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STIXF(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STIXD(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STIXA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STIXB(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STIXS(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_RSTIXI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_RSTIXL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_RSTIXF(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_RSTIXD(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_RSTIXA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_RSTIXB(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_RSTIXS(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDIXIC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDIXLC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDIXFC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDIXDC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDIXAC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDIXSBC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDIXUBC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDIXSSC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDIXUSC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STIXIC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STIXLC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STIXFC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STIXDC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STIXAC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STIXBC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STIXSC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_RSTIXIC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_RSTIXLC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_RSTIXFC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_RSTIXDC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_RSTIXAC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_RSTIXBC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_RSTIXSC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LEARI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LEARL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LEARF(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LEARD(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LEARA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LEARB(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LEARS(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LEARIC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LEARLC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LEARFC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LEARDC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LEARAC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LEARBC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LEARSC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LEAST(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LEASTC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEWARR_IC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEWARR_UIC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEWARR_SBC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEWARR_UBC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEWARR_SSC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEWARR_USC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEWARR_LC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEWARR_ULC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEWARR_FC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEWARR_DC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEWARR_AC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEWARR_I(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEWARR_UI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEWARR_SB(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEWARR_UB(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEWARR_SS(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEWARR_US(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEWARR_L(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEWARR_UL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEWARR_F(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEWARR_D(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEWARR_A(BSVM2_Frame *frm, BSVM2_Opcode *op);
//AHSRC:bsvm2i/bs2i_opcode.c
BSVM2_Opcode *BSVM2_Interp_DecodeOpcode(BSVM2_CodeBlock *cblk, int opn);
//AHSRC:bsvm2i/bs2i_opcvt.c
void BSVM2_Op_NOP(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_DUPI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_DUPL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_DUPF(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_DUPD(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_DUPA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_PUSHI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_PUSHL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_PUSHF(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_PUSHD(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_PUSHA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SWAPA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CVTI2L(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CVTI2F(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CVTI2D(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CVTL2I(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CVTL2F(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CVTL2D(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CVTF2I(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CVTF2L(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CVTF2D(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CVTD2I(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CVTD2L(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CVTD2F(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CVTSB2I(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CVTUB2I(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CVTSS2I(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CVTUS2I(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CVTI2AA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CVTL2AA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CVTF2AA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CVTD2AA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CVTAA2I(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CVTAA2L(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CVTAA2F(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CVTAA2D(BSVM2_Frame *frm, BSVM2_Opcode *op);
//AHSRC:bsvm2i/bs2i_opdtvar.c
void BSVM2_Op_ADDAA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SUBAA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MULAA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_ANDAA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_ORAA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_XORAA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SHLAA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SARAA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_SHRAA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_DIVAA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MODAA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NEGAA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_NOTAA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LNTAA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_CMPAA(BSVM2_Frame *frm, BSVM2_Opcode *op);
//AHSRC:bsvm2i/bs2i_opinit.c
int BSVM2_Interp_DecodeOpUCxI(BSVM2_CodeBlock *cblk);
u64 BSVM2_Interp_DecodeOpUCxL(BSVM2_CodeBlock *cblk);
s32 BSVM2_Interp_DecodeOpSCxI(BSVM2_CodeBlock *cblk);
s64 BSVM2_Interp_DecodeOpSCxL(BSVM2_CodeBlock *cblk);
void BSVM2_Interp_DecodeOpUJxI(BSVM2_CodeBlock *cblk,int *ri, int *rj);
void BSVM2_Interp_DecodeOpUKx(BSVM2_CodeBlock *cblk,int *ri, u64 *rj);
s32 bsvm2_interp_decsignfoldi(s32 i);
s64 bsvm2_interp_decsignfoldl(s64 i);
dtVal BSVM2_Interp_DecodeOpAddrConst(BSVM2_CodeBlock *cblk, int ix);
void *BSVM2_Interp_DecodeOpAddrPtr(BSVM2_CodeBlock *cblk, int ix);
void BSVM2_Interp_DecodeOpGx(BSVM2_CodeBlock *cblk, BSVM2_Opcode *op);
void BSVM2_Interp_DecodeOpIx(BSVM2_CodeBlock *cblk, BSVM2_Opcode *op);
void BSVM2_Interp_DecodeOpJx(BSVM2_CodeBlock *cblk, BSVM2_Opcode *op);
void BSVM2_Interp_DecodeOpKx(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, int zty);
void BSVM2_Interp_DecodeOpFx2(BSVM2_CodeBlock *cblk, BSVM2_Opcode *op,int exp, int zty);
void BSVM2_Interp_DecodeOpZx(BSVM2_CodeBlock *cblk, BSVM2_Opcode *op);
void BSVM2_Interp_DecodeOpZy(BSVM2_CodeBlock *cblk, BSVM2_Opcode *op);
void BSVM2_Interp_DecodeOpZn(BSVM2_CodeBlock *cblk, BSVM2_Opcode *op);
void BSVM2_Interp_DecodeOpFx(BSVM2_CodeBlock *cblk, BSVM2_Opcode *op,int zty);
void BSVM2_Interp_DecodeOpCx(BSVM2_CodeBlock *cblk, BSVM2_Opcode *op,int zty);
void BSVM2_Interp_SetupOpBin(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, int zty, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpUn(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, int zty, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpUnL(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, int zty, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpUstL(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, int zty, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpUnP(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, int zty, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpUnPGx(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, int zty, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpUat(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpUatL(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, int zty, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpUatJx(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpUatKx(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, int zty, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpUat2(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, int zty, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpPopUn(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpPopBin(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpPopTrin(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpBinC2(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, int ztyr, int ztyc, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpBinC(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, int zty, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpBinCI(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, int zty, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpBinCJ(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, int zty, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpBinCiSa(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, int zty, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op), void (*run2)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpBinL(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, int zty, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpBinLC(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, int zty, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpBinLL(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, int zty, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpBinC2P(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, int ztyr, int ztyc, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpTrinC2(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, int ztyr, int ztyc, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpTrinCiSa(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, int ztyr, int ztyc, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op), void (*run2)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpTrinC(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, int zty, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpTrinCI(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, int zty, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpPopTrinC(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, int ztyc, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
void BSVM2_Interp_SetupOpPopTrinCI(BSVM2_CodeBlock *cblk,BSVM2_Opcode *op, void (*run)(BSVM2_Frame *frm, BSVM2_Opcode *op));
//AHSRC:bsvm2i/bs2i_opobj.c
void BSVM2_Op_LDOSI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDOSL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDOSF(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDOSD(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDOSA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STOSI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STOSL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STOSF(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STOSD(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STOSA(BSVM2_Frame *frm, BSVM2_Opcode *op);
//AHSRC:bsvm2i/bs2i_opvars.c
void BSVM2_Op_LDI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDF(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDD(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STF(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STD(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDCI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDCL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDCF(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDCD(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDCA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MVI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MVL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MVF(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MVD(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MVA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MVIC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MVLC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MVFC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MVDC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_MVAC(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDGSI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDGSL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDGSF(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDGSD(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_LDGSA(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STGSI(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STGSL(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STGSF(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STGSD(BSVM2_Frame *frm, BSVM2_Opcode *op);
void BSVM2_Op_STGSA(BSVM2_Frame *frm, BSVM2_Opcode *op);
//AHSRC:bsvm2i/bs2i_tailop.c
BSVM2_Trace *BSVM2_TrRun_NULL(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_Def0(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_Def1(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_Def2(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_Def3(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_Def4(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_Def5(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_Def6(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_Def7(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_Def8(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_DefN(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_DefN0(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_DefN1(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_DefN2(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_DefN3(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_DefN4(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_DefN5(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_DefN6(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_DefN7(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_Next0(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_Next1(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_Next2(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_Next3(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_Next4(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_Next5(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_Next6(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_Next7(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_TrRun_Next8(BSVM2_Frame *frm, BSVM2_Trace *tr);
BSVM2_Trace *BSVM2_Interp_DecodeBlockSetupTraceDfl(BSVM2_CodeBlock *cblk, BSVM2_Opcode **ops, int n_ops, BSVM2_TailOpcode *top, int flag);
BSVM2_Trace *BSVM2_TrOp_Default(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JMP(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JEQ(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JNE(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JLT(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JGT(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JLE(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JGE(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_EQI(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_NEI(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_LTI(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_GTI(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_LEI(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_GEI(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_LTUI(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_GTUI(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_LEUI(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_GEUI(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_EQL(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_NEL(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_LTL(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_GTL(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_LEL(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_GEL(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_LTUL(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_GTUL(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_LEUL(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_GEUL(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_EQF(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_NEF(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_LTF(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_GTF(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_LEF(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_GEF(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_EQD(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_NED(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_LTD(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_GTD(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_LED(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_GED(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_RETI(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_RETL(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_RETF(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_RETD(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_RETA(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_RETV(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_RETIC(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_RETLC(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_RETFC(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_RETDC(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_JCMP_RETAC(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
BSVM2_Trace *BSVM2_TrOp_CALLG(BSVM2_Frame *frm, BSVM2_TailOpcode *op);
//AHSRC:bsvm2i/bs2i_topinit.c
byte *BSVM2_Interp_DecodeOpJAddr(BSVM2_CodeBlock *cblk);
void BSVM2_Interp_DecodeTOpGx(BSVM2_CodeBlock *cblk, BSVM2_TailOpcode *op);
void BSVM2_Interp_DecodeTopZx(BSVM2_CodeBlock *cblk, BSVM2_TailOpcode *op);
void BSVM2_Interp_DecodeTopFx2(BSVM2_CodeBlock *cblk,BSVM2_TailOpcode *op, int exp, int zty);
void BSVM2_Interp_SetupTopPopUnJmp(BSVM2_CodeBlock *cblk,BSVM2_TailOpcode *op, BSVM2_Trace *(*run)(BSVM2_Frame *frm, BSVM2_TailOpcode *op));
void BSVM2_Interp_SetupTopPopUn(BSVM2_CodeBlock *cblk,BSVM2_TailOpcode *op, BSVM2_Trace *(*run)(BSVM2_Frame *frm, BSVM2_TailOpcode *op));
void BSVM2_Interp_SetupTopUatJmp(BSVM2_CodeBlock *cblk,BSVM2_TailOpcode *op, BSVM2_Trace *(*run)(BSVM2_Frame *frm, BSVM2_TailOpcode *op));
void BSVM2_Interp_SetupTopUat(BSVM2_CodeBlock *cblk,BSVM2_TailOpcode *op, BSVM2_Trace *(*run)(BSVM2_Frame *frm, BSVM2_TailOpcode *op));
void BSVM2_Interp_SetupTopJCMP(BSVM2_CodeBlock *cblk,BSVM2_TailOpcode *op);
void BSVM2_Interp_SetupTopCallG(BSVM2_CodeBlock *cblk,BSVM2_TailOpcode *op);
BSVM2_TailOpcode *BSVM2_Interp_DecodeTailOpcode(BSVM2_CodeBlock *cblk, int opn);
//AHSRC:entity/ent_tagval.c
int bgbdt_tval_hashname(char *str);
int bgbdt_tval_hashnameraw(char *str);
BGBDT_EntTagType *BGBDT_TagVal_LookupTypeName(char *name);
BGBDT_EntTagType *BGBDT_TagVal_GetTypeName(char *name);
//AHSRC:voxel/vox_chunk.c
BGBDT_VoxRegion *BGBDT_AllocRegion(BGBDT_VoxWorld *world);
BGBDT_VoxChunk *BGBDT_AllocChunk(BGBDT_VoxWorld *world);
byte *BGBDT_WorldAllocVoxelIndexL(BGBDT_VoxWorld *world);
byte *BGBDT_WorldAllocVoxelIndexH(BGBDT_VoxWorld *world);
void BGBDT_WorldFreeVoxelIndexL(BGBDT_VoxWorld *world, byte *buf);
void BGBDT_WorldFreeVoxelIndexH(BGBDT_VoxWorld *world, byte *buf);
void *BGBDT_WorldAllocVoxelData(BGBDT_VoxWorld *world, int num);
void BGBDT_WorldFreeVoxelData(BGBDT_VoxWorld *world, void *buf, int num);
void *BGBDT_WorldReallocVoxelData(BGBDT_VoxWorld *world,void *oldbuf, int oldnum, int newnum);
u32 bgbdt_xyz2rgnid(int bx, int by, int bz);
BTEIFGL_API BGBDT_VoxRegion *BGBDT_WorldGetRegion(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, int accfl);
int BGBDT_WorldDecodeRegionData(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn);
int BGBDT_DecodeChunkLZ(BGBDT_RiceContext *ctx,byte *obuf, int obsz);
int BGBDT_WorldDecodeChunkBits(BGBDT_VoxWorld *world,BGBDT_VoxChunk *chk, byte *ibuf, int ibsz, int accfl);
int BGBDT_WorldDecodeChunk(BGBDT_VoxWorld *world,BGBDT_VoxChunk *chk, byte *ibuf, int accfl);
BTEIFGL_API BGBDT_VoxChunk *BGBDT_WorldGetChunk(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, int accfl);
BTEIFGL_API BGBDT_VoxChunk *BGBDT_GetRegionChunk(BGBDT_VoxWorld *world, BGBDT_VoxRegion *rgn, int bx, int by, int bz, int accfl);
void bgbdt_clearvoxdatastatus(BGBDT_VoxDataStatus *rts);
void BGBDT_WorldGet_UpdateAdjFl(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, BGBDT_VoxDataStatus *rts, int accfl);
int BGBDT_WorldGetChunkVoxIdx(BGBDT_VoxWorld *world,BGBDT_VoxChunk *chk, int bx, int by, int bz);
BGBDT_VoxCoord BGBDT_WorldGetChunkVoxCoord(BGBDT_VoxWorld *world,BGBDT_VoxChunk *chk, int bx, int by, int bz);
BGBDT_VoxCoord BGBDT_WorldGetRegionChunkCoord(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn, int bx, int by, int bz);
BTEIFGL_API int BGBDT_WorldGetVoxelData(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, BGBDT_VoxData *rtd, BGBDT_VoxDataStatus *rts, int accfl);
BTEIFGL_API int BGBDT_WorldGetChunkVoxelData(BGBDT_VoxWorld *world,int bx, int by, int bz, BGBDT_VoxChunk *chk, BGBDT_VoxData *rtd, BGBDT_VoxDataStatus *rts, int accfl);
int BGBDT_WorldTouchAdjacentChunks(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, int accfl);
BTEIFGL_API int BGBDT_WorldSetChunkVoxelData(BGBDT_VoxWorld *world,BGBDT_VoxChunk *chk, BGBDT_VoxCoord xyz, BGBDT_VoxData td, int accfl);
BTEIFGL_API int BGBDT_WorldSetVoxelData(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, BGBDT_VoxData td, int accfl);
//AHSRC:voxel/vox_decrice.c
int BGBDT_Rice_InitTables();
int BGBDT_Rice_NextByte(BGBDT_RiceContext *ctx);
int BGBDT_Rice_SetupRead(BGBDT_RiceContext *ctx, byte *buf, int szbuf);
int BGBDT_Rice_ReadBit(BGBDT_RiceContext *ctx);
int BGBDT_Rice_ReadNBits(BGBDT_RiceContext *ctx, int n);
int BGBDT_Rice_ReadNBitsNoMask(BGBDT_RiceContext *ctx, int n);
int BGBDT_Rice_Read4Bits(BGBDT_RiceContext *ctx);
int BGBDT_Rice_Read8Bits(BGBDT_RiceContext *ctx);
int BGBDT_Rice_Read16Bits(BGBDT_RiceContext *ctx);
u32 BGBDT_Rice_Read32Bits(BGBDT_RiceContext *ctx);
u64 BGBDT_Rice_Read48Bits(BGBDT_RiceContext *ctx);
void BGBDT_Rice_SkipNBits(BGBDT_RiceContext *ctx, int n);
void BGBDT_Rice_Skip8Bits(BGBDT_RiceContext *ctx);
int BGBDT_Rice_PeekWord(BGBDT_RiceContext *ctx);
int BGBDT_Rice_PeekByte(BGBDT_RiceContext *ctx);
int BGBDT_Rice_PeekNibble(BGBDT_RiceContext *ctx);
int BGBDT_Rice_ReadRiceQ(BGBDT_RiceContext *ctx);
int BGBDT_Rice_ReadRice(BGBDT_RiceContext *ctx, int k);
int BGBDT_Rice_ReadAdRice2(BGBDT_RiceContext *ctx, int *rk);
int BGBDT_Rice_ReadAdRiceI(BGBDT_RiceContext *ctx, int *rk);
int BGBDT_Rice_ReadAdRice(BGBDT_RiceContext *ctx, int *rk);
int BGBDT_Rice_ReadAdSRice(BGBDT_RiceContext *ctx, int *rk);
int BGBDT_Rice_ReadRiceDcI(BGBDT_RiceContext *ctx, int rk);
int BGBDT_Rice_ReadRiceDc(BGBDT_RiceContext *ctx, int rk);
int BGBDT_Rice_ReadAdRiceDcI(BGBDT_RiceContext *ctx, int *rk);
int BGBDT_Rice_ReadAdRiceDc(BGBDT_RiceContext *ctx, int *rk);
int BGBDT_Rice_ReadAdSRiceDc(BGBDT_RiceContext *ctx, int *rk);
//AHSRC:voxel/vox_draw.c
void BGBDT_CalcCoordLocalOrigin(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, float *vec);
float BGBDT_CalcCameraChunkMeshDistance(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh);
void BGBDT_CalcChunkMeshLocalCenter(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh, float *vec);
void BGBDT_CalcChunkMeshViewCenter(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh, float *vec);
BTEIFGL_API BGBDT_VoxCoord BGBDT_ConvLocalToVoxCoord(BGBDT_VoxWorld *world, float *vec);
BTEIFGL_API void BGBDT_ConvVoxToLocalCoord(BGBDT_VoxWorld *world, BGBDT_VoxCoord xyz, float *vec);
void BGBDT_CalcChunkMeshFrustumCenter(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh, float *vec);
void BGBDT_DrawVoxChunkMesh(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh);
void BGBDT_TickVoxRegion(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn);
void BGBDT_UpdateVoxRegionPVS(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn);
void BGBDT_UpdateVoxRegionCVS(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn);
void BGBDT_DrawVoxRegion(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn);
BTEIFGL_API void BGBDT_DrawVoxWorld(BGBDT_VoxWorld *world);
//AHSRC:voxel/vox_drawent.c
void BGBDT_DrawVoxRegionEntity(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn, BGBDT_VoxRenderEntity *ent);
void BGBDT_UpdateVoxRegionEntityCVS(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn);
void BGBDT_DrawVoxRegionEntities(BGBDT_VoxWorld *world,BGBDT_VoxRegion *rgn);
//AHSRC:voxel/vox_light.c
int bgbdt_voxlight_blendv(int la, int lb);
int BGBDT_VoxLight_UpdateChunkLight(BGBDT_VoxWorld *world, BGBDT_VoxChunk *chk);
BTEIFGL_API int BGBDT_VoxLight_ClearBlockLightRadius(BGBDT_VoxWorld *world, BGBDT_VoxCoord xyz, int accfl);
BTEIFGL_API int BGBDT_VoxLight_CheckClearBlockLightRadius(BGBDT_VoxWorld *world, BGBDT_VoxCoord xyz, int accfl);
//AHSRC:voxel/vox_mesh.c
BGBDT_VoxChunkMesh *BGBDT_AllocChunkMesh(BGBDT_VoxWorld *world);
void BGBDT_FreeChunkMeshTempData(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh);
void BGBDT_FreeChunkMesh(BGBDT_VoxWorld *world, BGBDT_VoxChunkMesh *mesh);
int BGBDT_VoxMesh_IndexVertex(BGBDT_VoxChunkMesh *mesh,BGBDT_VoxVertex xyz);
int BGBDT_VoxMesh_IndexTriangle(BGBDT_VoxChunkMesh *mesh,BGBDT_VoxTriangle tri);
int BGBDT_VoxMesh_IndexMaterial(BGBDT_VoxChunkMesh *mesh, int mat);
int BGBDT_VoxMesh_EmitTriangle(BGBDT_VoxChunkMesh *mesh,BGBDT_VoxVertex v0, BGBDT_VoxVertex v1, BGBDT_VoxVertex v2, int mat, int atxy, int light);
int BGBDT_VoxMesh_EmitQuad(BGBDT_VoxChunkMesh *mesh,BGBDT_VoxVertex v0, BGBDT_VoxVertex v1, BGBDT_VoxVertex v2, BGBDT_VoxVertex v3, int mat, int atxy, int light);
int BGBDT_VoxMesh_EmitBlockFacesGeneric(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh, BGBDT_VoxChunk *chk, int bx, int by, int bz, BGBDT_VoxData td, BGBDT_VoxDataStatus tds);
int BGBDT_VoxMesh_EmitChunkFaces(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh, BGBDT_VoxChunk *chk);
int BGBDT_VoxMesh_IndexVaVertex(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh, float *xyz, float *st, byte *rgba, byte *norm);
u16 bgbdt_float2hf(float f);
int BGBDT_VoxMesh_IndexVaVertex(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh, float *xyz, float *st, byte *rgba, byte *norm);
float bgbdt_clamp01(float v);
int BGBDT_VoxMesh_EmitVaTriangle(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh, BGBDT_VoxTriangle *tri);
int BGBDT_VoxMesh_RebuildArrays(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh);
int BGBDT_VoxMesh_RebuildChunkMesh(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *mesh, BGBDT_VoxChunk *chk);
int BGBDT_WorldDecodeChunkMesh(BGBDT_VoxWorld *world,BGBDT_VoxChunkMesh *chk, byte *ibuf, int accfl);
BGBDT_VoxChunkMesh *BGBDT_WorldGetChunkMesh(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, int accfl);
BGBDT_VoxChunkMesh *BGBDT_GetRegionChunkMesh(BGBDT_VoxWorld *world, BGBDT_VoxRegion *rgn, int bx, int by, int bz, int accfl);
//AHSRC:voxel/vox_rice.c
BGBDT_RiceContext *BGBDT_Rice_AllocContext(void);
void BGBDT_Rice_FreeContext(BGBDT_RiceContext *ctx);
void BGBDT_Rice_SetupWrite(BGBDT_RiceContext *ctx, byte *obuf, int osz);
void BGBDT_Rice_EmitByte(BGBDT_RiceContext *ctx, int i);
void BGBDT_Rice_WriteBit(BGBDT_RiceContext *ctx, int i);
void BGBDT_Rice_WriteNBits(BGBDT_RiceContext *ctx, int v, int n);
void BGBDT_Rice_WriteNBitsH(BGBDT_RiceContext *ctx, u32 i, int n);
void BGBDT_Rice_WriteNBitsL(BGBDT_RiceContext *ctx, s64 i, int n);
void BGBDT_Rice_Write2Bits(BGBDT_RiceContext *ctx, int i);
void BGBDT_Rice_Write3Bits(BGBDT_RiceContext *ctx, int i);
void BGBDT_Rice_Write4Bits(BGBDT_RiceContext *ctx, int i);
void BGBDT_Rice_Write8Bits(BGBDT_RiceContext *ctx, int v);
void BGBDT_Rice_Write16Bits(BGBDT_RiceContext *ctx, int v);
void BGBDT_Rice_WriteRice(BGBDT_RiceContext *ctx, int v, int k);
int BGBDT_Rice_CountWriteRice(BGBDT_RiceContext *ctx, int v, int k);
void BGBDT_Rice_WriteSRice(BGBDT_RiceContext *ctx, int v, int k);
int BGBDT_Rice_CountWriteSRice(BGBDT_RiceContext *ctx, int v, int k);
void BGBDT_Rice_WriteAdRice(BGBDT_RiceContext *ctx, int v, int *rk);
int BGBDT_Rice_CountWriteAdRice(BGBDT_RiceContext *ctx, int v, int *rk);
void BGBDT_Rice_WriteAdSRice(BGBDT_RiceContext *ctx, int v, int *rk);
void BGBDT_Rice_WriteAdExpRice(BGBDT_RiceContext *ctx, int v, int *rk);
void BGBDT_Rice_WriteAdExpSRice(BGBDT_RiceContext *ctx, int v, int *rk);
int BGBDT_Rice_CountWriteAdRiceDc(BGBDT_RiceContext *ctx, int v, int *rk);
int BGBDT_Rice_CountWriteAdSRiceDc(BGBDT_RiceContext *ctx, int v, int *rk);
void BGBDT_Rice_WriteAdRiceDc(BGBDT_RiceContext *ctx, int v, int *rk);
void BGBDT_Rice_WriteAdSRiceDc(BGBDT_RiceContext *ctx, int v, int *rk);
void BGBDT_Rice_FlushBits(BGBDT_RiceContext *ctx);
//AHSRC:voxel/vox_trace.c
int BGBDT_VoxTrace_CheckChunkEmpty(BGBDT_VoxWorld *world, BGBDT_VoxChunk *chk);
int BGBDT_VoxTrace_CheckChunkSolid(BGBDT_VoxWorld *world, BGBDT_VoxChunk *chk);
int BGBDT_VoxTrace_CheckChunkOpaque(BGBDT_VoxWorld *world, BGBDT_VoxChunk *chk);
BTEIFGL_API BGBDT_VoxChunk *BGBDT_RayCastChunk(BGBDT_VoxWorld *world,BGBDT_VoxCoord spos, BGBDT_VoxCoord epos, BGBDT_VoxCoord *rpos, int tracefl);
BTEIFGL_API int BGBDT_RayCastVoxel(BGBDT_VoxWorld *world,BGBDT_VoxCoord spos, BGBDT_VoxCoord epos, BGBDT_VoxCoord *rpos, BGBDT_VoxCoord *rlpos, BGBDT_VoxData *rtd, BGBDT_VoxDataStatus *rts, int tracefl);
BTEIFGL_API int BGBDT_BoxQueryVoxel(BGBDT_VoxWorld *world,BGBDT_VoxCoord min, BGBDT_VoxCoord max, BGBDT_VoxCoord *rpos, BGBDT_VoxData *rtd, int *rnvox,  int tracefl);
//AHSRC:voxel/vox_voxty.c
BTEIFGL_API int BGBDT_WorldVoxel_GetFlags(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, BGBDT_VoxData td);
BTEIFGL_API char *BGBDT_WorldVoxel_GetTypeName(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, BGBDT_VoxData td);
BTEIFGL_API int BGBDT_WorldVoxel_CheckSolidP(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, BGBDT_VoxData td);
BTEIFGL_API int BGBDT_WorldVoxel_CheckTransparentP(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, BGBDT_VoxData td);
BTEIFGL_API int BGBDT_WorldVoxel_CheckAirP(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, BGBDT_VoxData td);
BTEIFGL_API int BGBDT_WorldVoxel_CheckMatchP(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, BGBDT_VoxData td, int tracefl);
BTEIFGL_API int BGBDT_WorldVoxel_GetGlow(BGBDT_VoxWorld *world,BGBDT_VoxCoord xyz, BGBDT_VoxData td);
BTEIFGL_API BGBDT_VoxTypeInfo *BGBDT_VoxelWorld_LookupTypeInfoName(BGBDT_VoxWorld *world, char *name);
BTEIFGL_API BGBDT_VoxTypeInfo *BGBDT_VoxelWorld_GetTypeInfoName(BGBDT_VoxWorld *world, char *name);
BTEIFGL_API BGBDT_VoxTypeInfo *BGBDT_VoxelWorld_LookupTypeInfoIndex(BGBDT_VoxWorld *world, int idx);
BTEIFGL_API int BGBDT_VoxelWorld_LookupTypeIndexName(BGBDT_VoxWorld *world, char *name);
//AHSRC:voxel/vox_world.c
BGBDT_VoxWorld *BGBDT_AllocVoxelWorld();
int bgbdt_log2f2(int v);
int bgbdt_exp2f2(int v);
void *BGBDT_WorldAllocVoxelTemp(BGBDT_VoxWorld *world, int sz);
void BGBDT_WorldFreeVoxelTemp(BGBDT_VoxWorld *world, void *buf, int sz);
void *BGBDT_WorldReallocVoxelTemp(BGBDT_VoxWorld *world,void *oldbuf, int oldsz, int newsz);
int BGBDT_VoxelWorld_NoisePRandR(BGBDT_VoxWorld *world, BGBDT_VoxCoord xyz, int k);
int BGBDT_VoxelWorld_NoisePRandC(BGBDT_VoxWorld *world, BGBDT_VoxCoord xyz, int k);
int BGBDT_VoxelWorld_NoisePRandV(BGBDT_VoxWorld *world, BGBDT_VoxCoord xyz, int k);
int BGBDT_VoxelWorld_NoisePRandV(BGBDT_VoxWorld *world, BGBDT_VoxCoord xyz, int k);
void BGBDT_VoxelWorld_InitSamplerChk(BGBDT_VoxWorld *world, BGBDT_NoiseSample *samp, BGBDT_VoxCoord xyz, int kf);
float BGBDT_VoxelWorld_NoiseChk(BGBDT_VoxWorld *world, BGBDT_NoiseSample *samp, BGBDT_VoxCoord xyz, int k);
float BGBDT_VoxelWorld_NoiseVox4(BGBDT_VoxWorld *world, BGBDT_NoiseSample *samp, BGBDT_VoxCoord xyz, int k);
float btge_scurve(float a);
int BGBDT_VoxelWorld_GenerateChunkBasic(BGBDT_VoxWorld *world, BGBDT_VoxChunk *chk);
BTEIFGL_API BGBDT_VoxWorld *BGBDT_CreateBasicWorld(char *name);
//AHSRC:btews/btws_diode.c
BTEIFGL_API void btews_diode_Update(BTEWS_WireNode *self, double dt);
BTEIFGL_API void btews_diode_Draw(BTEWS_WireNode *self,float x0, float y0, float x1, float y1);
BTEIFGL_API void btews_diode_Place(BTEWS_Component *self,BTEWS_WireGrid *grid, int x, int y);
//AHSRC:btews/btws_dip.c
BTEIFGL_API void btews_dippin_Update(BTEWS_WireNode *self, double dt);
BTEIFGL_API void btews_dipcore_Update(BTEWS_WireNode *self, double dt);
BTEIFGL_API void btews_dip14_Draw(BTEWS_WireNode *self,float x0, float y0, float x1, float y1);
BTEIFGL_API void btews_dip14_Place(BTEWS_Component *self,BTEWS_WireGrid *grid, int x, int y);
//AHSRC:btews/btws_grid.c
BTEIFGL_API BTEWS_Component *BTEWS_LookupComponent(char *name);
BTEIFGL_API BTEWS_Component *BTEWS_GetComponent(char *name);
BTEIFGL_API BTEWS_WireGrid *BTEWS_AllocGrid(int xs, int ys);
BTEIFGL_API BTEWS_WireNode *BTEWS_GetNode(BTEWS_WireGrid *grid,int x, int y);
BTEIFGL_API BTEWS_WireNode *BTEWS_GetAllocNode(BTEWS_WireGrid *grid,int x, int y);
BTEIFGL_API int BTEWS_CheckEmptyNode(BTEWS_WireGrid *grid,int x, int y);
BTEIFGL_API void BTEWS_DeleteNode2(BTEWS_WireGrid *grid,int x, int y);
BTEIFGL_API void BTEWS_DeleteNode(BTEWS_WireGrid *grid,int x, int y);
BTEIFGL_API void BTEWS_DrawGrid(BTEWS_WireGrid *grid,float xo, float yo, float xsc, float ysc);
BTEIFGL_API void BTEWS_AddNodeLive(BTEWS_WireGrid *grid,BTEWS_WireNode *node);
BTEIFGL_API void BTEWS_MarkNodeDirty(BTEWS_WireGrid *grid,int x, int y);
BTEIFGL_API void BTEWS_MarkNodeDirtyStar(BTEWS_WireGrid *grid,int x, int y);
BTEIFGL_API void BTEWS_UpdateGridStep(BTEWS_WireGrid *grid, double dt);
BTEIFGL_API void BTEWS_UpdateGrid(BTEWS_WireGrid *grid, double dt);
BTEIFGL_API bool BTEWS_NodeIsWireJoin(BTEWS_WireGrid *grid,BTEWS_WireNode *self);
BTEIFGL_API void BTEWS_SpreadGridWireWid(BTEWS_WireGrid *grid,BTEWS_WireNode *self);
BTEIFGL_API void BTEWS_RebuildGridWireLinks(BTEWS_WireGrid *grid, BTEWS_WireNode *self);
BTEIFGL_API void BTEWS_FlushGridNetWires(BTEWS_WireGrid *grid);
BTEIFGL_API void BTEWS_RebuildGridWid(BTEWS_WireGrid *grid);
//AHSRC:btews/btws_netnode.c
BTEIFGL_API BTEWS_NetWire *BTEWS_AllocNetWireNode(BTEWS_WireGrid *grid);
BTEIFGL_API BTEWS_NetWire *BTEWS_LookupNetWireNode(BTEWS_WireGrid *grid, int wid);
BTEIFGL_API BTEWS_NetWire *BTEWS_GetNetWireNode(BTEWS_WireGrid *grid, int wid);
BTEIFGL_API BTEWS_NetComponent *BTEWS_AllocNetComponentNode(BTEWS_WireGrid *grid);
BTEIFGL_API BTEWS_NetComponent *BTEWS_LookupNetComponentNode(BTEWS_WireGrid *grid, int cid);
BTEIFGL_API BTEWS_NetComponent *BTEWS_GetNetComponentNode(BTEWS_WireGrid *grid, int cid);
//AHSRC:btews/btws_resistor.c
void btews_resistor_UpdatePin(BTEWS_WireNode *self, double dt);
void btews_resistor_UpdateDigital(BTEWS_WireNode *self, double dt);
void btews_resistor_Update(BTEWS_WireNode *self, double dt);
void btews_resistor_Draw(BTEWS_WireNode *self,float x0, float y0, float x1, float y1);
BTEIFGL_API void btews_resistor_Place(BTEWS_Component *self,BTEWS_WireGrid *grid, int x, int y);
//AHSRC:btews/btws_transistor.c
BTEIFGL_API void btews_transistor_Update(BTEWS_WireNode *self, double dt);
BTEIFGL_API void btews_transistor_Draw(BTEWS_WireNode *self,float x0, float y0, float x1, float y1);
BTEIFGL_API void btews_transistor_Place(BTEWS_Component *self,BTEWS_WireGrid *grid, int x, int y);
//AHSRC:btews/btws_wire.c
char *btews_wire_Describe(BTEWS_WireNode *self);
char *btews_wire_DescribeDigital(BTEWS_WireNode *self);
BTEIFGL_API int btews_wire_checkConnect(BTEWS_WireNode *self,BTEWS_WireNode *other);
BTEIFGL_API int btews_wire_MouseXY(BTEWS_WireNode *self,float x0, float y0, float x1, float y1);
BTEIFGL_API void BTEWS_Wire_ColorForVoltage(BTEWS_WireNode *self, double v);
BTEIFGL_API void btews_wire_Draw(BTEWS_WireNode *self,float x0, float y0, float x1, float y1);
BTEIFGL_API void btews_wire_UpdateAdjacent(BTEWS_WireNode *self);
void btews_wire_DigitalPick(BTEWS_WireNode *self, BTEWS_WireNode *other,int *rdg, int adg, int *rsrc, int smsk);
BTEIFGL_API void btews_wire_UpdateDigital(BTEWS_WireNode *self, double dt);
BTEIFGL_API void btews_wire_Update(BTEWS_WireNode *self, double dt);
BTEIFGL_API void btews_wire_Place(BTEWS_Component *self,BTEWS_WireGrid *grid, int x, int y);
BTEIFGL_API void btews_wire_PlaceDigital(BTEWS_Component *self,BTEWS_WireGrid *grid, int x, int y);
//AHSRC:btews/msp430i/mspi_interp.c
void *msp430_malloc(int sz);
BTEIFGL_API MSP430_Context *MSP430_AllocContext(void);
BTEIFGL_API MSP430_Context *MSP430_NewContext(int ty, int szRam, int szRom);
int msp430_readHexDigit(char ch);
int msp430_readHexNibble(char **rcs);
int msp430_readHexByte(char **rcs);
int msp430_readHexWord(char **rcs);
int msp430_readHexDWord(char **rcs);
BTEIFGL_API double MSP430_GetCurrentMHz(MSP430_Context *ctx);
BTEIFGL_API int MSP430_GetCurrentMips(MSP430_Context *ctx);
BTEIFGL_API double MSP430_GetCurrentAvgMips(MSP430_Context *ctx);
BTEIFGL_API int MSP430_GetOutputPinRunning(MSP430_Context *ctx);
BTEIFGL_API int MSP430_DecodeIHex(MSP430_Context *ctx, char *ibuf, int szBuf);
BTEIFGL_API int MSP430_LoadIHex(MSP430_Context *ctx, char *fname);
BTEIFGL_API char *MSP430_LookupMapSymbol(MSP430_Context *ctx, int addr, int *rbase);
BTEIFGL_API int MSP430_AddMapSymbol(MSP430_Context *ctx, char *sym, int addr);
BTEIFGL_API int MSP430_DecodeMap(MSP430_Context *ctx, char *ibuf, int szBuf);
BTEIFGL_API int MSP430_LoadMap(MSP430_Context *ctx, char *fname);
BTEIFGL_API int MSP430_FlushICache(MSP430_Context *ctx);
BTEIFGL_API int MSP430_Reset(MSP430_Context *ctx);
BTEIFGL_API int MSP430_Run(MSP430_Context *ctx);
BTEIFGL_API int MSP430_RunCount(MSP430_Context *ctx, int cnt);
BTEIFGL_API int MSP430_Push(MSP430_Context *ctx, int val);
BTEIFGL_API int MSP430_Interupt(MSP430_Context *ctx, int inum);
BTEIFGL_API int MSP430_UpdatePeri(MSP430_Context *ctx);
BTEIFGL_API int MSP430_PinInputVoltage(MSP430_Context *ctx,int inum, float val);
//AHSRC:btews/msp430i/mspi_mmu.c
int MSP430_VaReadByte(MSP430_Context *ctx, int addr);
int MSP430_VaWriteByte(MSP430_Context *ctx, int addr, int val);
int MSP430_VaReadWord(MSP430_Context *ctx, int addr);
int MSP430_VaWriteWord(MSP430_Context *ctx, int addr, int val);
int MSP430_VaReadWordSP(MSP430_Context *ctx, int addr);
int MSP430_VaWriteWordSP(MSP430_Context *ctx, int addr, int val);
int MSP430_VaReadWordPC(MSP430_Context *ctx, int addr);
int MSP430_GetRegB(MSP430_Context *ctx, int reg);
int MSP430_VaAddrIsRomP(MSP430_Context *ctx, int addr);
//AHSRC:btews/msp430i/mspi_oparith.c
MSP430_Opcode *MSP430_OpMovRRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpMovRRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpMovRIW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpMovMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpMovMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddRRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddRRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddRIW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddRIB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddPcRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddPcMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddRRW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddRRB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddRIW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddRIB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddMW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddMB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddcRRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddcRRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddcRIW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddcRIB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddcMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddcMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddcRRW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddcRRB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddcRIW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAddcRIB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubRRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubRRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubRIW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubRIB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubRRW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubRRB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubRIW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubRIB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubcRRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubcRRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubcRIW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubcRIB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubcMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubcMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubcRRW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubcRRB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubcRIW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSubcRIB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpCmpRRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpCmpRRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpCmpRIW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpCmpRIB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpCmpMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpCmpMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBitRRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBitRRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBitRIW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBitRIB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBitMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBitMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBicRRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBicRRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBicRIW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBicRIB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBicMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBicMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBisRRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBisRRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBisRIW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBisRIB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBisMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBisMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpXorRRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpXorRRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpXorRIW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpXorRIB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpXorMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpXorMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpXorRRW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpXorRRB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpXorRIW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpXorRIB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAndRRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAndRRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAndRIW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAndRIB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAndMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAndMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAndRRW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAndRRB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAndRIW_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpAndRIB_NoSR(MSP430_Context *ctx, MSP430_Opcode *op);
//AHSRC:btews/msp430i/mspi_opcode.c
MSP430_Opcode *MSP430_AllocOpcode(MSP430_Context *ctx);
MSP430_Opcode *MSP430_LookupOpcode(MSP430_Context *ctx, int addr);
MSP430_Opcode *MSP430_GetOpcode(MSP430_Context *ctx, int addr);
MSP430_Opcode *MSP430_LookupHashOpcode(MSP430_Context *ctx, int addr);
int MSP430_GetOpMemDestI(MSP430_Context *ctx, MSP430_Opcode *op);
int MSP430_GetOpMemSrcI(MSP430_Context *ctx, MSP430_Opcode *op);
int MSP430_GetOpMemDest(MSP430_Context *ctx, MSP430_Opcode *op);
int MSP430_GetOpMemDestValueByte(MSP430_Context *ctx, MSP430_Opcode *op);
int MSP430_GetOpMemDestValueWord(MSP430_Context *ctx, MSP430_Opcode *op);
int MSP430_GetOpMemSrcValueByte(MSP430_Context *ctx, MSP430_Opcode *op);
int MSP430_GetOpMemSrcValueWord(MSP430_Context *ctx, MSP430_Opcode *op);
void MSP430_UpdateStatusW(MSP430_Context *ctx, int a, int b, int k);
void MSP430_UpdateStatusB(MSP430_Context *ctx, int a, int b, int k);
MSP430_Opcode *MSP430_OpTrapInv(MSP430_Context *ctx, MSP430_Opcode *op);
void MSP430_DecodeOpcodeArgsUOp(MSP430_Context *ctx,MSP430_Opcode *cur, int opn, int *raddr);
void MSP430_DecodeOpcodeArgsBinOp(MSP430_Context *ctx,MSP430_Opcode *cur, int opn, int *raddr);
void MSP430_DecodeOpcode_ClobberLSR(MSP430_Context *ctx,MSP430_Opcode *cur);
void MSP430_DecodeOpcode_CopyValues(MSP430_Context *ctx,MSP430_Opcode *dop, MSP430_Opcode *sop);
int MSP430_DecodeOpcodeI(MSP430_Context *ctx,MSP430_Opcode *cur, int opn, int *raddr);
MSP430_Opcode *MSP430_DecodeOpcode(MSP430_Context *ctx, int *raddr);
MSP430_Opcode *MSP430_DirectInterpOpcode(MSP430_Context *ctx,MSP430_Opcode *cur);
MSP430_Opcode *MSP430_GetDecodeOpcode(MSP430_Context *ctx, int addr);
MSP430_Opcode *MSP430_GetDecodeRomOpcode(MSP430_Context *ctx, int addr);
char *MSP430_DumpOpcode_NameForOp(MSP430_Context *ctx, MSP430_Opcode *cur);
char *MSP430_DumpOpcode_NameForReg(MSP430_Context *ctx, int reg);
void MSP430_DumpOpcode_Param(MSP430_Context *ctx, MSP430_Opcode *cur,int fl, int reg, int offs);
void MSP430_DumpOpcode(MSP430_Context *ctx, MSP430_Opcode *cur);
//AHSRC:btews/msp430i/mspi_opmisc.c
MSP430_Opcode *MSP430_OpRrcRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpRrcRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpRrcMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpRrcMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSwpbRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSwpbMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpRraRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpRraRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpRraMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpRraMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSxtRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpSxtMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpPushRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpPushRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpPushMB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpPushMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpPopRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpPopRB(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpCallRW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpCallMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpCallIW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpBrMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpRet(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpReti(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJmp(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJne(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJeq(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJnc(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJc(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJn(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJge(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJl(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpRepI(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpRepR(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJmpDi(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJneDi(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJeqDi(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJncDi(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJcDi(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJnDi(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJgeDi(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpJlDi(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpCallDiMW(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpRetiDi(MSP430_Context *ctx, MSP430_Opcode *op);
MSP430_Opcode *MSP430_OpRetDi(MSP430_Context *ctx, MSP430_Opcode *op);
